// Code generated by go generate; DO NOT EDIT.
package dom

const htmlTmpl = `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    {{range .Metas}}<meta{{if .Name}} name="{{.Name}}"{{end}}{{if .HTTPEquiv}} http-equiv="{{.HTTPEquiv}}"{{end}}{{if .Content}} content="{{.Content}}"{{end}}>
    {{end}} 
    <title>{{.Title}}</title>
    <style media="all" type="text/css">
{{.PageCSS}}
    </style>
    {{if .Icon}}<link rel="icon" type="image/png" href="{{.Icon}}">{{end}}
    {{range .CSS}}
    <link type="text/css" rel="stylesheet" href="{{.}}">{{end}}
</head>
<body>
    <div></div>

    <script>
{{if .RootCompoName}}var loadedComp = '{{.RootCompoName}}';{{end}}

var golangRequest = function (payload) {
    {{.GoRequest}}(payload)
}

{{.PageJS}}
    </script>
    
    {{range .Javascripts}}
    <script src="{{.}}"></script>{{end}}
</body>
</html>
`
const jsTmpl = `
const goapp = {
    nodes: {},

    actions: Object.freeze({
        "setRoot": 0,
        "newNode": 1,
        "delNode": 2,
        "setAttr": 3,
        "delAttr": 4,
        "setText": 5,
        "appendChild": 6,
        "removeChild": 7,
        "replaceChild": 8,
    })
};

function render(changes = []) {
    changes.forEach(c => {
        switch (c.Action) {
            case goapp.actions.setRoot:
                setRoot(c);
                break;

            case goapp.actions.newNode:
                newNode(c);
                break;

            case goapp.actions.delNode:
                delNode(c);
                break;

            case goapp.actions.setAttr:
                setAttr(c);
                break;

            case goapp.actions.delAttr:
                delAttr(c);
                break;

            case goapp.actions.setText:
                setText(c);
                break;

            case goapp.actions.appendChild:
                appendChild(c);
                break;

            case goapp.actions.removeChild:
                removeChild(c);
                break;

            case goapp.actions.replaceChild:
                replaceChild(c);
                break;

            default:
                console.log(c.Type + ' change is not supported');
        }
    });
}

function setRoot(change = {}) {
    const { NodeID } = change;

    const n = goapp.nodes[NodeID];
    n.IsRootCompo = true;

    const root = compoRoot(n);
    if (!root) {
        return;
    }

    document.body.replaceChild(root, document.body.firstChild);
}

function newNode(change = {}) {
    const { IsCompo = false, Type, NodeID, CompoID, Namespace } = change;


    if (IsCompo) {
        goapp.nodes[NodeID] = {
            Type,
            ID: NodeID,
            IsCompo
        };

        return;
    }

    var n = null;

    if (Type === 'text') {
        n = document.createTextNode("");
    } else if (change.Namespace) {
        n = document.createElementNS(Namespace, Type);
    } else {
        n = document.createElement(Type);
    }

    n.ID = NodeID;
    n.CompoID = CompoID;
    goapp.nodes[NodeID] = n;
}

function delNode(change = {}) {
    const { NodeID } = change;
    delete goapp.nodes[NodeID];
}

function setAttr(change = {}) {
    const { NodeID, Key, Value = '' } = change;

    const n = goapp.nodes[NodeID];
    if (!n) {
        return;
    }

    n.setAttribute(Key, Value);
}

function delAttr(change = {}) {
    const { NodeID, Key } = change;

    const n = goapp.nodes[NodeID];
    if (!n) {
        return;
    }

    n.removeAttribute(Key);
}

function setText(change = {}) {
    const { NodeID, Value } = change;

    const n = goapp.nodes[NodeID];
    if (!n) {
        return;
    }

    n.nodeValue = Value;
}

function appendChild(change = {}) {
    const { NodeID, ChildID } = change;

    const n = goapp.nodes[NodeID];
    if (!n) {
        return;
    }

    if (n.IsCompo) {
        n.RootID = ChildID;
        return;
    }

    const c = compoRoot(goapp.nodes[ChildID]);
    if (!c) {
        return;
    }

    n.appendChild(c)
}

function removeChild(change = {}) {
    const { NodeID, ChildID } = change;

    const n = goapp.nodes[NodeID];
    if (!n) {
        return;
    }

    const c = compoRoot(goapp.nodes[ChildID]);
    if (!c) {
        return;
    }

    n.removeChild(c);
}

function replaceChild(change = {}) {
    const { NodeID, ChildID, NewChildID } = change;

    const n = goapp.nodes[NodeID];
    if (!n) {
        return;
    }

    const c = compoRoot(goapp.nodes[ChildID]);
    if (!c) {
        return;
    }

    const nc = compoRoot(goapp.nodes[NewChildID]);
    if (!nc) {
        return;
    }

    if (n.IsCompo) {
        n.RootID = NewChildID;

        if (n.IsRootCompo) {
            setRoot({ NodeID: n.ID });
        }

        return;
    }

    n.replaceChild(nc, c);
}

function compoRoot(node) {
    if (!node || !node.IsCompo) {
        return node;
    }

    const n = goapp.nodes[node.RootID];
    return compoRoot(n);
}

function mapObject(obj) {
    var map = {};

    for (var field in obj) {
        const name = field[0].toUpperCase() + field.slice(1);
        const value = obj[field];
        const type = typeof value;

        switch (type) {
            case 'object':
                break;

            case 'function':
                break;

            default:
                map[name] = value;
                break;
        }
    }

    return map;
}

function callCompoHandler(elem, event, fieldOrMethod) {
    switch (event.type) {
        case 'change':
            onchangeToGolang(elem, fieldOrMethod);
            break;

        case 'drag':
        case 'dragstart':
        case 'dragend':
        case 'dragexit':
            onDragStartToGolang(elem, event, fieldOrMethod);
            break;

        case 'dragenter':
        case 'dragleave':
        case 'dragover':
        case 'drop':
            ondropToGolang(elem, event, fieldOrMethod);
            break;

        case 'contextmenu':
            event.preventDefault();

        default:
            eventToGolang(elem, event, fieldOrMethod);
            break;
    }
}

function onchangeToGolang(elem, fieldOrMethod) {
    golangRequest(JSON.stringify({
        'CompoID': elem.CompoID,
        'FieldOrMethod': fieldOrMethod,
        'JSONValue': JSON.stringify(elem.value)
    }));
}

function onDragStartToGolang(elem, event, fieldOrMethod) {
    const payload = mapObject(event.dataTransfer);
    payload['Data'] = elem.dataset.drag;
    setPayloadSource(payload, elem);

    event.dataTransfer.setData('text', elem.dataset.drag);

    golangRequest(JSON.stringify({
        'CompoID': elem.CompoID,
        'FieldOrMethod': fieldOrMethod,
        'JSONValue': JSON.stringify(payload)
    }));
}

function ondropToGolang(elem, event, fieldOrMethod) {
    event.preventDefault();

    const payload = mapObject(event.dataTransfer);
    payload['Data'] = event.dataTransfer.getData('text');
    payload['FileOverride'] = 'xxx';
    setPayloadSource(payload, elem);

    golangRequest(JSON.stringify({
        'CompoID': elem.CompoID,
        'FieldOrMethod': fieldOrMethod,
        'JSONValue': JSON.stringify(payload),
        'Override': 'Files'
    }));
}

function eventToGolang(elem, event, fieldOrMethod) {
    const payload = mapObject(event);
    setPayloadSource(payload, elem);

    if (elem.contentEditable === 'true') {
        payload['InnerText'] = elem.innerText;
    }

    golangRequest(JSON.stringify({
        'CompoID': elem.CompoID,
        'FieldOrMethod': fieldOrMethod,
        'JSONValue': JSON.stringify(payload)
    }));
}

function setPayloadSource(payload, elem) {
    payload['Source'] = {
        'GoappID': elem.ID,
        'CompoID': elem.CompoID,
        'ID': elem.id,
        'Class': elem.className,
        'Data': elem.dataset,
        'Value': elem.value
    };
}`
const cssTmpl = `html {
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
}

body {
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
    overflow: hidden;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    font-size: 11pt;
    font-weight: 300;
}

h1 {
    margin: 0;
    padding: 30px 24px 6px;
    outline: 0;
    font-weight: 200;
    text-transform: lowercase;
    letter-spacing: 1px;
}

h2,
h3,
h4,
h5,
h6 {
    margin: 0;
    padding: 3px 24px 6px;
    outline: 0;
    font-weight: 200;
    text-transform: lowercase;
}

p {
    margin: 0;
    padding: 3px 24px 6px;
    outline: 0;
}

a {
    color: currentColor;
    text-decoration: none;
    cursor: pointer;
}

a:hover {
    color: deepskyblue;
}

ul {
    margin: 0;
    padding: 3px 24px 6px 42px;
    outline: 0;
}

ul li {
    margin: 0;
    padding: 3px 0;
}

ul li:first-child {
    padding: 0 0 3px;
}

ul li:last-child {
    padding: 3px 0 0;
}

table {
    width: calc(100% - 48px);
    margin: 0 24px;
    padding: 3px 0 6px;
    border-collapse: collapse;
    table-layout: fixed;
}

table th {
    padding: 0 12px 12px;
    border-bottom: 1px solid darkgray;
    font-size: 11pt;
    font-weight: bold;
    /* text-transform: lowercase; */
}

table td {
    padding: 12px;
    border-bottom: 0.1px solid darkgray;
    text-align: center;
}

table tr:first-child td {
    padding: 0 12px 12px;
}

table tr:last-child td {
    border-bottom: 0;
    padding: 12px;
}

::-webkit-scrollbar {
    background-color: rgba(255, 255, 255, 0.04);
}

::-webkit-scrollbar-thumb {
    background-color: rgba(255, 255, 255, 0.05);
}`
