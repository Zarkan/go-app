package app

// Code generated by go generate; DO NOT EDIT.

import (
	"fmt"
	"reflect"
)

// HTMLA represents an HTML element <a>.
type HTMLA struct {
	elem
}

// A returns an HTML element that defines a hyperlink.
func A() *HTMLA {
	return &HTMLA{
		elem: elem{
			tag:         "a",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLA) Body(nodes ...Node) *HTMLA {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLA) AccessKey(v string) *HTMLA {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLA) Class(v string) *HTMLA {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLA) ContentEditable(v bool) *HTMLA {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLA) DataSet(k, v string) *HTMLA {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLA) Dir(v string) *HTMLA {
	e.elem.setAttribute("dir", v)
	return e
}

// Download specifies that the target will be downloaded when a user clicks on the hyperlink.
func (e *HTMLA) Download(v bool) *HTMLA {
	e.elem.setAttribute("download", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLA) Draggable(v bool) *HTMLA {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLA) Hidden(v bool) *HTMLA {
	e.elem.setAttribute("hidden", v)
	return e
}

// Href specifies the URL of the page the link goes to.
func (e *HTMLA) Href(v string) *HTMLA {
	e.elem.setAttribute("href", v)
	return e
}

// HrefLang specifies the language of the linked document.
func (e *HTMLA) HrefLang(v string) *HTMLA {
	e.elem.setAttribute("hreflang", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLA) ID(v string) *HTMLA {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLA) Lang(v string) *HTMLA {
	e.elem.setAttribute("lang", v)
	return e
}

// Media specifies what media/device the linked document is optimized for.
func (e *HTMLA) Media(v string) *HTMLA {
	e.elem.setAttribute("media", v)
	return e
}

// Ping specifies a list of URLs to be notified if the user follows the hyperlink.
func (e *HTMLA) Ping(v string) *HTMLA {
	e.elem.setAttribute("ping", v)
	return e
}

// Rel specifies the relationship between the current document and the linked document.
func (e *HTMLA) Rel(v string) *HTMLA {
	e.elem.setAttribute("rel", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLA) Spellcheck(v bool) *HTMLA {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLA) Style(v string) *HTMLA {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLA) TabIndex(v int) *HTMLA {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Target specifies the target for where to open the linked document or where to submit the form.
func (e *HTMLA) Target(v string) *HTMLA {
	e.elem.setAttribute("target", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLA) Title(v string) *HTMLA {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLA) Type(v string) *HTMLA {
	e.elem.setAttribute("type", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLA) OnBlur(h EventHandler) *HTMLA {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLA) OnChange(h EventHandler) *HTMLA {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLA) OnClick(h EventHandler) *HTMLA {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLA) OnContextMenu(h EventHandler) *HTMLA {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLA) OnCopy(h EventHandler) *HTMLA {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLA) OnCut(h EventHandler) *HTMLA {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLA) OnDblClick(h EventHandler) *HTMLA {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLA) OnDrag(h EventHandler) *HTMLA {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLA) OnDragEnd(h EventHandler) *HTMLA {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLA) OnDragEnter(h EventHandler) *HTMLA {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLA) OnDragLeave(h EventHandler) *HTMLA {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLA) OnDragOver(h EventHandler) *HTMLA {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLA) OnDragStart(h EventHandler) *HTMLA {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLA) OnDrop(h EventHandler) *HTMLA {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLA) OnFocus(h EventHandler) *HTMLA {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLA) OnInput(h EventHandler) *HTMLA {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLA) OnInvalid(h EventHandler) *HTMLA {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLA) OnKeyDown(h EventHandler) *HTMLA {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLA) OnKeyPress(h EventHandler) *HTMLA {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLA) OnKeyup(h EventHandler) *HTMLA {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLA) OnMouseDown(h EventHandler) *HTMLA {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLA) OnMouseMove(h EventHandler) *HTMLA {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLA) OnMouseOut(h EventHandler) *HTMLA {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLA) OnMouseOver(h EventHandler) *HTMLA {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLA) OnMouseUp(h EventHandler) *HTMLA {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLA) OnPaste(h EventHandler) *HTMLA {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLA) OnReset(h EventHandler) *HTMLA {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLA) OnScroll(h EventHandler) *HTMLA {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLA) OnSearch(h EventHandler) *HTMLA {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLA) OnSelect(h EventHandler) *HTMLA {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLA) OnSubmit(h EventHandler) *HTMLA {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLA) OnWheel(h EventHandler) *HTMLA {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLA) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLAbbr represents an HTML element <abbr>.
type HTMLAbbr struct {
	elem
}

// Abbr returns an HTML element that defines an abbreviation or an acronym.
func Abbr() *HTMLAbbr {
	return &HTMLAbbr{
		elem: elem{
			tag:         "abbr",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLAbbr) Body(nodes ...Node) *HTMLAbbr {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLAbbr) AccessKey(v string) *HTMLAbbr {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLAbbr) Class(v string) *HTMLAbbr {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLAbbr) ContentEditable(v bool) *HTMLAbbr {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLAbbr) DataSet(k, v string) *HTMLAbbr {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLAbbr) Dir(v string) *HTMLAbbr {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLAbbr) Draggable(v bool) *HTMLAbbr {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLAbbr) Hidden(v bool) *HTMLAbbr {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLAbbr) ID(v string) *HTMLAbbr {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLAbbr) Lang(v string) *HTMLAbbr {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLAbbr) Spellcheck(v bool) *HTMLAbbr {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLAbbr) Style(v string) *HTMLAbbr {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLAbbr) TabIndex(v int) *HTMLAbbr {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLAbbr) Title(v string) *HTMLAbbr {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLAbbr) OnBlur(h EventHandler) *HTMLAbbr {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLAbbr) OnChange(h EventHandler) *HTMLAbbr {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLAbbr) OnClick(h EventHandler) *HTMLAbbr {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLAbbr) OnContextMenu(h EventHandler) *HTMLAbbr {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLAbbr) OnCopy(h EventHandler) *HTMLAbbr {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLAbbr) OnCut(h EventHandler) *HTMLAbbr {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLAbbr) OnDblClick(h EventHandler) *HTMLAbbr {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLAbbr) OnDrag(h EventHandler) *HTMLAbbr {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLAbbr) OnDragEnd(h EventHandler) *HTMLAbbr {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLAbbr) OnDragEnter(h EventHandler) *HTMLAbbr {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLAbbr) OnDragLeave(h EventHandler) *HTMLAbbr {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLAbbr) OnDragOver(h EventHandler) *HTMLAbbr {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLAbbr) OnDragStart(h EventHandler) *HTMLAbbr {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLAbbr) OnDrop(h EventHandler) *HTMLAbbr {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLAbbr) OnFocus(h EventHandler) *HTMLAbbr {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLAbbr) OnInput(h EventHandler) *HTMLAbbr {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLAbbr) OnInvalid(h EventHandler) *HTMLAbbr {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLAbbr) OnKeyDown(h EventHandler) *HTMLAbbr {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLAbbr) OnKeyPress(h EventHandler) *HTMLAbbr {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLAbbr) OnKeyup(h EventHandler) *HTMLAbbr {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLAbbr) OnMouseDown(h EventHandler) *HTMLAbbr {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLAbbr) OnMouseMove(h EventHandler) *HTMLAbbr {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLAbbr) OnMouseOut(h EventHandler) *HTMLAbbr {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLAbbr) OnMouseOver(h EventHandler) *HTMLAbbr {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLAbbr) OnMouseUp(h EventHandler) *HTMLAbbr {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLAbbr) OnPaste(h EventHandler) *HTMLAbbr {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLAbbr) OnReset(h EventHandler) *HTMLAbbr {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLAbbr) OnScroll(h EventHandler) *HTMLAbbr {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLAbbr) OnSearch(h EventHandler) *HTMLAbbr {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLAbbr) OnSelect(h EventHandler) *HTMLAbbr {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLAbbr) OnSubmit(h EventHandler) *HTMLAbbr {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLAbbr) OnWheel(h EventHandler) *HTMLAbbr {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLAbbr) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLAddress represents an HTML element <address>.
type HTMLAddress struct {
	elem
}

// Address returns an HTML element that defines contact information for the author/owner of a document.
func Address() *HTMLAddress {
	return &HTMLAddress{
		elem: elem{
			tag:         "address",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLAddress) Body(nodes ...Node) *HTMLAddress {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLAddress) AccessKey(v string) *HTMLAddress {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLAddress) Class(v string) *HTMLAddress {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLAddress) ContentEditable(v bool) *HTMLAddress {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLAddress) DataSet(k, v string) *HTMLAddress {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLAddress) Dir(v string) *HTMLAddress {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLAddress) Draggable(v bool) *HTMLAddress {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLAddress) Hidden(v bool) *HTMLAddress {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLAddress) ID(v string) *HTMLAddress {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLAddress) Lang(v string) *HTMLAddress {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLAddress) Spellcheck(v bool) *HTMLAddress {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLAddress) Style(v string) *HTMLAddress {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLAddress) TabIndex(v int) *HTMLAddress {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLAddress) Title(v string) *HTMLAddress {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLAddress) OnBlur(h EventHandler) *HTMLAddress {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLAddress) OnChange(h EventHandler) *HTMLAddress {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLAddress) OnClick(h EventHandler) *HTMLAddress {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLAddress) OnContextMenu(h EventHandler) *HTMLAddress {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLAddress) OnCopy(h EventHandler) *HTMLAddress {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLAddress) OnCut(h EventHandler) *HTMLAddress {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLAddress) OnDblClick(h EventHandler) *HTMLAddress {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLAddress) OnDrag(h EventHandler) *HTMLAddress {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLAddress) OnDragEnd(h EventHandler) *HTMLAddress {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLAddress) OnDragEnter(h EventHandler) *HTMLAddress {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLAddress) OnDragLeave(h EventHandler) *HTMLAddress {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLAddress) OnDragOver(h EventHandler) *HTMLAddress {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLAddress) OnDragStart(h EventHandler) *HTMLAddress {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLAddress) OnDrop(h EventHandler) *HTMLAddress {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLAddress) OnFocus(h EventHandler) *HTMLAddress {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLAddress) OnInput(h EventHandler) *HTMLAddress {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLAddress) OnInvalid(h EventHandler) *HTMLAddress {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLAddress) OnKeyDown(h EventHandler) *HTMLAddress {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLAddress) OnKeyPress(h EventHandler) *HTMLAddress {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLAddress) OnKeyup(h EventHandler) *HTMLAddress {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLAddress) OnMouseDown(h EventHandler) *HTMLAddress {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLAddress) OnMouseMove(h EventHandler) *HTMLAddress {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLAddress) OnMouseOut(h EventHandler) *HTMLAddress {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLAddress) OnMouseOver(h EventHandler) *HTMLAddress {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLAddress) OnMouseUp(h EventHandler) *HTMLAddress {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLAddress) OnPaste(h EventHandler) *HTMLAddress {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLAddress) OnReset(h EventHandler) *HTMLAddress {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLAddress) OnScroll(h EventHandler) *HTMLAddress {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLAddress) OnSearch(h EventHandler) *HTMLAddress {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLAddress) OnSelect(h EventHandler) *HTMLAddress {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLAddress) OnSubmit(h EventHandler) *HTMLAddress {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLAddress) OnWheel(h EventHandler) *HTMLAddress {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLAddress) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLArea represents an HTML element <area>.
type HTMLArea struct {
	elem
}

// Area returns an HTML element that defines an area inside an image-map.
func Area() *HTMLArea {
	return &HTMLArea{
		elem: elem{
			tag:         "area",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLArea) AccessKey(v string) *HTMLArea {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Alt specifies an alternate text when the original element fails to display.
func (e *HTMLArea) Alt(v string) *HTMLArea {
	e.elem.setAttribute("alt", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLArea) Class(v string) *HTMLArea {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLArea) ContentEditable(v bool) *HTMLArea {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// Coords specifies the coordinates of the area.
func (e *HTMLArea) Coords(v string) *HTMLArea {
	e.elem.setAttribute("coords", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLArea) DataSet(k, v string) *HTMLArea {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLArea) Dir(v string) *HTMLArea {
	e.elem.setAttribute("dir", v)
	return e
}

// Download specifies that the target will be downloaded when a user clicks on the hyperlink.
func (e *HTMLArea) Download(v bool) *HTMLArea {
	e.elem.setAttribute("download", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLArea) Draggable(v bool) *HTMLArea {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLArea) Hidden(v bool) *HTMLArea {
	e.elem.setAttribute("hidden", v)
	return e
}

// Href specifies the URL of the page the link goes to.
func (e *HTMLArea) Href(v string) *HTMLArea {
	e.elem.setAttribute("href", v)
	return e
}

// HrefLang specifies the language of the linked document.
func (e *HTMLArea) HrefLang(v string) *HTMLArea {
	e.elem.setAttribute("hreflang", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLArea) ID(v string) *HTMLArea {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLArea) Lang(v string) *HTMLArea {
	e.elem.setAttribute("lang", v)
	return e
}

// Media specifies what media/device the linked document is optimized for.
func (e *HTMLArea) Media(v string) *HTMLArea {
	e.elem.setAttribute("media", v)
	return e
}

// Rel specifies the relationship between the current document and the linked document.
func (e *HTMLArea) Rel(v string) *HTMLArea {
	e.elem.setAttribute("rel", v)
	return e
}

// Shape specifies the shape of the area.
func (e *HTMLArea) Shape(v string) *HTMLArea {
	e.elem.setAttribute("shape", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLArea) Spellcheck(v bool) *HTMLArea {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLArea) Style(v string) *HTMLArea {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLArea) TabIndex(v int) *HTMLArea {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Target specifies the target for where to open the linked document or where to submit the form.
func (e *HTMLArea) Target(v string) *HTMLArea {
	e.elem.setAttribute("target", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLArea) Title(v string) *HTMLArea {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLArea) Type(v string) *HTMLArea {
	e.elem.setAttribute("type", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLArea) OnBlur(h EventHandler) *HTMLArea {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLArea) OnChange(h EventHandler) *HTMLArea {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLArea) OnClick(h EventHandler) *HTMLArea {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLArea) OnContextMenu(h EventHandler) *HTMLArea {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLArea) OnCopy(h EventHandler) *HTMLArea {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLArea) OnCut(h EventHandler) *HTMLArea {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLArea) OnDblClick(h EventHandler) *HTMLArea {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLArea) OnDrag(h EventHandler) *HTMLArea {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLArea) OnDragEnd(h EventHandler) *HTMLArea {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLArea) OnDragEnter(h EventHandler) *HTMLArea {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLArea) OnDragLeave(h EventHandler) *HTMLArea {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLArea) OnDragOver(h EventHandler) *HTMLArea {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLArea) OnDragStart(h EventHandler) *HTMLArea {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLArea) OnDrop(h EventHandler) *HTMLArea {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLArea) OnFocus(h EventHandler) *HTMLArea {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLArea) OnInput(h EventHandler) *HTMLArea {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLArea) OnInvalid(h EventHandler) *HTMLArea {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLArea) OnKeyDown(h EventHandler) *HTMLArea {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLArea) OnKeyPress(h EventHandler) *HTMLArea {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLArea) OnKeyup(h EventHandler) *HTMLArea {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLArea) OnMouseDown(h EventHandler) *HTMLArea {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLArea) OnMouseMove(h EventHandler) *HTMLArea {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLArea) OnMouseOut(h EventHandler) *HTMLArea {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLArea) OnMouseOver(h EventHandler) *HTMLArea {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLArea) OnMouseUp(h EventHandler) *HTMLArea {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLArea) OnPaste(h EventHandler) *HTMLArea {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLArea) OnReset(h EventHandler) *HTMLArea {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLArea) OnScroll(h EventHandler) *HTMLArea {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLArea) OnSearch(h EventHandler) *HTMLArea {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLArea) OnSelect(h EventHandler) *HTMLArea {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLArea) OnSubmit(h EventHandler) *HTMLArea {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLArea) OnWheel(h EventHandler) *HTMLArea {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLArea) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLArticle represents an HTML element <article>.
type HTMLArticle struct {
	elem
}

// Article returns an HTML element that defines an article.
func Article() *HTMLArticle {
	return &HTMLArticle{
		elem: elem{
			tag:         "article",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLArticle) Body(nodes ...Node) *HTMLArticle {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLArticle) AccessKey(v string) *HTMLArticle {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLArticle) Class(v string) *HTMLArticle {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLArticle) ContentEditable(v bool) *HTMLArticle {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLArticle) DataSet(k, v string) *HTMLArticle {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLArticle) Dir(v string) *HTMLArticle {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLArticle) Draggable(v bool) *HTMLArticle {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLArticle) Hidden(v bool) *HTMLArticle {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLArticle) ID(v string) *HTMLArticle {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLArticle) Lang(v string) *HTMLArticle {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLArticle) Spellcheck(v bool) *HTMLArticle {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLArticle) Style(v string) *HTMLArticle {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLArticle) TabIndex(v int) *HTMLArticle {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLArticle) Title(v string) *HTMLArticle {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLArticle) OnBlur(h EventHandler) *HTMLArticle {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLArticle) OnChange(h EventHandler) *HTMLArticle {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLArticle) OnClick(h EventHandler) *HTMLArticle {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLArticle) OnContextMenu(h EventHandler) *HTMLArticle {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLArticle) OnCopy(h EventHandler) *HTMLArticle {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLArticle) OnCut(h EventHandler) *HTMLArticle {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLArticle) OnDblClick(h EventHandler) *HTMLArticle {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLArticle) OnDrag(h EventHandler) *HTMLArticle {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLArticle) OnDragEnd(h EventHandler) *HTMLArticle {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLArticle) OnDragEnter(h EventHandler) *HTMLArticle {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLArticle) OnDragLeave(h EventHandler) *HTMLArticle {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLArticle) OnDragOver(h EventHandler) *HTMLArticle {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLArticle) OnDragStart(h EventHandler) *HTMLArticle {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLArticle) OnDrop(h EventHandler) *HTMLArticle {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLArticle) OnFocus(h EventHandler) *HTMLArticle {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLArticle) OnInput(h EventHandler) *HTMLArticle {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLArticle) OnInvalid(h EventHandler) *HTMLArticle {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLArticle) OnKeyDown(h EventHandler) *HTMLArticle {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLArticle) OnKeyPress(h EventHandler) *HTMLArticle {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLArticle) OnKeyup(h EventHandler) *HTMLArticle {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLArticle) OnMouseDown(h EventHandler) *HTMLArticle {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLArticle) OnMouseMove(h EventHandler) *HTMLArticle {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLArticle) OnMouseOut(h EventHandler) *HTMLArticle {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLArticle) OnMouseOver(h EventHandler) *HTMLArticle {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLArticle) OnMouseUp(h EventHandler) *HTMLArticle {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLArticle) OnPaste(h EventHandler) *HTMLArticle {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLArticle) OnReset(h EventHandler) *HTMLArticle {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLArticle) OnScroll(h EventHandler) *HTMLArticle {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLArticle) OnSearch(h EventHandler) *HTMLArticle {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLArticle) OnSelect(h EventHandler) *HTMLArticle {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLArticle) OnSubmit(h EventHandler) *HTMLArticle {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLArticle) OnWheel(h EventHandler) *HTMLArticle {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLArticle) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLAside represents an HTML element <aside>.
type HTMLAside struct {
	elem
}

// Aside returns an HTML element that defines content aside from the page content.
func Aside() *HTMLAside {
	return &HTMLAside{
		elem: elem{
			tag:         "aside",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLAside) Body(nodes ...Node) *HTMLAside {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLAside) AccessKey(v string) *HTMLAside {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLAside) Class(v string) *HTMLAside {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLAside) ContentEditable(v bool) *HTMLAside {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLAside) DataSet(k, v string) *HTMLAside {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLAside) Dir(v string) *HTMLAside {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLAside) Draggable(v bool) *HTMLAside {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLAside) Hidden(v bool) *HTMLAside {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLAside) ID(v string) *HTMLAside {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLAside) Lang(v string) *HTMLAside {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLAside) Spellcheck(v bool) *HTMLAside {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLAside) Style(v string) *HTMLAside {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLAside) TabIndex(v int) *HTMLAside {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLAside) Title(v string) *HTMLAside {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLAside) OnBlur(h EventHandler) *HTMLAside {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLAside) OnChange(h EventHandler) *HTMLAside {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLAside) OnClick(h EventHandler) *HTMLAside {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLAside) OnContextMenu(h EventHandler) *HTMLAside {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLAside) OnCopy(h EventHandler) *HTMLAside {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLAside) OnCut(h EventHandler) *HTMLAside {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLAside) OnDblClick(h EventHandler) *HTMLAside {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLAside) OnDrag(h EventHandler) *HTMLAside {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLAside) OnDragEnd(h EventHandler) *HTMLAside {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLAside) OnDragEnter(h EventHandler) *HTMLAside {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLAside) OnDragLeave(h EventHandler) *HTMLAside {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLAside) OnDragOver(h EventHandler) *HTMLAside {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLAside) OnDragStart(h EventHandler) *HTMLAside {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLAside) OnDrop(h EventHandler) *HTMLAside {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLAside) OnFocus(h EventHandler) *HTMLAside {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLAside) OnInput(h EventHandler) *HTMLAside {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLAside) OnInvalid(h EventHandler) *HTMLAside {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLAside) OnKeyDown(h EventHandler) *HTMLAside {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLAside) OnKeyPress(h EventHandler) *HTMLAside {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLAside) OnKeyup(h EventHandler) *HTMLAside {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLAside) OnMouseDown(h EventHandler) *HTMLAside {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLAside) OnMouseMove(h EventHandler) *HTMLAside {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLAside) OnMouseOut(h EventHandler) *HTMLAside {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLAside) OnMouseOver(h EventHandler) *HTMLAside {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLAside) OnMouseUp(h EventHandler) *HTMLAside {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLAside) OnPaste(h EventHandler) *HTMLAside {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLAside) OnReset(h EventHandler) *HTMLAside {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLAside) OnScroll(h EventHandler) *HTMLAside {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLAside) OnSearch(h EventHandler) *HTMLAside {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLAside) OnSelect(h EventHandler) *HTMLAside {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLAside) OnSubmit(h EventHandler) *HTMLAside {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLAside) OnWheel(h EventHandler) *HTMLAside {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLAside) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLAudio represents an HTML element <audio>.
type HTMLAudio struct {
	elem
}

// Audio returns an HTML element that defines sound content.
func Audio() *HTMLAudio {
	return &HTMLAudio{
		elem: elem{
			tag:         "audio",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLAudio) Body(nodes ...Node) *HTMLAudio {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLAudio) AccessKey(v string) *HTMLAudio {
	e.elem.setAttribute("accesskey", v)
	return e
}

// AutoPlay specifies that the audio/video will start playing as soon as it is ready.
func (e *HTMLAudio) AutoPlay(v bool) *HTMLAudio {
	e.elem.setAttribute("autoplay", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLAudio) Class(v string) *HTMLAudio {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLAudio) ContentEditable(v bool) *HTMLAudio {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// Controls specifies that audio/video controls should be displayed (such as a play/pause button etc).
func (e *HTMLAudio) Controls(v bool) *HTMLAudio {
	e.elem.setAttribute("controls", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLAudio) DataSet(k, v string) *HTMLAudio {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLAudio) Dir(v string) *HTMLAudio {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLAudio) Draggable(v bool) *HTMLAudio {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLAudio) Hidden(v bool) *HTMLAudio {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLAudio) ID(v string) *HTMLAudio {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLAudio) Lang(v string) *HTMLAudio {
	e.elem.setAttribute("lang", v)
	return e
}

// Loop specifies that the audio/video will start over again, every time it is finished.
func (e *HTMLAudio) Loop(v bool) *HTMLAudio {
	e.elem.setAttribute("loop", v)
	return e
}

// Muted specifies that the audio output of the video should be muted.
func (e *HTMLAudio) Muted(v bool) *HTMLAudio {
	e.elem.setAttribute("muted", v)
	return e
}

// Preload specifies if and how the author thinks the audio/video should be loaded when the page loads.
func (e *HTMLAudio) Preload(v string) *HTMLAudio {
	e.elem.setAttribute("preload", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLAudio) Spellcheck(v bool) *HTMLAudio {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLAudio) Src(v string) *HTMLAudio {
	e.elem.setAttribute("src", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLAudio) Style(v string) *HTMLAudio {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLAudio) TabIndex(v int) *HTMLAudio {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLAudio) Title(v string) *HTMLAudio {
	e.elem.setAttribute("title", v)
	return e
}

// OnAbort calls the given handler on abort.
func (e *HTMLAudio) OnAbort(h EventHandler) *HTMLAudio {
	e.setEventHandler("abort", h)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLAudio) OnBlur(h EventHandler) *HTMLAudio {
	e.setEventHandler("blur", h)
	return e
}

// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
func (e *HTMLAudio) OnCanPlay(h EventHandler) *HTMLAudio {
	e.setEventHandler("canplay", h)
	return e
}

// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
func (e *HTMLAudio) OnCanPlayThrough(h EventHandler) *HTMLAudio {
	e.setEventHandler("canplaythrough", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLAudio) OnChange(h EventHandler) *HTMLAudio {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLAudio) OnClick(h EventHandler) *HTMLAudio {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLAudio) OnContextMenu(h EventHandler) *HTMLAudio {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLAudio) OnCopy(h EventHandler) *HTMLAudio {
	e.setEventHandler("copy", h)
	return e
}

// OnCueChange calls the given handler when the cue changes in a track element.
func (e *HTMLAudio) OnCueChange(h EventHandler) *HTMLAudio {
	e.setEventHandler("cuechange", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLAudio) OnCut(h EventHandler) *HTMLAudio {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLAudio) OnDblClick(h EventHandler) *HTMLAudio {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLAudio) OnDrag(h EventHandler) *HTMLAudio {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLAudio) OnDragEnd(h EventHandler) *HTMLAudio {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLAudio) OnDragEnter(h EventHandler) *HTMLAudio {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLAudio) OnDragLeave(h EventHandler) *HTMLAudio {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLAudio) OnDragOver(h EventHandler) *HTMLAudio {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLAudio) OnDragStart(h EventHandler) *HTMLAudio {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLAudio) OnDrop(h EventHandler) *HTMLAudio {
	e.setEventHandler("drop", h)
	return e
}

// OnDurationChange calls the given handler when the length of the media changes.
func (e *HTMLAudio) OnDurationChange(h EventHandler) *HTMLAudio {
	e.setEventHandler("durationchange", h)
	return e
}

// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
func (e *HTMLAudio) OnEmptied(h EventHandler) *HTMLAudio {
	e.setEventHandler("emptied", h)
	return e
}

// OnEnded calls the given handler when the media has reach the end.
func (e *HTMLAudio) OnEnded(h EventHandler) *HTMLAudio {
	e.setEventHandler("ended", h)
	return e
}

// OnError calls the given handler when an error occurs.
func (e *HTMLAudio) OnError(h EventHandler) *HTMLAudio {
	e.setEventHandler("error", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLAudio) OnFocus(h EventHandler) *HTMLAudio {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLAudio) OnInput(h EventHandler) *HTMLAudio {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLAudio) OnInvalid(h EventHandler) *HTMLAudio {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLAudio) OnKeyDown(h EventHandler) *HTMLAudio {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLAudio) OnKeyPress(h EventHandler) *HTMLAudio {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLAudio) OnKeyup(h EventHandler) *HTMLAudio {
	e.setEventHandler("keyup", h)
	return e
}

// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
func (e *HTMLAudio) OnLoadStart(h EventHandler) *HTMLAudio {
	e.setEventHandler("loadstart", h)
	return e
}

// OnLoadedData calls the given handler when media data is loaded.
func (e *HTMLAudio) OnLoadedData(h EventHandler) *HTMLAudio {
	e.setEventHandler("loadeddata", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLAudio) OnMouseDown(h EventHandler) *HTMLAudio {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLAudio) OnMouseMove(h EventHandler) *HTMLAudio {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLAudio) OnMouseOut(h EventHandler) *HTMLAudio {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLAudio) OnMouseOver(h EventHandler) *HTMLAudio {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLAudio) OnMouseUp(h EventHandler) *HTMLAudio {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLAudio) OnPaste(h EventHandler) *HTMLAudio {
	e.setEventHandler("paste", h)
	return e
}

// OnPause calls the given handler when the media is paused either by the user or programmatically.
func (e *HTMLAudio) OnPause(h EventHandler) *HTMLAudio {
	e.setEventHandler("pause", h)
	return e
}

// OnPlay calls the given handler when the media is ready to start playing.
func (e *HTMLAudio) OnPlay(h EventHandler) *HTMLAudio {
	e.setEventHandler("play", h)
	return e
}

// OnPlaying calls the given handler when the media actually has started playing.
func (e *HTMLAudio) OnPlaying(h EventHandler) *HTMLAudio {
	e.setEventHandler("playing", h)
	return e
}

// OnProgress calls the given handler when the browser is in the process of getting the media data.
func (e *HTMLAudio) OnProgress(h EventHandler) *HTMLAudio {
	e.setEventHandler("progress", h)
	return e
}

// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
func (e *HTMLAudio) OnRateChange(h EventHandler) *HTMLAudio {
	e.setEventHandler("ratechange", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLAudio) OnReset(h EventHandler) *HTMLAudio {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLAudio) OnScroll(h EventHandler) *HTMLAudio {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLAudio) OnSearch(h EventHandler) *HTMLAudio {
	e.setEventHandler("search", h)
	return e
}

// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
func (e *HTMLAudio) OnSeeked(h EventHandler) *HTMLAudio {
	e.setEventHandler("seeked", h)
	return e
}

// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
func (e *HTMLAudio) OnSeeking(h EventHandler) *HTMLAudio {
	e.setEventHandler("seeking", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLAudio) OnSelect(h EventHandler) *HTMLAudio {
	e.setEventHandler("select", h)
	return e
}

// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
func (e *HTMLAudio) OnStalled(h EventHandler) *HTMLAudio {
	e.setEventHandler("stalled", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLAudio) OnSubmit(h EventHandler) *HTMLAudio {
	e.setEventHandler("submit", h)
	return e
}

// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
func (e *HTMLAudio) OnSuspend(h EventHandler) *HTMLAudio {
	e.setEventHandler("suspend", h)
	return e
}

// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
func (e *HTMLAudio) OnTimeUpdate(h EventHandler) *HTMLAudio {
	e.setEventHandler("timeupdate", h)
	return e
}

// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
func (e *HTMLAudio) OnVolumeChange(h EventHandler) *HTMLAudio {
	e.setEventHandler("volumechange", h)
	return e
}

// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
func (e *HTMLAudio) OnWaiting(h EventHandler) *HTMLAudio {
	e.setEventHandler("waiting", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLAudio) OnWheel(h EventHandler) *HTMLAudio {
	e.setEventHandler("wheel", h)
	return e
}

// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
func (e *HTMLAudio) OnloadedMetaData(h EventHandler) *HTMLAudio {
	e.setEventHandler("loadedmetadata", h)
	return e
}

func (e *HTMLAudio) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLB represents an HTML element <b>.
type HTMLB struct {
	elem
}

// B returns an HTML element that defines bold text.
func B() *HTMLB {
	return &HTMLB{
		elem: elem{
			tag:         "b",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLB) Body(nodes ...Node) *HTMLB {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLB) AccessKey(v string) *HTMLB {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLB) Class(v string) *HTMLB {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLB) ContentEditable(v bool) *HTMLB {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLB) DataSet(k, v string) *HTMLB {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLB) Dir(v string) *HTMLB {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLB) Draggable(v bool) *HTMLB {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLB) Hidden(v bool) *HTMLB {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLB) ID(v string) *HTMLB {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLB) Lang(v string) *HTMLB {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLB) Spellcheck(v bool) *HTMLB {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLB) Style(v string) *HTMLB {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLB) TabIndex(v int) *HTMLB {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLB) Title(v string) *HTMLB {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLB) OnBlur(h EventHandler) *HTMLB {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLB) OnChange(h EventHandler) *HTMLB {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLB) OnClick(h EventHandler) *HTMLB {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLB) OnContextMenu(h EventHandler) *HTMLB {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLB) OnCopy(h EventHandler) *HTMLB {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLB) OnCut(h EventHandler) *HTMLB {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLB) OnDblClick(h EventHandler) *HTMLB {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLB) OnDrag(h EventHandler) *HTMLB {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLB) OnDragEnd(h EventHandler) *HTMLB {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLB) OnDragEnter(h EventHandler) *HTMLB {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLB) OnDragLeave(h EventHandler) *HTMLB {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLB) OnDragOver(h EventHandler) *HTMLB {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLB) OnDragStart(h EventHandler) *HTMLB {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLB) OnDrop(h EventHandler) *HTMLB {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLB) OnFocus(h EventHandler) *HTMLB {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLB) OnInput(h EventHandler) *HTMLB {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLB) OnInvalid(h EventHandler) *HTMLB {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLB) OnKeyDown(h EventHandler) *HTMLB {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLB) OnKeyPress(h EventHandler) *HTMLB {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLB) OnKeyup(h EventHandler) *HTMLB {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLB) OnMouseDown(h EventHandler) *HTMLB {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLB) OnMouseMove(h EventHandler) *HTMLB {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLB) OnMouseOut(h EventHandler) *HTMLB {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLB) OnMouseOver(h EventHandler) *HTMLB {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLB) OnMouseUp(h EventHandler) *HTMLB {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLB) OnPaste(h EventHandler) *HTMLB {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLB) OnReset(h EventHandler) *HTMLB {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLB) OnScroll(h EventHandler) *HTMLB {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLB) OnSearch(h EventHandler) *HTMLB {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLB) OnSelect(h EventHandler) *HTMLB {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLB) OnSubmit(h EventHandler) *HTMLB {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLB) OnWheel(h EventHandler) *HTMLB {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLB) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLBase represents an HTML element <base>.
type HTMLBase struct {
	elem
}

// Base returns an HTML element that specifies the base URL/target for all relative URLs in a document.
func Base() *HTMLBase {
	return &HTMLBase{
		elem: elem{
			tag:         "base",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLBase) AccessKey(v string) *HTMLBase {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLBase) Class(v string) *HTMLBase {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLBase) ContentEditable(v bool) *HTMLBase {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLBase) DataSet(k, v string) *HTMLBase {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLBase) Dir(v string) *HTMLBase {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLBase) Draggable(v bool) *HTMLBase {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLBase) Hidden(v bool) *HTMLBase {
	e.elem.setAttribute("hidden", v)
	return e
}

// Href specifies the URL of the page the link goes to.
func (e *HTMLBase) Href(v string) *HTMLBase {
	e.elem.setAttribute("href", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLBase) ID(v string) *HTMLBase {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLBase) Lang(v string) *HTMLBase {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLBase) Spellcheck(v bool) *HTMLBase {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLBase) Style(v string) *HTMLBase {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLBase) TabIndex(v int) *HTMLBase {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Target specifies the target for where to open the linked document or where to submit the form.
func (e *HTMLBase) Target(v string) *HTMLBase {
	e.elem.setAttribute("target", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLBase) Title(v string) *HTMLBase {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLBase) OnBlur(h EventHandler) *HTMLBase {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLBase) OnChange(h EventHandler) *HTMLBase {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLBase) OnClick(h EventHandler) *HTMLBase {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLBase) OnContextMenu(h EventHandler) *HTMLBase {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLBase) OnCopy(h EventHandler) *HTMLBase {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLBase) OnCut(h EventHandler) *HTMLBase {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLBase) OnDblClick(h EventHandler) *HTMLBase {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLBase) OnDrag(h EventHandler) *HTMLBase {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLBase) OnDragEnd(h EventHandler) *HTMLBase {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLBase) OnDragEnter(h EventHandler) *HTMLBase {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLBase) OnDragLeave(h EventHandler) *HTMLBase {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLBase) OnDragOver(h EventHandler) *HTMLBase {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLBase) OnDragStart(h EventHandler) *HTMLBase {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLBase) OnDrop(h EventHandler) *HTMLBase {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLBase) OnFocus(h EventHandler) *HTMLBase {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLBase) OnInput(h EventHandler) *HTMLBase {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLBase) OnInvalid(h EventHandler) *HTMLBase {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLBase) OnKeyDown(h EventHandler) *HTMLBase {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLBase) OnKeyPress(h EventHandler) *HTMLBase {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLBase) OnKeyup(h EventHandler) *HTMLBase {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLBase) OnMouseDown(h EventHandler) *HTMLBase {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLBase) OnMouseMove(h EventHandler) *HTMLBase {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLBase) OnMouseOut(h EventHandler) *HTMLBase {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLBase) OnMouseOver(h EventHandler) *HTMLBase {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLBase) OnMouseUp(h EventHandler) *HTMLBase {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLBase) OnPaste(h EventHandler) *HTMLBase {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLBase) OnReset(h EventHandler) *HTMLBase {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLBase) OnScroll(h EventHandler) *HTMLBase {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLBase) OnSearch(h EventHandler) *HTMLBase {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLBase) OnSelect(h EventHandler) *HTMLBase {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLBase) OnSubmit(h EventHandler) *HTMLBase {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLBase) OnWheel(h EventHandler) *HTMLBase {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLBase) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLBdi represents an HTML element <bdi>.
type HTMLBdi struct {
	elem
}

// Bdi returns an HTML element that isolates a part of text that might be formatted in a different direction from other text outside it.
func Bdi() *HTMLBdi {
	return &HTMLBdi{
		elem: elem{
			tag:         "bdi",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLBdi) Body(nodes ...Node) *HTMLBdi {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLBdi) AccessKey(v string) *HTMLBdi {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLBdi) Class(v string) *HTMLBdi {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLBdi) ContentEditable(v bool) *HTMLBdi {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLBdi) DataSet(k, v string) *HTMLBdi {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLBdi) Dir(v string) *HTMLBdi {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLBdi) Draggable(v bool) *HTMLBdi {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLBdi) Hidden(v bool) *HTMLBdi {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLBdi) ID(v string) *HTMLBdi {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLBdi) Lang(v string) *HTMLBdi {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLBdi) Spellcheck(v bool) *HTMLBdi {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLBdi) Style(v string) *HTMLBdi {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLBdi) TabIndex(v int) *HTMLBdi {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLBdi) Title(v string) *HTMLBdi {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLBdi) OnBlur(h EventHandler) *HTMLBdi {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLBdi) OnChange(h EventHandler) *HTMLBdi {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLBdi) OnClick(h EventHandler) *HTMLBdi {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLBdi) OnContextMenu(h EventHandler) *HTMLBdi {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLBdi) OnCopy(h EventHandler) *HTMLBdi {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLBdi) OnCut(h EventHandler) *HTMLBdi {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLBdi) OnDblClick(h EventHandler) *HTMLBdi {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLBdi) OnDrag(h EventHandler) *HTMLBdi {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLBdi) OnDragEnd(h EventHandler) *HTMLBdi {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLBdi) OnDragEnter(h EventHandler) *HTMLBdi {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLBdi) OnDragLeave(h EventHandler) *HTMLBdi {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLBdi) OnDragOver(h EventHandler) *HTMLBdi {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLBdi) OnDragStart(h EventHandler) *HTMLBdi {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLBdi) OnDrop(h EventHandler) *HTMLBdi {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLBdi) OnFocus(h EventHandler) *HTMLBdi {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLBdi) OnInput(h EventHandler) *HTMLBdi {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLBdi) OnInvalid(h EventHandler) *HTMLBdi {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLBdi) OnKeyDown(h EventHandler) *HTMLBdi {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLBdi) OnKeyPress(h EventHandler) *HTMLBdi {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLBdi) OnKeyup(h EventHandler) *HTMLBdi {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLBdi) OnMouseDown(h EventHandler) *HTMLBdi {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLBdi) OnMouseMove(h EventHandler) *HTMLBdi {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLBdi) OnMouseOut(h EventHandler) *HTMLBdi {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLBdi) OnMouseOver(h EventHandler) *HTMLBdi {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLBdi) OnMouseUp(h EventHandler) *HTMLBdi {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLBdi) OnPaste(h EventHandler) *HTMLBdi {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLBdi) OnReset(h EventHandler) *HTMLBdi {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLBdi) OnScroll(h EventHandler) *HTMLBdi {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLBdi) OnSearch(h EventHandler) *HTMLBdi {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLBdi) OnSelect(h EventHandler) *HTMLBdi {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLBdi) OnSubmit(h EventHandler) *HTMLBdi {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLBdi) OnWheel(h EventHandler) *HTMLBdi {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLBdi) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLBdo represents an HTML element <bdo>.
type HTMLBdo struct {
	elem
}

// Bdo returns an HTML element that overrides the current text direction.
func Bdo() *HTMLBdo {
	return &HTMLBdo{
		elem: elem{
			tag:         "bdo",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLBdo) Body(nodes ...Node) *HTMLBdo {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLBdo) AccessKey(v string) *HTMLBdo {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLBdo) Class(v string) *HTMLBdo {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLBdo) ContentEditable(v bool) *HTMLBdo {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLBdo) DataSet(k, v string) *HTMLBdo {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLBdo) Dir(v string) *HTMLBdo {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLBdo) Draggable(v bool) *HTMLBdo {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLBdo) Hidden(v bool) *HTMLBdo {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLBdo) ID(v string) *HTMLBdo {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLBdo) Lang(v string) *HTMLBdo {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLBdo) Spellcheck(v bool) *HTMLBdo {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLBdo) Style(v string) *HTMLBdo {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLBdo) TabIndex(v int) *HTMLBdo {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLBdo) Title(v string) *HTMLBdo {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLBdo) OnBlur(h EventHandler) *HTMLBdo {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLBdo) OnChange(h EventHandler) *HTMLBdo {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLBdo) OnClick(h EventHandler) *HTMLBdo {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLBdo) OnContextMenu(h EventHandler) *HTMLBdo {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLBdo) OnCopy(h EventHandler) *HTMLBdo {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLBdo) OnCut(h EventHandler) *HTMLBdo {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLBdo) OnDblClick(h EventHandler) *HTMLBdo {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLBdo) OnDrag(h EventHandler) *HTMLBdo {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLBdo) OnDragEnd(h EventHandler) *HTMLBdo {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLBdo) OnDragEnter(h EventHandler) *HTMLBdo {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLBdo) OnDragLeave(h EventHandler) *HTMLBdo {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLBdo) OnDragOver(h EventHandler) *HTMLBdo {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLBdo) OnDragStart(h EventHandler) *HTMLBdo {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLBdo) OnDrop(h EventHandler) *HTMLBdo {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLBdo) OnFocus(h EventHandler) *HTMLBdo {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLBdo) OnInput(h EventHandler) *HTMLBdo {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLBdo) OnInvalid(h EventHandler) *HTMLBdo {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLBdo) OnKeyDown(h EventHandler) *HTMLBdo {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLBdo) OnKeyPress(h EventHandler) *HTMLBdo {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLBdo) OnKeyup(h EventHandler) *HTMLBdo {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLBdo) OnMouseDown(h EventHandler) *HTMLBdo {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLBdo) OnMouseMove(h EventHandler) *HTMLBdo {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLBdo) OnMouseOut(h EventHandler) *HTMLBdo {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLBdo) OnMouseOver(h EventHandler) *HTMLBdo {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLBdo) OnMouseUp(h EventHandler) *HTMLBdo {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLBdo) OnPaste(h EventHandler) *HTMLBdo {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLBdo) OnReset(h EventHandler) *HTMLBdo {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLBdo) OnScroll(h EventHandler) *HTMLBdo {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLBdo) OnSearch(h EventHandler) *HTMLBdo {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLBdo) OnSelect(h EventHandler) *HTMLBdo {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLBdo) OnSubmit(h EventHandler) *HTMLBdo {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLBdo) OnWheel(h EventHandler) *HTMLBdo {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLBdo) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLBlockquote represents an HTML element <blockquote>.
type HTMLBlockquote struct {
	elem
}

// Blockquote returns an HTML element that defines a section that is quoted from another source.
func Blockquote() *HTMLBlockquote {
	return &HTMLBlockquote{
		elem: elem{
			tag:         "blockquote",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLBlockquote) Body(nodes ...Node) *HTMLBlockquote {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLBlockquote) AccessKey(v string) *HTMLBlockquote {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Cite specifies a URL which explains the quote/deleted/inserted text.
func (e *HTMLBlockquote) Cite(v string) *HTMLBlockquote {
	e.elem.setAttribute("cite", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLBlockquote) Class(v string) *HTMLBlockquote {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLBlockquote) ContentEditable(v bool) *HTMLBlockquote {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLBlockquote) DataSet(k, v string) *HTMLBlockquote {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLBlockquote) Dir(v string) *HTMLBlockquote {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLBlockquote) Draggable(v bool) *HTMLBlockquote {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLBlockquote) Hidden(v bool) *HTMLBlockquote {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLBlockquote) ID(v string) *HTMLBlockquote {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLBlockquote) Lang(v string) *HTMLBlockquote {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLBlockquote) Spellcheck(v bool) *HTMLBlockquote {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLBlockquote) Style(v string) *HTMLBlockquote {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLBlockquote) TabIndex(v int) *HTMLBlockquote {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLBlockquote) Title(v string) *HTMLBlockquote {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLBlockquote) OnBlur(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLBlockquote) OnChange(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLBlockquote) OnClick(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLBlockquote) OnContextMenu(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLBlockquote) OnCopy(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLBlockquote) OnCut(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLBlockquote) OnDblClick(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLBlockquote) OnDrag(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLBlockquote) OnDragEnd(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLBlockquote) OnDragEnter(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLBlockquote) OnDragLeave(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLBlockquote) OnDragOver(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLBlockquote) OnDragStart(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLBlockquote) OnDrop(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLBlockquote) OnFocus(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLBlockquote) OnInput(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLBlockquote) OnInvalid(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLBlockquote) OnKeyDown(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLBlockquote) OnKeyPress(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLBlockquote) OnKeyup(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLBlockquote) OnMouseDown(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLBlockquote) OnMouseMove(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLBlockquote) OnMouseOut(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLBlockquote) OnMouseOver(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLBlockquote) OnMouseUp(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLBlockquote) OnPaste(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLBlockquote) OnReset(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLBlockquote) OnScroll(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLBlockquote) OnSearch(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLBlockquote) OnSelect(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLBlockquote) OnSubmit(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLBlockquote) OnWheel(h EventHandler) *HTMLBlockquote {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLBlockquote) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLBody represents an HTML element <body>.
type HTMLBody struct {
	elem
}

// Body returns an HTML element that defines the document's body.
func Body() *HTMLBody {
	return &HTMLBody{
		elem: elem{
			tag:         "body",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLBody) Body(nodes ...Node) *HTMLBody {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLBody) AccessKey(v string) *HTMLBody {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLBody) Class(v string) *HTMLBody {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLBody) ContentEditable(v bool) *HTMLBody {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLBody) DataSet(k, v string) *HTMLBody {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLBody) Dir(v string) *HTMLBody {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLBody) Draggable(v bool) *HTMLBody {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLBody) Hidden(v bool) *HTMLBody {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLBody) ID(v string) *HTMLBody {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLBody) Lang(v string) *HTMLBody {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLBody) Spellcheck(v bool) *HTMLBody {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLBody) Style(v string) *HTMLBody {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLBody) TabIndex(v int) *HTMLBody {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLBody) Title(v string) *HTMLBody {
	e.elem.setAttribute("title", v)
	return e
}

// OnAfterPrint runs the given handler after the document is printed.
func (e *HTMLBody) OnAfterPrint(h EventHandler) *HTMLBody {
	e.setEventHandler("afterprint", h)
	return e
}

// OnBeforePrint calls the given handler before the document is printed.
func (e *HTMLBody) OnBeforePrint(h EventHandler) *HTMLBody {
	e.setEventHandler("beforeprint", h)
	return e
}

// OnBeforeUnload calls the given handler when the document is about to be unloaded.
func (e *HTMLBody) OnBeforeUnload(h EventHandler) *HTMLBody {
	e.setEventHandler("beforeunload", h)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLBody) OnBlur(h EventHandler) *HTMLBody {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLBody) OnChange(h EventHandler) *HTMLBody {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLBody) OnClick(h EventHandler) *HTMLBody {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLBody) OnContextMenu(h EventHandler) *HTMLBody {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLBody) OnCopy(h EventHandler) *HTMLBody {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLBody) OnCut(h EventHandler) *HTMLBody {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLBody) OnDblClick(h EventHandler) *HTMLBody {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLBody) OnDrag(h EventHandler) *HTMLBody {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLBody) OnDragEnd(h EventHandler) *HTMLBody {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLBody) OnDragEnter(h EventHandler) *HTMLBody {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLBody) OnDragLeave(h EventHandler) *HTMLBody {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLBody) OnDragOver(h EventHandler) *HTMLBody {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLBody) OnDragStart(h EventHandler) *HTMLBody {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLBody) OnDrop(h EventHandler) *HTMLBody {
	e.setEventHandler("drop", h)
	return e
}

// OnError calls the given handler when an error occurs.
func (e *HTMLBody) OnError(h EventHandler) *HTMLBody {
	e.setEventHandler("error", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLBody) OnFocus(h EventHandler) *HTMLBody {
	e.setEventHandler("focus", h)
	return e
}

// OnHashChange calls the given handler when there has been changes to the anchor part of the a URL.
func (e *HTMLBody) OnHashChange(h EventHandler) *HTMLBody {
	e.setEventHandler("hashchange", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLBody) OnInput(h EventHandler) *HTMLBody {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLBody) OnInvalid(h EventHandler) *HTMLBody {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLBody) OnKeyDown(h EventHandler) *HTMLBody {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLBody) OnKeyPress(h EventHandler) *HTMLBody {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLBody) OnKeyup(h EventHandler) *HTMLBody {
	e.setEventHandler("keyup", h)
	return e
}

// OnLoad calls the given handler after the page is finished loading.
func (e *HTMLBody) OnLoad(h EventHandler) *HTMLBody {
	e.setEventHandler("load", h)
	return e
}

// OnMessage calls then given handler when a message is triggered.
func (e *HTMLBody) OnMessage(h EventHandler) *HTMLBody {
	e.setEventHandler("message", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLBody) OnMouseDown(h EventHandler) *HTMLBody {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLBody) OnMouseMove(h EventHandler) *HTMLBody {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLBody) OnMouseOut(h EventHandler) *HTMLBody {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLBody) OnMouseOver(h EventHandler) *HTMLBody {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLBody) OnMouseUp(h EventHandler) *HTMLBody {
	e.setEventHandler("mouseup", h)
	return e
}

// OnOffline calls the given handler when the browser starts to work offline.
func (e *HTMLBody) OnOffline(h EventHandler) *HTMLBody {
	e.setEventHandler("offline", h)
	return e
}

// OnOnline calls the given handler when the browser starts to work online.
func (e *HTMLBody) OnOnline(h EventHandler) *HTMLBody {
	e.setEventHandler("online", h)
	return e
}

// OnPageHide calls the given handler when a user navigates away from a page.
func (e *HTMLBody) OnPageHide(h EventHandler) *HTMLBody {
	e.setEventHandler("pagehide", h)
	return e
}

// OnPageShow calls the given handler when a user navigates to a page.
func (e *HTMLBody) OnPageShow(h EventHandler) *HTMLBody {
	e.setEventHandler("pageshow", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLBody) OnPaste(h EventHandler) *HTMLBody {
	e.setEventHandler("paste", h)
	return e
}

// OnPopState calls the given handler when the window's history changes.
func (e *HTMLBody) OnPopState(h EventHandler) *HTMLBody {
	e.setEventHandler("popstate", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLBody) OnReset(h EventHandler) *HTMLBody {
	e.setEventHandler("reset", h)
	return e
}

// OnResize calls the given handler when the browser window is resized.
func (e *HTMLBody) OnResize(h EventHandler) *HTMLBody {
	e.setEventHandler("resize", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLBody) OnScroll(h EventHandler) *HTMLBody {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLBody) OnSearch(h EventHandler) *HTMLBody {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLBody) OnSelect(h EventHandler) *HTMLBody {
	e.setEventHandler("select", h)
	return e
}

// OnStorage calls the given handler when a Web Storage area is updated.
func (e *HTMLBody) OnStorage(h EventHandler) *HTMLBody {
	e.setEventHandler("storage", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLBody) OnSubmit(h EventHandler) *HTMLBody {
	e.setEventHandler("submit", h)
	return e
}

// OnUnload calls the given handler once a page has unloaded (or the browser window has been closed).
func (e *HTMLBody) OnUnload(h EventHandler) *HTMLBody {
	e.setEventHandler("unload", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLBody) OnWheel(h EventHandler) *HTMLBody {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLBody) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLBr represents an HTML element <br>.
type HTMLBr struct {
	elem
}

// Br returns an HTML element that defines a single line break.
func Br() *HTMLBr {
	return &HTMLBr{
		elem: elem{
			tag:         "br",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLBr) AccessKey(v string) *HTMLBr {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLBr) Class(v string) *HTMLBr {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLBr) ContentEditable(v bool) *HTMLBr {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLBr) DataSet(k, v string) *HTMLBr {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLBr) Dir(v string) *HTMLBr {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLBr) Draggable(v bool) *HTMLBr {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLBr) Hidden(v bool) *HTMLBr {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLBr) ID(v string) *HTMLBr {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLBr) Lang(v string) *HTMLBr {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLBr) Spellcheck(v bool) *HTMLBr {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLBr) Style(v string) *HTMLBr {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLBr) TabIndex(v int) *HTMLBr {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLBr) Title(v string) *HTMLBr {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLBr) OnBlur(h EventHandler) *HTMLBr {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLBr) OnChange(h EventHandler) *HTMLBr {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLBr) OnClick(h EventHandler) *HTMLBr {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLBr) OnContextMenu(h EventHandler) *HTMLBr {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLBr) OnCopy(h EventHandler) *HTMLBr {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLBr) OnCut(h EventHandler) *HTMLBr {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLBr) OnDblClick(h EventHandler) *HTMLBr {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLBr) OnDrag(h EventHandler) *HTMLBr {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLBr) OnDragEnd(h EventHandler) *HTMLBr {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLBr) OnDragEnter(h EventHandler) *HTMLBr {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLBr) OnDragLeave(h EventHandler) *HTMLBr {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLBr) OnDragOver(h EventHandler) *HTMLBr {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLBr) OnDragStart(h EventHandler) *HTMLBr {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLBr) OnDrop(h EventHandler) *HTMLBr {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLBr) OnFocus(h EventHandler) *HTMLBr {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLBr) OnInput(h EventHandler) *HTMLBr {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLBr) OnInvalid(h EventHandler) *HTMLBr {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLBr) OnKeyDown(h EventHandler) *HTMLBr {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLBr) OnKeyPress(h EventHandler) *HTMLBr {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLBr) OnKeyup(h EventHandler) *HTMLBr {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLBr) OnMouseDown(h EventHandler) *HTMLBr {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLBr) OnMouseMove(h EventHandler) *HTMLBr {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLBr) OnMouseOut(h EventHandler) *HTMLBr {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLBr) OnMouseOver(h EventHandler) *HTMLBr {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLBr) OnMouseUp(h EventHandler) *HTMLBr {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLBr) OnPaste(h EventHandler) *HTMLBr {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLBr) OnReset(h EventHandler) *HTMLBr {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLBr) OnScroll(h EventHandler) *HTMLBr {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLBr) OnSearch(h EventHandler) *HTMLBr {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLBr) OnSelect(h EventHandler) *HTMLBr {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLBr) OnSubmit(h EventHandler) *HTMLBr {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLBr) OnWheel(h EventHandler) *HTMLBr {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLBr) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLButton represents an HTML element <button>.
type HTMLButton struct {
	elem
}

// Button returns an HTML element that defines a clickable button.
func Button() *HTMLButton {
	return &HTMLButton{
		elem: elem{
			tag:         "button",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLButton) Body(nodes ...Node) *HTMLButton {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLButton) AccessKey(v string) *HTMLButton {
	e.elem.setAttribute("accesskey", v)
	return e
}

// AutoFocus specifies that the element should automatically get focus when the page loads.
func (e *HTMLButton) AutoFocus(v bool) *HTMLButton {
	e.elem.setAttribute("autofocus", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLButton) Class(v string) *HTMLButton {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLButton) ContentEditable(v bool) *HTMLButton {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLButton) DataSet(k, v string) *HTMLButton {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLButton) Dir(v string) *HTMLButton {
	e.elem.setAttribute("dir", v)
	return e
}

// Disabled specifies that the specified element/group of elements should be disabled.
func (e *HTMLButton) Disabled(v bool) *HTMLButton {
	e.elem.setAttribute("disabled", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLButton) Draggable(v bool) *HTMLButton {
	e.elem.setAttribute("draggable", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLButton) Form(v string) *HTMLButton {
	e.elem.setAttribute("form", v)
	return e
}

// FormAction specifies where to send the form-data when a form is submitted. Only for submit type.
func (e *HTMLButton) FormAction(v string) *HTMLButton {
	e.elem.setAttribute("formaction", v)
	return e
}

// FormEncType specifies how form-data should be encoded before sending it to a server. Only for submit type.
func (e *HTMLButton) FormEncType(v string) *HTMLButton {
	e.elem.setAttribute("formenctype", v)
	return e
}

// FormMethod specifies how to send the form-data (which HTTP method to use). Only for submit type.
func (e *HTMLButton) FormMethod(v string) *HTMLButton {
	e.elem.setAttribute("formmethod", v)
	return e
}

// FormNoValidate specifies that the form-data should not be validated on submission. Only for submit type.
func (e *HTMLButton) FormNoValidate(v bool) *HTMLButton {
	e.elem.setAttribute("formnovalidate", v)
	return e
}

// FormTarget specifies where to display the response after submitting the form. Only for submit type.
func (e *HTMLButton) FormTarget(v string) *HTMLButton {
	e.elem.setAttribute("formtarget", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLButton) Hidden(v bool) *HTMLButton {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLButton) ID(v string) *HTMLButton {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLButton) Lang(v string) *HTMLButton {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLButton) Name(v string) *HTMLButton {
	e.elem.setAttribute("name", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLButton) Spellcheck(v bool) *HTMLButton {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLButton) Style(v string) *HTMLButton {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLButton) TabIndex(v int) *HTMLButton {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLButton) Title(v string) *HTMLButton {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLButton) Type(v string) *HTMLButton {
	e.elem.setAttribute("type", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLButton) Value(v interface{}) *HTMLButton {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLButton) OnBlur(h EventHandler) *HTMLButton {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLButton) OnChange(h EventHandler) *HTMLButton {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLButton) OnClick(h EventHandler) *HTMLButton {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLButton) OnContextMenu(h EventHandler) *HTMLButton {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLButton) OnCopy(h EventHandler) *HTMLButton {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLButton) OnCut(h EventHandler) *HTMLButton {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLButton) OnDblClick(h EventHandler) *HTMLButton {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLButton) OnDrag(h EventHandler) *HTMLButton {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLButton) OnDragEnd(h EventHandler) *HTMLButton {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLButton) OnDragEnter(h EventHandler) *HTMLButton {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLButton) OnDragLeave(h EventHandler) *HTMLButton {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLButton) OnDragOver(h EventHandler) *HTMLButton {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLButton) OnDragStart(h EventHandler) *HTMLButton {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLButton) OnDrop(h EventHandler) *HTMLButton {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLButton) OnFocus(h EventHandler) *HTMLButton {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLButton) OnInput(h EventHandler) *HTMLButton {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLButton) OnInvalid(h EventHandler) *HTMLButton {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLButton) OnKeyDown(h EventHandler) *HTMLButton {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLButton) OnKeyPress(h EventHandler) *HTMLButton {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLButton) OnKeyup(h EventHandler) *HTMLButton {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLButton) OnMouseDown(h EventHandler) *HTMLButton {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLButton) OnMouseMove(h EventHandler) *HTMLButton {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLButton) OnMouseOut(h EventHandler) *HTMLButton {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLButton) OnMouseOver(h EventHandler) *HTMLButton {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLButton) OnMouseUp(h EventHandler) *HTMLButton {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLButton) OnPaste(h EventHandler) *HTMLButton {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLButton) OnReset(h EventHandler) *HTMLButton {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLButton) OnScroll(h EventHandler) *HTMLButton {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLButton) OnSearch(h EventHandler) *HTMLButton {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLButton) OnSelect(h EventHandler) *HTMLButton {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLButton) OnSubmit(h EventHandler) *HTMLButton {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLButton) OnWheel(h EventHandler) *HTMLButton {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLButton) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLCanvas represents an HTML element <canvas>.
type HTMLCanvas struct {
	elem
}

// Canvas returns an HTML element that is used to draw graphics on the fly.
func Canvas() *HTMLCanvas {
	return &HTMLCanvas{
		elem: elem{
			tag:         "canvas",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLCanvas) Body(nodes ...Node) *HTMLCanvas {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLCanvas) AccessKey(v string) *HTMLCanvas {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLCanvas) Class(v string) *HTMLCanvas {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLCanvas) ContentEditable(v bool) *HTMLCanvas {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLCanvas) DataSet(k, v string) *HTMLCanvas {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLCanvas) Dir(v string) *HTMLCanvas {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLCanvas) Draggable(v bool) *HTMLCanvas {
	e.elem.setAttribute("draggable", v)
	return e
}

// Height specifies the height of the element (in pixels).
func (e *HTMLCanvas) Height(v int) *HTMLCanvas {
	e.elem.setAttribute("height", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLCanvas) Hidden(v bool) *HTMLCanvas {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLCanvas) ID(v string) *HTMLCanvas {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLCanvas) Lang(v string) *HTMLCanvas {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLCanvas) Spellcheck(v bool) *HTMLCanvas {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLCanvas) Style(v string) *HTMLCanvas {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLCanvas) TabIndex(v int) *HTMLCanvas {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLCanvas) Title(v string) *HTMLCanvas {
	e.elem.setAttribute("title", v)
	return e
}

// Width specifies the width of the element.
func (e *HTMLCanvas) Width(v int) *HTMLCanvas {
	e.elem.setAttribute("width", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLCanvas) OnBlur(h EventHandler) *HTMLCanvas {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLCanvas) OnChange(h EventHandler) *HTMLCanvas {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLCanvas) OnClick(h EventHandler) *HTMLCanvas {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLCanvas) OnContextMenu(h EventHandler) *HTMLCanvas {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLCanvas) OnCopy(h EventHandler) *HTMLCanvas {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLCanvas) OnCut(h EventHandler) *HTMLCanvas {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLCanvas) OnDblClick(h EventHandler) *HTMLCanvas {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLCanvas) OnDrag(h EventHandler) *HTMLCanvas {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLCanvas) OnDragEnd(h EventHandler) *HTMLCanvas {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLCanvas) OnDragEnter(h EventHandler) *HTMLCanvas {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLCanvas) OnDragLeave(h EventHandler) *HTMLCanvas {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLCanvas) OnDragOver(h EventHandler) *HTMLCanvas {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLCanvas) OnDragStart(h EventHandler) *HTMLCanvas {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLCanvas) OnDrop(h EventHandler) *HTMLCanvas {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLCanvas) OnFocus(h EventHandler) *HTMLCanvas {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLCanvas) OnInput(h EventHandler) *HTMLCanvas {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLCanvas) OnInvalid(h EventHandler) *HTMLCanvas {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLCanvas) OnKeyDown(h EventHandler) *HTMLCanvas {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLCanvas) OnKeyPress(h EventHandler) *HTMLCanvas {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLCanvas) OnKeyup(h EventHandler) *HTMLCanvas {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLCanvas) OnMouseDown(h EventHandler) *HTMLCanvas {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLCanvas) OnMouseMove(h EventHandler) *HTMLCanvas {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLCanvas) OnMouseOut(h EventHandler) *HTMLCanvas {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLCanvas) OnMouseOver(h EventHandler) *HTMLCanvas {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLCanvas) OnMouseUp(h EventHandler) *HTMLCanvas {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLCanvas) OnPaste(h EventHandler) *HTMLCanvas {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLCanvas) OnReset(h EventHandler) *HTMLCanvas {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLCanvas) OnScroll(h EventHandler) *HTMLCanvas {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLCanvas) OnSearch(h EventHandler) *HTMLCanvas {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLCanvas) OnSelect(h EventHandler) *HTMLCanvas {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLCanvas) OnSubmit(h EventHandler) *HTMLCanvas {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLCanvas) OnWheel(h EventHandler) *HTMLCanvas {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLCanvas) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLCaption represents an HTML element <caption>.
type HTMLCaption struct {
	elem
}

// Caption returns an HTML element that defines a table caption.
func Caption() *HTMLCaption {
	return &HTMLCaption{
		elem: elem{
			tag:         "caption",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLCaption) Body(nodes ...Node) *HTMLCaption {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLCaption) AccessKey(v string) *HTMLCaption {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLCaption) Class(v string) *HTMLCaption {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLCaption) ContentEditable(v bool) *HTMLCaption {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLCaption) DataSet(k, v string) *HTMLCaption {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLCaption) Dir(v string) *HTMLCaption {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLCaption) Draggable(v bool) *HTMLCaption {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLCaption) Hidden(v bool) *HTMLCaption {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLCaption) ID(v string) *HTMLCaption {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLCaption) Lang(v string) *HTMLCaption {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLCaption) Spellcheck(v bool) *HTMLCaption {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLCaption) Style(v string) *HTMLCaption {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLCaption) TabIndex(v int) *HTMLCaption {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLCaption) Title(v string) *HTMLCaption {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLCaption) OnBlur(h EventHandler) *HTMLCaption {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLCaption) OnChange(h EventHandler) *HTMLCaption {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLCaption) OnClick(h EventHandler) *HTMLCaption {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLCaption) OnContextMenu(h EventHandler) *HTMLCaption {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLCaption) OnCopy(h EventHandler) *HTMLCaption {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLCaption) OnCut(h EventHandler) *HTMLCaption {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLCaption) OnDblClick(h EventHandler) *HTMLCaption {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLCaption) OnDrag(h EventHandler) *HTMLCaption {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLCaption) OnDragEnd(h EventHandler) *HTMLCaption {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLCaption) OnDragEnter(h EventHandler) *HTMLCaption {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLCaption) OnDragLeave(h EventHandler) *HTMLCaption {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLCaption) OnDragOver(h EventHandler) *HTMLCaption {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLCaption) OnDragStart(h EventHandler) *HTMLCaption {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLCaption) OnDrop(h EventHandler) *HTMLCaption {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLCaption) OnFocus(h EventHandler) *HTMLCaption {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLCaption) OnInput(h EventHandler) *HTMLCaption {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLCaption) OnInvalid(h EventHandler) *HTMLCaption {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLCaption) OnKeyDown(h EventHandler) *HTMLCaption {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLCaption) OnKeyPress(h EventHandler) *HTMLCaption {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLCaption) OnKeyup(h EventHandler) *HTMLCaption {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLCaption) OnMouseDown(h EventHandler) *HTMLCaption {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLCaption) OnMouseMove(h EventHandler) *HTMLCaption {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLCaption) OnMouseOut(h EventHandler) *HTMLCaption {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLCaption) OnMouseOver(h EventHandler) *HTMLCaption {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLCaption) OnMouseUp(h EventHandler) *HTMLCaption {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLCaption) OnPaste(h EventHandler) *HTMLCaption {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLCaption) OnReset(h EventHandler) *HTMLCaption {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLCaption) OnScroll(h EventHandler) *HTMLCaption {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLCaption) OnSearch(h EventHandler) *HTMLCaption {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLCaption) OnSelect(h EventHandler) *HTMLCaption {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLCaption) OnSubmit(h EventHandler) *HTMLCaption {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLCaption) OnWheel(h EventHandler) *HTMLCaption {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLCaption) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLCite represents an HTML element <cite>.
type HTMLCite struct {
	elem
}

// Cite returns an HTML element that defines the title of a work.
func Cite() *HTMLCite {
	return &HTMLCite{
		elem: elem{
			tag:         "cite",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLCite) Body(nodes ...Node) *HTMLCite {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLCite) AccessKey(v string) *HTMLCite {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLCite) Class(v string) *HTMLCite {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLCite) ContentEditable(v bool) *HTMLCite {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLCite) DataSet(k, v string) *HTMLCite {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLCite) Dir(v string) *HTMLCite {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLCite) Draggable(v bool) *HTMLCite {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLCite) Hidden(v bool) *HTMLCite {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLCite) ID(v string) *HTMLCite {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLCite) Lang(v string) *HTMLCite {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLCite) Spellcheck(v bool) *HTMLCite {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLCite) Style(v string) *HTMLCite {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLCite) TabIndex(v int) *HTMLCite {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLCite) Title(v string) *HTMLCite {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLCite) OnBlur(h EventHandler) *HTMLCite {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLCite) OnChange(h EventHandler) *HTMLCite {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLCite) OnClick(h EventHandler) *HTMLCite {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLCite) OnContextMenu(h EventHandler) *HTMLCite {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLCite) OnCopy(h EventHandler) *HTMLCite {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLCite) OnCut(h EventHandler) *HTMLCite {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLCite) OnDblClick(h EventHandler) *HTMLCite {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLCite) OnDrag(h EventHandler) *HTMLCite {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLCite) OnDragEnd(h EventHandler) *HTMLCite {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLCite) OnDragEnter(h EventHandler) *HTMLCite {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLCite) OnDragLeave(h EventHandler) *HTMLCite {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLCite) OnDragOver(h EventHandler) *HTMLCite {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLCite) OnDragStart(h EventHandler) *HTMLCite {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLCite) OnDrop(h EventHandler) *HTMLCite {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLCite) OnFocus(h EventHandler) *HTMLCite {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLCite) OnInput(h EventHandler) *HTMLCite {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLCite) OnInvalid(h EventHandler) *HTMLCite {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLCite) OnKeyDown(h EventHandler) *HTMLCite {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLCite) OnKeyPress(h EventHandler) *HTMLCite {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLCite) OnKeyup(h EventHandler) *HTMLCite {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLCite) OnMouseDown(h EventHandler) *HTMLCite {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLCite) OnMouseMove(h EventHandler) *HTMLCite {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLCite) OnMouseOut(h EventHandler) *HTMLCite {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLCite) OnMouseOver(h EventHandler) *HTMLCite {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLCite) OnMouseUp(h EventHandler) *HTMLCite {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLCite) OnPaste(h EventHandler) *HTMLCite {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLCite) OnReset(h EventHandler) *HTMLCite {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLCite) OnScroll(h EventHandler) *HTMLCite {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLCite) OnSearch(h EventHandler) *HTMLCite {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLCite) OnSelect(h EventHandler) *HTMLCite {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLCite) OnSubmit(h EventHandler) *HTMLCite {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLCite) OnWheel(h EventHandler) *HTMLCite {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLCite) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLCode represents an HTML element <code>.
type HTMLCode struct {
	elem
}

// Code returns an HTML element that defines a piece of computer code.
func Code() *HTMLCode {
	return &HTMLCode{
		elem: elem{
			tag:         "code",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLCode) Body(nodes ...Node) *HTMLCode {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLCode) AccessKey(v string) *HTMLCode {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLCode) Class(v string) *HTMLCode {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLCode) ContentEditable(v bool) *HTMLCode {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLCode) DataSet(k, v string) *HTMLCode {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLCode) Dir(v string) *HTMLCode {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLCode) Draggable(v bool) *HTMLCode {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLCode) Hidden(v bool) *HTMLCode {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLCode) ID(v string) *HTMLCode {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLCode) Lang(v string) *HTMLCode {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLCode) Spellcheck(v bool) *HTMLCode {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLCode) Style(v string) *HTMLCode {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLCode) TabIndex(v int) *HTMLCode {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLCode) Title(v string) *HTMLCode {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLCode) OnBlur(h EventHandler) *HTMLCode {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLCode) OnChange(h EventHandler) *HTMLCode {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLCode) OnClick(h EventHandler) *HTMLCode {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLCode) OnContextMenu(h EventHandler) *HTMLCode {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLCode) OnCopy(h EventHandler) *HTMLCode {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLCode) OnCut(h EventHandler) *HTMLCode {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLCode) OnDblClick(h EventHandler) *HTMLCode {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLCode) OnDrag(h EventHandler) *HTMLCode {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLCode) OnDragEnd(h EventHandler) *HTMLCode {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLCode) OnDragEnter(h EventHandler) *HTMLCode {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLCode) OnDragLeave(h EventHandler) *HTMLCode {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLCode) OnDragOver(h EventHandler) *HTMLCode {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLCode) OnDragStart(h EventHandler) *HTMLCode {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLCode) OnDrop(h EventHandler) *HTMLCode {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLCode) OnFocus(h EventHandler) *HTMLCode {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLCode) OnInput(h EventHandler) *HTMLCode {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLCode) OnInvalid(h EventHandler) *HTMLCode {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLCode) OnKeyDown(h EventHandler) *HTMLCode {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLCode) OnKeyPress(h EventHandler) *HTMLCode {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLCode) OnKeyup(h EventHandler) *HTMLCode {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLCode) OnMouseDown(h EventHandler) *HTMLCode {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLCode) OnMouseMove(h EventHandler) *HTMLCode {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLCode) OnMouseOut(h EventHandler) *HTMLCode {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLCode) OnMouseOver(h EventHandler) *HTMLCode {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLCode) OnMouseUp(h EventHandler) *HTMLCode {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLCode) OnPaste(h EventHandler) *HTMLCode {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLCode) OnReset(h EventHandler) *HTMLCode {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLCode) OnScroll(h EventHandler) *HTMLCode {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLCode) OnSearch(h EventHandler) *HTMLCode {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLCode) OnSelect(h EventHandler) *HTMLCode {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLCode) OnSubmit(h EventHandler) *HTMLCode {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLCode) OnWheel(h EventHandler) *HTMLCode {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLCode) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLCol represents an HTML element <col>.
type HTMLCol struct {
	elem
}

// Col returns an HTML element that specifies column properties for each column within a colgroup element.
func Col() *HTMLCol {
	return &HTMLCol{
		elem: elem{
			tag:         "col",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLCol) AccessKey(v string) *HTMLCol {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLCol) Class(v string) *HTMLCol {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLCol) ContentEditable(v bool) *HTMLCol {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLCol) DataSet(k, v string) *HTMLCol {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLCol) Dir(v string) *HTMLCol {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLCol) Draggable(v bool) *HTMLCol {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLCol) Hidden(v bool) *HTMLCol {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLCol) ID(v string) *HTMLCol {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLCol) Lang(v string) *HTMLCol {
	e.elem.setAttribute("lang", v)
	return e
}

// Span specifies the number of columns to span.
func (e *HTMLCol) Span(v int) *HTMLCol {
	e.elem.setAttribute("span", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLCol) Spellcheck(v bool) *HTMLCol {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLCol) Style(v string) *HTMLCol {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLCol) TabIndex(v int) *HTMLCol {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLCol) Title(v string) *HTMLCol {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLCol) OnBlur(h EventHandler) *HTMLCol {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLCol) OnChange(h EventHandler) *HTMLCol {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLCol) OnClick(h EventHandler) *HTMLCol {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLCol) OnContextMenu(h EventHandler) *HTMLCol {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLCol) OnCopy(h EventHandler) *HTMLCol {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLCol) OnCut(h EventHandler) *HTMLCol {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLCol) OnDblClick(h EventHandler) *HTMLCol {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLCol) OnDrag(h EventHandler) *HTMLCol {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLCol) OnDragEnd(h EventHandler) *HTMLCol {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLCol) OnDragEnter(h EventHandler) *HTMLCol {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLCol) OnDragLeave(h EventHandler) *HTMLCol {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLCol) OnDragOver(h EventHandler) *HTMLCol {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLCol) OnDragStart(h EventHandler) *HTMLCol {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLCol) OnDrop(h EventHandler) *HTMLCol {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLCol) OnFocus(h EventHandler) *HTMLCol {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLCol) OnInput(h EventHandler) *HTMLCol {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLCol) OnInvalid(h EventHandler) *HTMLCol {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLCol) OnKeyDown(h EventHandler) *HTMLCol {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLCol) OnKeyPress(h EventHandler) *HTMLCol {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLCol) OnKeyup(h EventHandler) *HTMLCol {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLCol) OnMouseDown(h EventHandler) *HTMLCol {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLCol) OnMouseMove(h EventHandler) *HTMLCol {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLCol) OnMouseOut(h EventHandler) *HTMLCol {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLCol) OnMouseOver(h EventHandler) *HTMLCol {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLCol) OnMouseUp(h EventHandler) *HTMLCol {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLCol) OnPaste(h EventHandler) *HTMLCol {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLCol) OnReset(h EventHandler) *HTMLCol {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLCol) OnScroll(h EventHandler) *HTMLCol {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLCol) OnSearch(h EventHandler) *HTMLCol {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLCol) OnSelect(h EventHandler) *HTMLCol {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLCol) OnSubmit(h EventHandler) *HTMLCol {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLCol) OnWheel(h EventHandler) *HTMLCol {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLCol) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLColGroup represents an HTML element <colgroup>.
type HTMLColGroup struct {
	elem
}

// ColGroup returns an HTML element that specifies a group of one or more columns in a table for formatting.
func ColGroup() *HTMLColGroup {
	return &HTMLColGroup{
		elem: elem{
			tag:         "colgroup",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLColGroup) Body(nodes ...Node) *HTMLColGroup {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLColGroup) AccessKey(v string) *HTMLColGroup {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLColGroup) Class(v string) *HTMLColGroup {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLColGroup) ContentEditable(v bool) *HTMLColGroup {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLColGroup) DataSet(k, v string) *HTMLColGroup {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLColGroup) Dir(v string) *HTMLColGroup {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLColGroup) Draggable(v bool) *HTMLColGroup {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLColGroup) Hidden(v bool) *HTMLColGroup {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLColGroup) ID(v string) *HTMLColGroup {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLColGroup) Lang(v string) *HTMLColGroup {
	e.elem.setAttribute("lang", v)
	return e
}

// Span specifies the number of columns to span.
func (e *HTMLColGroup) Span(v int) *HTMLColGroup {
	e.elem.setAttribute("span", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLColGroup) Spellcheck(v bool) *HTMLColGroup {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLColGroup) Style(v string) *HTMLColGroup {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLColGroup) TabIndex(v int) *HTMLColGroup {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLColGroup) Title(v string) *HTMLColGroup {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLColGroup) OnBlur(h EventHandler) *HTMLColGroup {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLColGroup) OnChange(h EventHandler) *HTMLColGroup {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLColGroup) OnClick(h EventHandler) *HTMLColGroup {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLColGroup) OnContextMenu(h EventHandler) *HTMLColGroup {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLColGroup) OnCopy(h EventHandler) *HTMLColGroup {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLColGroup) OnCut(h EventHandler) *HTMLColGroup {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLColGroup) OnDblClick(h EventHandler) *HTMLColGroup {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLColGroup) OnDrag(h EventHandler) *HTMLColGroup {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLColGroup) OnDragEnd(h EventHandler) *HTMLColGroup {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLColGroup) OnDragEnter(h EventHandler) *HTMLColGroup {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLColGroup) OnDragLeave(h EventHandler) *HTMLColGroup {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLColGroup) OnDragOver(h EventHandler) *HTMLColGroup {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLColGroup) OnDragStart(h EventHandler) *HTMLColGroup {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLColGroup) OnDrop(h EventHandler) *HTMLColGroup {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLColGroup) OnFocus(h EventHandler) *HTMLColGroup {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLColGroup) OnInput(h EventHandler) *HTMLColGroup {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLColGroup) OnInvalid(h EventHandler) *HTMLColGroup {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLColGroup) OnKeyDown(h EventHandler) *HTMLColGroup {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLColGroup) OnKeyPress(h EventHandler) *HTMLColGroup {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLColGroup) OnKeyup(h EventHandler) *HTMLColGroup {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLColGroup) OnMouseDown(h EventHandler) *HTMLColGroup {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLColGroup) OnMouseMove(h EventHandler) *HTMLColGroup {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLColGroup) OnMouseOut(h EventHandler) *HTMLColGroup {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLColGroup) OnMouseOver(h EventHandler) *HTMLColGroup {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLColGroup) OnMouseUp(h EventHandler) *HTMLColGroup {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLColGroup) OnPaste(h EventHandler) *HTMLColGroup {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLColGroup) OnReset(h EventHandler) *HTMLColGroup {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLColGroup) OnScroll(h EventHandler) *HTMLColGroup {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLColGroup) OnSearch(h EventHandler) *HTMLColGroup {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLColGroup) OnSelect(h EventHandler) *HTMLColGroup {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLColGroup) OnSubmit(h EventHandler) *HTMLColGroup {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLColGroup) OnWheel(h EventHandler) *HTMLColGroup {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLColGroup) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLData represents an HTML element <data>.
type HTMLData struct {
	elem
}

// Data returns an HTML element that links the given content with a machine-readable translation.
func Data() *HTMLData {
	return &HTMLData{
		elem: elem{
			tag:         "data",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLData) Body(nodes ...Node) *HTMLData {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLData) AccessKey(v string) *HTMLData {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLData) Class(v string) *HTMLData {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLData) ContentEditable(v bool) *HTMLData {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLData) DataSet(k, v string) *HTMLData {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLData) Dir(v string) *HTMLData {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLData) Draggable(v bool) *HTMLData {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLData) Hidden(v bool) *HTMLData {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLData) ID(v string) *HTMLData {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLData) Lang(v string) *HTMLData {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLData) Spellcheck(v bool) *HTMLData {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLData) Style(v string) *HTMLData {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLData) TabIndex(v int) *HTMLData {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLData) Title(v string) *HTMLData {
	e.elem.setAttribute("title", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLData) Value(v interface{}) *HTMLData {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

func (e *HTMLData) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDataList represents an HTML element <datalist>.
type HTMLDataList struct {
	elem
}

// DataList returns an HTML element that specifies a list of pre-defined options for input controls.
func DataList() *HTMLDataList {
	return &HTMLDataList{
		elem: elem{
			tag:         "datalist",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDataList) Body(nodes ...Node) *HTMLDataList {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDataList) AccessKey(v string) *HTMLDataList {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDataList) Class(v string) *HTMLDataList {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDataList) ContentEditable(v bool) *HTMLDataList {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDataList) DataSet(k, v string) *HTMLDataList {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDataList) Dir(v string) *HTMLDataList {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDataList) Draggable(v bool) *HTMLDataList {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDataList) Hidden(v bool) *HTMLDataList {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDataList) ID(v string) *HTMLDataList {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDataList) Lang(v string) *HTMLDataList {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDataList) Spellcheck(v bool) *HTMLDataList {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDataList) Style(v string) *HTMLDataList {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDataList) TabIndex(v int) *HTMLDataList {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDataList) Title(v string) *HTMLDataList {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDataList) OnBlur(h EventHandler) *HTMLDataList {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDataList) OnChange(h EventHandler) *HTMLDataList {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDataList) OnClick(h EventHandler) *HTMLDataList {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDataList) OnContextMenu(h EventHandler) *HTMLDataList {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDataList) OnCopy(h EventHandler) *HTMLDataList {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDataList) OnCut(h EventHandler) *HTMLDataList {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDataList) OnDblClick(h EventHandler) *HTMLDataList {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDataList) OnDrag(h EventHandler) *HTMLDataList {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDataList) OnDragEnd(h EventHandler) *HTMLDataList {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDataList) OnDragEnter(h EventHandler) *HTMLDataList {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDataList) OnDragLeave(h EventHandler) *HTMLDataList {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDataList) OnDragOver(h EventHandler) *HTMLDataList {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDataList) OnDragStart(h EventHandler) *HTMLDataList {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDataList) OnDrop(h EventHandler) *HTMLDataList {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDataList) OnFocus(h EventHandler) *HTMLDataList {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDataList) OnInput(h EventHandler) *HTMLDataList {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDataList) OnInvalid(h EventHandler) *HTMLDataList {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDataList) OnKeyDown(h EventHandler) *HTMLDataList {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDataList) OnKeyPress(h EventHandler) *HTMLDataList {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDataList) OnKeyup(h EventHandler) *HTMLDataList {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDataList) OnMouseDown(h EventHandler) *HTMLDataList {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDataList) OnMouseMove(h EventHandler) *HTMLDataList {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDataList) OnMouseOut(h EventHandler) *HTMLDataList {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDataList) OnMouseOver(h EventHandler) *HTMLDataList {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDataList) OnMouseUp(h EventHandler) *HTMLDataList {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDataList) OnPaste(h EventHandler) *HTMLDataList {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDataList) OnReset(h EventHandler) *HTMLDataList {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDataList) OnScroll(h EventHandler) *HTMLDataList {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDataList) OnSearch(h EventHandler) *HTMLDataList {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDataList) OnSelect(h EventHandler) *HTMLDataList {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDataList) OnSubmit(h EventHandler) *HTMLDataList {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDataList) OnWheel(h EventHandler) *HTMLDataList {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDataList) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDd represents an HTML element <dd>.
type HTMLDd struct {
	elem
}

// Dd returns an HTML element that defines a description/value of a term in a description list.
func Dd() *HTMLDd {
	return &HTMLDd{
		elem: elem{
			tag:         "dd",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDd) Body(nodes ...Node) *HTMLDd {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDd) AccessKey(v string) *HTMLDd {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDd) Class(v string) *HTMLDd {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDd) ContentEditable(v bool) *HTMLDd {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDd) DataSet(k, v string) *HTMLDd {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDd) Dir(v string) *HTMLDd {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDd) Draggable(v bool) *HTMLDd {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDd) Hidden(v bool) *HTMLDd {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDd) ID(v string) *HTMLDd {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDd) Lang(v string) *HTMLDd {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDd) Spellcheck(v bool) *HTMLDd {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDd) Style(v string) *HTMLDd {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDd) TabIndex(v int) *HTMLDd {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDd) Title(v string) *HTMLDd {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDd) OnBlur(h EventHandler) *HTMLDd {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDd) OnChange(h EventHandler) *HTMLDd {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDd) OnClick(h EventHandler) *HTMLDd {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDd) OnContextMenu(h EventHandler) *HTMLDd {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDd) OnCopy(h EventHandler) *HTMLDd {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDd) OnCut(h EventHandler) *HTMLDd {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDd) OnDblClick(h EventHandler) *HTMLDd {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDd) OnDrag(h EventHandler) *HTMLDd {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDd) OnDragEnd(h EventHandler) *HTMLDd {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDd) OnDragEnter(h EventHandler) *HTMLDd {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDd) OnDragLeave(h EventHandler) *HTMLDd {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDd) OnDragOver(h EventHandler) *HTMLDd {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDd) OnDragStart(h EventHandler) *HTMLDd {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDd) OnDrop(h EventHandler) *HTMLDd {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDd) OnFocus(h EventHandler) *HTMLDd {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDd) OnInput(h EventHandler) *HTMLDd {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDd) OnInvalid(h EventHandler) *HTMLDd {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDd) OnKeyDown(h EventHandler) *HTMLDd {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDd) OnKeyPress(h EventHandler) *HTMLDd {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDd) OnKeyup(h EventHandler) *HTMLDd {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDd) OnMouseDown(h EventHandler) *HTMLDd {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDd) OnMouseMove(h EventHandler) *HTMLDd {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDd) OnMouseOut(h EventHandler) *HTMLDd {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDd) OnMouseOver(h EventHandler) *HTMLDd {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDd) OnMouseUp(h EventHandler) *HTMLDd {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDd) OnPaste(h EventHandler) *HTMLDd {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDd) OnReset(h EventHandler) *HTMLDd {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDd) OnScroll(h EventHandler) *HTMLDd {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDd) OnSearch(h EventHandler) *HTMLDd {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDd) OnSelect(h EventHandler) *HTMLDd {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDd) OnSubmit(h EventHandler) *HTMLDd {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDd) OnWheel(h EventHandler) *HTMLDd {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDd) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDel represents an HTML element <del>.
type HTMLDel struct {
	elem
}

// Del returns an HTML element that defines text that has been deleted from a document.
func Del() *HTMLDel {
	return &HTMLDel{
		elem: elem{
			tag:         "del",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDel) Body(nodes ...Node) *HTMLDel {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDel) AccessKey(v string) *HTMLDel {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Cite specifies a URL which explains the quote/deleted/inserted text.
func (e *HTMLDel) Cite(v string) *HTMLDel {
	e.elem.setAttribute("cite", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDel) Class(v string) *HTMLDel {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDel) ContentEditable(v bool) *HTMLDel {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDel) DataSet(k, v string) *HTMLDel {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// DateTime specifies the date and time.
func (e *HTMLDel) DateTime(v string) *HTMLDel {
	e.elem.setAttribute("datetime", v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDel) Dir(v string) *HTMLDel {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDel) Draggable(v bool) *HTMLDel {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDel) Hidden(v bool) *HTMLDel {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDel) ID(v string) *HTMLDel {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDel) Lang(v string) *HTMLDel {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDel) Spellcheck(v bool) *HTMLDel {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDel) Style(v string) *HTMLDel {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDel) TabIndex(v int) *HTMLDel {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDel) Title(v string) *HTMLDel {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDel) OnBlur(h EventHandler) *HTMLDel {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDel) OnChange(h EventHandler) *HTMLDel {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDel) OnClick(h EventHandler) *HTMLDel {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDel) OnContextMenu(h EventHandler) *HTMLDel {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDel) OnCopy(h EventHandler) *HTMLDel {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDel) OnCut(h EventHandler) *HTMLDel {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDel) OnDblClick(h EventHandler) *HTMLDel {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDel) OnDrag(h EventHandler) *HTMLDel {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDel) OnDragEnd(h EventHandler) *HTMLDel {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDel) OnDragEnter(h EventHandler) *HTMLDel {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDel) OnDragLeave(h EventHandler) *HTMLDel {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDel) OnDragOver(h EventHandler) *HTMLDel {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDel) OnDragStart(h EventHandler) *HTMLDel {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDel) OnDrop(h EventHandler) *HTMLDel {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDel) OnFocus(h EventHandler) *HTMLDel {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDel) OnInput(h EventHandler) *HTMLDel {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDel) OnInvalid(h EventHandler) *HTMLDel {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDel) OnKeyDown(h EventHandler) *HTMLDel {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDel) OnKeyPress(h EventHandler) *HTMLDel {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDel) OnKeyup(h EventHandler) *HTMLDel {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDel) OnMouseDown(h EventHandler) *HTMLDel {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDel) OnMouseMove(h EventHandler) *HTMLDel {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDel) OnMouseOut(h EventHandler) *HTMLDel {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDel) OnMouseOver(h EventHandler) *HTMLDel {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDel) OnMouseUp(h EventHandler) *HTMLDel {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDel) OnPaste(h EventHandler) *HTMLDel {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDel) OnReset(h EventHandler) *HTMLDel {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDel) OnScroll(h EventHandler) *HTMLDel {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDel) OnSearch(h EventHandler) *HTMLDel {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDel) OnSelect(h EventHandler) *HTMLDel {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDel) OnSubmit(h EventHandler) *HTMLDel {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDel) OnWheel(h EventHandler) *HTMLDel {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDel) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDetails represents an HTML element <details>.
type HTMLDetails struct {
	elem
}

// Details returns an HTML element that defines additional details that the user can view or hide.
func Details() *HTMLDetails {
	return &HTMLDetails{
		elem: elem{
			tag:         "details",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDetails) Body(nodes ...Node) *HTMLDetails {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDetails) AccessKey(v string) *HTMLDetails {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDetails) Class(v string) *HTMLDetails {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDetails) ContentEditable(v bool) *HTMLDetails {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDetails) DataSet(k, v string) *HTMLDetails {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDetails) Dir(v string) *HTMLDetails {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDetails) Draggable(v bool) *HTMLDetails {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDetails) Hidden(v bool) *HTMLDetails {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDetails) ID(v string) *HTMLDetails {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDetails) Lang(v string) *HTMLDetails {
	e.elem.setAttribute("lang", v)
	return e
}

// Open specifies that the details should be visible (open) to the user.
func (e *HTMLDetails) Open(v bool) *HTMLDetails {
	e.elem.setAttribute("open", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDetails) Spellcheck(v bool) *HTMLDetails {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDetails) Style(v string) *HTMLDetails {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDetails) TabIndex(v int) *HTMLDetails {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDetails) Title(v string) *HTMLDetails {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDetails) OnBlur(h EventHandler) *HTMLDetails {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDetails) OnChange(h EventHandler) *HTMLDetails {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDetails) OnClick(h EventHandler) *HTMLDetails {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDetails) OnContextMenu(h EventHandler) *HTMLDetails {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDetails) OnCopy(h EventHandler) *HTMLDetails {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDetails) OnCut(h EventHandler) *HTMLDetails {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDetails) OnDblClick(h EventHandler) *HTMLDetails {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDetails) OnDrag(h EventHandler) *HTMLDetails {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDetails) OnDragEnd(h EventHandler) *HTMLDetails {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDetails) OnDragEnter(h EventHandler) *HTMLDetails {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDetails) OnDragLeave(h EventHandler) *HTMLDetails {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDetails) OnDragOver(h EventHandler) *HTMLDetails {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDetails) OnDragStart(h EventHandler) *HTMLDetails {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDetails) OnDrop(h EventHandler) *HTMLDetails {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDetails) OnFocus(h EventHandler) *HTMLDetails {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDetails) OnInput(h EventHandler) *HTMLDetails {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDetails) OnInvalid(h EventHandler) *HTMLDetails {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDetails) OnKeyDown(h EventHandler) *HTMLDetails {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDetails) OnKeyPress(h EventHandler) *HTMLDetails {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDetails) OnKeyup(h EventHandler) *HTMLDetails {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDetails) OnMouseDown(h EventHandler) *HTMLDetails {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDetails) OnMouseMove(h EventHandler) *HTMLDetails {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDetails) OnMouseOut(h EventHandler) *HTMLDetails {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDetails) OnMouseOver(h EventHandler) *HTMLDetails {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDetails) OnMouseUp(h EventHandler) *HTMLDetails {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDetails) OnPaste(h EventHandler) *HTMLDetails {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDetails) OnReset(h EventHandler) *HTMLDetails {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDetails) OnScroll(h EventHandler) *HTMLDetails {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDetails) OnSearch(h EventHandler) *HTMLDetails {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDetails) OnSelect(h EventHandler) *HTMLDetails {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDetails) OnSubmit(h EventHandler) *HTMLDetails {
	e.setEventHandler("submit", h)
	return e
}

// OnToggle calls the given handler when the user opens or closes the details element.
func (e *HTMLDetails) OnToggle(h EventHandler) *HTMLDetails {
	e.setEventHandler("toggle", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDetails) OnWheel(h EventHandler) *HTMLDetails {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDetails) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDfn represents an HTML element <dfn>.
type HTMLDfn struct {
	elem
}

// Dfn returns an HTML element that represents the defining instance of a term.
func Dfn() *HTMLDfn {
	return &HTMLDfn{
		elem: elem{
			tag:         "dfn",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDfn) Body(nodes ...Node) *HTMLDfn {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDfn) AccessKey(v string) *HTMLDfn {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDfn) Class(v string) *HTMLDfn {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDfn) ContentEditable(v bool) *HTMLDfn {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDfn) DataSet(k, v string) *HTMLDfn {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDfn) Dir(v string) *HTMLDfn {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDfn) Draggable(v bool) *HTMLDfn {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDfn) Hidden(v bool) *HTMLDfn {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDfn) ID(v string) *HTMLDfn {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDfn) Lang(v string) *HTMLDfn {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDfn) Spellcheck(v bool) *HTMLDfn {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDfn) Style(v string) *HTMLDfn {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDfn) TabIndex(v int) *HTMLDfn {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDfn) Title(v string) *HTMLDfn {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDfn) OnBlur(h EventHandler) *HTMLDfn {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDfn) OnChange(h EventHandler) *HTMLDfn {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDfn) OnClick(h EventHandler) *HTMLDfn {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDfn) OnContextMenu(h EventHandler) *HTMLDfn {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDfn) OnCopy(h EventHandler) *HTMLDfn {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDfn) OnCut(h EventHandler) *HTMLDfn {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDfn) OnDblClick(h EventHandler) *HTMLDfn {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDfn) OnDrag(h EventHandler) *HTMLDfn {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDfn) OnDragEnd(h EventHandler) *HTMLDfn {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDfn) OnDragEnter(h EventHandler) *HTMLDfn {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDfn) OnDragLeave(h EventHandler) *HTMLDfn {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDfn) OnDragOver(h EventHandler) *HTMLDfn {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDfn) OnDragStart(h EventHandler) *HTMLDfn {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDfn) OnDrop(h EventHandler) *HTMLDfn {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDfn) OnFocus(h EventHandler) *HTMLDfn {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDfn) OnInput(h EventHandler) *HTMLDfn {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDfn) OnInvalid(h EventHandler) *HTMLDfn {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDfn) OnKeyDown(h EventHandler) *HTMLDfn {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDfn) OnKeyPress(h EventHandler) *HTMLDfn {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDfn) OnKeyup(h EventHandler) *HTMLDfn {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDfn) OnMouseDown(h EventHandler) *HTMLDfn {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDfn) OnMouseMove(h EventHandler) *HTMLDfn {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDfn) OnMouseOut(h EventHandler) *HTMLDfn {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDfn) OnMouseOver(h EventHandler) *HTMLDfn {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDfn) OnMouseUp(h EventHandler) *HTMLDfn {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDfn) OnPaste(h EventHandler) *HTMLDfn {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDfn) OnReset(h EventHandler) *HTMLDfn {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDfn) OnScroll(h EventHandler) *HTMLDfn {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDfn) OnSearch(h EventHandler) *HTMLDfn {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDfn) OnSelect(h EventHandler) *HTMLDfn {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDfn) OnSubmit(h EventHandler) *HTMLDfn {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDfn) OnWheel(h EventHandler) *HTMLDfn {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDfn) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDialog represents an HTML element <dialog>.
type HTMLDialog struct {
	elem
}

// Dialog returns an HTML element that defines a dialog box or window.
func Dialog() *HTMLDialog {
	return &HTMLDialog{
		elem: elem{
			tag:         "dialog",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDialog) Body(nodes ...Node) *HTMLDialog {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDialog) AccessKey(v string) *HTMLDialog {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDialog) Class(v string) *HTMLDialog {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDialog) ContentEditable(v bool) *HTMLDialog {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDialog) DataSet(k, v string) *HTMLDialog {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDialog) Dir(v string) *HTMLDialog {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDialog) Draggable(v bool) *HTMLDialog {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDialog) Hidden(v bool) *HTMLDialog {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDialog) ID(v string) *HTMLDialog {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDialog) Lang(v string) *HTMLDialog {
	e.elem.setAttribute("lang", v)
	return e
}

// Open specifies that the details should be visible (open) to the user.
func (e *HTMLDialog) Open(v bool) *HTMLDialog {
	e.elem.setAttribute("open", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDialog) Spellcheck(v bool) *HTMLDialog {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDialog) Style(v string) *HTMLDialog {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDialog) TabIndex(v int) *HTMLDialog {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDialog) Title(v string) *HTMLDialog {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDialog) OnBlur(h EventHandler) *HTMLDialog {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDialog) OnChange(h EventHandler) *HTMLDialog {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDialog) OnClick(h EventHandler) *HTMLDialog {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDialog) OnContextMenu(h EventHandler) *HTMLDialog {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDialog) OnCopy(h EventHandler) *HTMLDialog {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDialog) OnCut(h EventHandler) *HTMLDialog {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDialog) OnDblClick(h EventHandler) *HTMLDialog {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDialog) OnDrag(h EventHandler) *HTMLDialog {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDialog) OnDragEnd(h EventHandler) *HTMLDialog {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDialog) OnDragEnter(h EventHandler) *HTMLDialog {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDialog) OnDragLeave(h EventHandler) *HTMLDialog {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDialog) OnDragOver(h EventHandler) *HTMLDialog {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDialog) OnDragStart(h EventHandler) *HTMLDialog {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDialog) OnDrop(h EventHandler) *HTMLDialog {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDialog) OnFocus(h EventHandler) *HTMLDialog {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDialog) OnInput(h EventHandler) *HTMLDialog {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDialog) OnInvalid(h EventHandler) *HTMLDialog {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDialog) OnKeyDown(h EventHandler) *HTMLDialog {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDialog) OnKeyPress(h EventHandler) *HTMLDialog {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDialog) OnKeyup(h EventHandler) *HTMLDialog {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDialog) OnMouseDown(h EventHandler) *HTMLDialog {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDialog) OnMouseMove(h EventHandler) *HTMLDialog {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDialog) OnMouseOut(h EventHandler) *HTMLDialog {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDialog) OnMouseOver(h EventHandler) *HTMLDialog {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDialog) OnMouseUp(h EventHandler) *HTMLDialog {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDialog) OnPaste(h EventHandler) *HTMLDialog {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDialog) OnReset(h EventHandler) *HTMLDialog {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDialog) OnScroll(h EventHandler) *HTMLDialog {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDialog) OnSearch(h EventHandler) *HTMLDialog {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDialog) OnSelect(h EventHandler) *HTMLDialog {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDialog) OnSubmit(h EventHandler) *HTMLDialog {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDialog) OnWheel(h EventHandler) *HTMLDialog {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDialog) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDiv represents an HTML element <div>.
type HTMLDiv struct {
	elem
}

// Div returns an HTML element that defines a section in a document.
func Div() *HTMLDiv {
	return &HTMLDiv{
		elem: elem{
			tag:         "div",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDiv) Body(nodes ...Node) *HTMLDiv {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDiv) AccessKey(v string) *HTMLDiv {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDiv) Class(v string) *HTMLDiv {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDiv) ContentEditable(v bool) *HTMLDiv {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDiv) DataSet(k, v string) *HTMLDiv {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDiv) Dir(v string) *HTMLDiv {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDiv) Draggable(v bool) *HTMLDiv {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDiv) Hidden(v bool) *HTMLDiv {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDiv) ID(v string) *HTMLDiv {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDiv) Lang(v string) *HTMLDiv {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDiv) Spellcheck(v bool) *HTMLDiv {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDiv) Style(v string) *HTMLDiv {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDiv) TabIndex(v int) *HTMLDiv {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDiv) Title(v string) *HTMLDiv {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDiv) OnBlur(h EventHandler) *HTMLDiv {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDiv) OnChange(h EventHandler) *HTMLDiv {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDiv) OnClick(h EventHandler) *HTMLDiv {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDiv) OnContextMenu(h EventHandler) *HTMLDiv {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDiv) OnCopy(h EventHandler) *HTMLDiv {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDiv) OnCut(h EventHandler) *HTMLDiv {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDiv) OnDblClick(h EventHandler) *HTMLDiv {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDiv) OnDrag(h EventHandler) *HTMLDiv {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDiv) OnDragEnd(h EventHandler) *HTMLDiv {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDiv) OnDragEnter(h EventHandler) *HTMLDiv {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDiv) OnDragLeave(h EventHandler) *HTMLDiv {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDiv) OnDragOver(h EventHandler) *HTMLDiv {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDiv) OnDragStart(h EventHandler) *HTMLDiv {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDiv) OnDrop(h EventHandler) *HTMLDiv {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDiv) OnFocus(h EventHandler) *HTMLDiv {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDiv) OnInput(h EventHandler) *HTMLDiv {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDiv) OnInvalid(h EventHandler) *HTMLDiv {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDiv) OnKeyDown(h EventHandler) *HTMLDiv {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDiv) OnKeyPress(h EventHandler) *HTMLDiv {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDiv) OnKeyup(h EventHandler) *HTMLDiv {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDiv) OnMouseDown(h EventHandler) *HTMLDiv {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDiv) OnMouseMove(h EventHandler) *HTMLDiv {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDiv) OnMouseOut(h EventHandler) *HTMLDiv {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDiv) OnMouseOver(h EventHandler) *HTMLDiv {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDiv) OnMouseUp(h EventHandler) *HTMLDiv {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDiv) OnPaste(h EventHandler) *HTMLDiv {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDiv) OnReset(h EventHandler) *HTMLDiv {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDiv) OnScroll(h EventHandler) *HTMLDiv {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDiv) OnSearch(h EventHandler) *HTMLDiv {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDiv) OnSelect(h EventHandler) *HTMLDiv {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDiv) OnSubmit(h EventHandler) *HTMLDiv {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDiv) OnWheel(h EventHandler) *HTMLDiv {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDiv) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDl represents an HTML element <dl>.
type HTMLDl struct {
	elem
}

// Dl returns an HTML element that defines a description list.
func Dl() *HTMLDl {
	return &HTMLDl{
		elem: elem{
			tag:         "dl",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDl) Body(nodes ...Node) *HTMLDl {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDl) AccessKey(v string) *HTMLDl {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDl) Class(v string) *HTMLDl {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDl) ContentEditable(v bool) *HTMLDl {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDl) DataSet(k, v string) *HTMLDl {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDl) Dir(v string) *HTMLDl {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDl) Draggable(v bool) *HTMLDl {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDl) Hidden(v bool) *HTMLDl {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDl) ID(v string) *HTMLDl {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDl) Lang(v string) *HTMLDl {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDl) Spellcheck(v bool) *HTMLDl {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDl) Style(v string) *HTMLDl {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDl) TabIndex(v int) *HTMLDl {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDl) Title(v string) *HTMLDl {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDl) OnBlur(h EventHandler) *HTMLDl {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDl) OnChange(h EventHandler) *HTMLDl {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDl) OnClick(h EventHandler) *HTMLDl {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDl) OnContextMenu(h EventHandler) *HTMLDl {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDl) OnCopy(h EventHandler) *HTMLDl {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDl) OnCut(h EventHandler) *HTMLDl {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDl) OnDblClick(h EventHandler) *HTMLDl {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDl) OnDrag(h EventHandler) *HTMLDl {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDl) OnDragEnd(h EventHandler) *HTMLDl {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDl) OnDragEnter(h EventHandler) *HTMLDl {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDl) OnDragLeave(h EventHandler) *HTMLDl {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDl) OnDragOver(h EventHandler) *HTMLDl {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDl) OnDragStart(h EventHandler) *HTMLDl {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDl) OnDrop(h EventHandler) *HTMLDl {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDl) OnFocus(h EventHandler) *HTMLDl {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDl) OnInput(h EventHandler) *HTMLDl {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDl) OnInvalid(h EventHandler) *HTMLDl {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDl) OnKeyDown(h EventHandler) *HTMLDl {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDl) OnKeyPress(h EventHandler) *HTMLDl {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDl) OnKeyup(h EventHandler) *HTMLDl {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDl) OnMouseDown(h EventHandler) *HTMLDl {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDl) OnMouseMove(h EventHandler) *HTMLDl {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDl) OnMouseOut(h EventHandler) *HTMLDl {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDl) OnMouseOver(h EventHandler) *HTMLDl {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDl) OnMouseUp(h EventHandler) *HTMLDl {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDl) OnPaste(h EventHandler) *HTMLDl {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDl) OnReset(h EventHandler) *HTMLDl {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDl) OnScroll(h EventHandler) *HTMLDl {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDl) OnSearch(h EventHandler) *HTMLDl {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDl) OnSelect(h EventHandler) *HTMLDl {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDl) OnSubmit(h EventHandler) *HTMLDl {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDl) OnWheel(h EventHandler) *HTMLDl {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDl) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLDt represents an HTML element <dt>.
type HTMLDt struct {
	elem
}

// Dt returns an HTML element that defines a term/name in a description list.
func Dt() *HTMLDt {
	return &HTMLDt{
		elem: elem{
			tag:         "dt",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLDt) Body(nodes ...Node) *HTMLDt {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLDt) AccessKey(v string) *HTMLDt {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLDt) Class(v string) *HTMLDt {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLDt) ContentEditable(v bool) *HTMLDt {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLDt) DataSet(k, v string) *HTMLDt {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLDt) Dir(v string) *HTMLDt {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLDt) Draggable(v bool) *HTMLDt {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLDt) Hidden(v bool) *HTMLDt {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLDt) ID(v string) *HTMLDt {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLDt) Lang(v string) *HTMLDt {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLDt) Spellcheck(v bool) *HTMLDt {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLDt) Style(v string) *HTMLDt {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLDt) TabIndex(v int) *HTMLDt {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLDt) Title(v string) *HTMLDt {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLDt) OnBlur(h EventHandler) *HTMLDt {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLDt) OnChange(h EventHandler) *HTMLDt {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLDt) OnClick(h EventHandler) *HTMLDt {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLDt) OnContextMenu(h EventHandler) *HTMLDt {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLDt) OnCopy(h EventHandler) *HTMLDt {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLDt) OnCut(h EventHandler) *HTMLDt {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLDt) OnDblClick(h EventHandler) *HTMLDt {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLDt) OnDrag(h EventHandler) *HTMLDt {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLDt) OnDragEnd(h EventHandler) *HTMLDt {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLDt) OnDragEnter(h EventHandler) *HTMLDt {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLDt) OnDragLeave(h EventHandler) *HTMLDt {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLDt) OnDragOver(h EventHandler) *HTMLDt {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLDt) OnDragStart(h EventHandler) *HTMLDt {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLDt) OnDrop(h EventHandler) *HTMLDt {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLDt) OnFocus(h EventHandler) *HTMLDt {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLDt) OnInput(h EventHandler) *HTMLDt {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLDt) OnInvalid(h EventHandler) *HTMLDt {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLDt) OnKeyDown(h EventHandler) *HTMLDt {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLDt) OnKeyPress(h EventHandler) *HTMLDt {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLDt) OnKeyup(h EventHandler) *HTMLDt {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLDt) OnMouseDown(h EventHandler) *HTMLDt {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLDt) OnMouseMove(h EventHandler) *HTMLDt {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLDt) OnMouseOut(h EventHandler) *HTMLDt {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLDt) OnMouseOver(h EventHandler) *HTMLDt {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLDt) OnMouseUp(h EventHandler) *HTMLDt {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLDt) OnPaste(h EventHandler) *HTMLDt {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLDt) OnReset(h EventHandler) *HTMLDt {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLDt) OnScroll(h EventHandler) *HTMLDt {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLDt) OnSearch(h EventHandler) *HTMLDt {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLDt) OnSelect(h EventHandler) *HTMLDt {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLDt) OnSubmit(h EventHandler) *HTMLDt {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLDt) OnWheel(h EventHandler) *HTMLDt {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLDt) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLEm represents an HTML element <em>.
type HTMLEm struct {
	elem
}

// Em returns an HTML element that defines emphasized text.
func Em() *HTMLEm {
	return &HTMLEm{
		elem: elem{
			tag:         "em",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLEm) Body(nodes ...Node) *HTMLEm {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLEm) AccessKey(v string) *HTMLEm {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLEm) Class(v string) *HTMLEm {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLEm) ContentEditable(v bool) *HTMLEm {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLEm) DataSet(k, v string) *HTMLEm {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLEm) Dir(v string) *HTMLEm {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLEm) Draggable(v bool) *HTMLEm {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLEm) Hidden(v bool) *HTMLEm {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLEm) ID(v string) *HTMLEm {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLEm) Lang(v string) *HTMLEm {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLEm) Spellcheck(v bool) *HTMLEm {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLEm) Style(v string) *HTMLEm {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLEm) TabIndex(v int) *HTMLEm {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLEm) Title(v string) *HTMLEm {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLEm) OnBlur(h EventHandler) *HTMLEm {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLEm) OnChange(h EventHandler) *HTMLEm {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLEm) OnClick(h EventHandler) *HTMLEm {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLEm) OnContextMenu(h EventHandler) *HTMLEm {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLEm) OnCopy(h EventHandler) *HTMLEm {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLEm) OnCut(h EventHandler) *HTMLEm {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLEm) OnDblClick(h EventHandler) *HTMLEm {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLEm) OnDrag(h EventHandler) *HTMLEm {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLEm) OnDragEnd(h EventHandler) *HTMLEm {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLEm) OnDragEnter(h EventHandler) *HTMLEm {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLEm) OnDragLeave(h EventHandler) *HTMLEm {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLEm) OnDragOver(h EventHandler) *HTMLEm {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLEm) OnDragStart(h EventHandler) *HTMLEm {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLEm) OnDrop(h EventHandler) *HTMLEm {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLEm) OnFocus(h EventHandler) *HTMLEm {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLEm) OnInput(h EventHandler) *HTMLEm {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLEm) OnInvalid(h EventHandler) *HTMLEm {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLEm) OnKeyDown(h EventHandler) *HTMLEm {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLEm) OnKeyPress(h EventHandler) *HTMLEm {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLEm) OnKeyup(h EventHandler) *HTMLEm {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLEm) OnMouseDown(h EventHandler) *HTMLEm {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLEm) OnMouseMove(h EventHandler) *HTMLEm {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLEm) OnMouseOut(h EventHandler) *HTMLEm {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLEm) OnMouseOver(h EventHandler) *HTMLEm {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLEm) OnMouseUp(h EventHandler) *HTMLEm {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLEm) OnPaste(h EventHandler) *HTMLEm {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLEm) OnReset(h EventHandler) *HTMLEm {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLEm) OnScroll(h EventHandler) *HTMLEm {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLEm) OnSearch(h EventHandler) *HTMLEm {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLEm) OnSelect(h EventHandler) *HTMLEm {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLEm) OnSubmit(h EventHandler) *HTMLEm {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLEm) OnWheel(h EventHandler) *HTMLEm {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLEm) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLEmbed represents an HTML element <embed>.
type HTMLEmbed struct {
	elem
}

// Embed returns an HTML element that defines a container for an external (non-HTML) application.
func Embed() *HTMLEmbed {
	return &HTMLEmbed{
		elem: elem{
			tag:         "embed",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLEmbed) AccessKey(v string) *HTMLEmbed {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLEmbed) Class(v string) *HTMLEmbed {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLEmbed) ContentEditable(v bool) *HTMLEmbed {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLEmbed) DataSet(k, v string) *HTMLEmbed {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLEmbed) Dir(v string) *HTMLEmbed {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLEmbed) Draggable(v bool) *HTMLEmbed {
	e.elem.setAttribute("draggable", v)
	return e
}

// Height specifies the height of the element (in pixels).
func (e *HTMLEmbed) Height(v int) *HTMLEmbed {
	e.elem.setAttribute("height", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLEmbed) Hidden(v bool) *HTMLEmbed {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLEmbed) ID(v string) *HTMLEmbed {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLEmbed) Lang(v string) *HTMLEmbed {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLEmbed) Spellcheck(v bool) *HTMLEmbed {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLEmbed) Src(v string) *HTMLEmbed {
	e.elem.setAttribute("src", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLEmbed) Style(v string) *HTMLEmbed {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLEmbed) TabIndex(v int) *HTMLEmbed {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLEmbed) Title(v string) *HTMLEmbed {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLEmbed) Type(v string) *HTMLEmbed {
	e.elem.setAttribute("type", v)
	return e
}

// Width specifies the width of the element.
func (e *HTMLEmbed) Width(v int) *HTMLEmbed {
	e.elem.setAttribute("width", v)
	return e
}

// OnAbort calls the given handler on abort.
func (e *HTMLEmbed) OnAbort(h EventHandler) *HTMLEmbed {
	e.setEventHandler("abort", h)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLEmbed) OnBlur(h EventHandler) *HTMLEmbed {
	e.setEventHandler("blur", h)
	return e
}

// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
func (e *HTMLEmbed) OnCanPlay(h EventHandler) *HTMLEmbed {
	e.setEventHandler("canplay", h)
	return e
}

// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
func (e *HTMLEmbed) OnCanPlayThrough(h EventHandler) *HTMLEmbed {
	e.setEventHandler("canplaythrough", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLEmbed) OnChange(h EventHandler) *HTMLEmbed {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLEmbed) OnClick(h EventHandler) *HTMLEmbed {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLEmbed) OnContextMenu(h EventHandler) *HTMLEmbed {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLEmbed) OnCopy(h EventHandler) *HTMLEmbed {
	e.setEventHandler("copy", h)
	return e
}

// OnCueChange calls the given handler when the cue changes in a track element.
func (e *HTMLEmbed) OnCueChange(h EventHandler) *HTMLEmbed {
	e.setEventHandler("cuechange", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLEmbed) OnCut(h EventHandler) *HTMLEmbed {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLEmbed) OnDblClick(h EventHandler) *HTMLEmbed {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLEmbed) OnDrag(h EventHandler) *HTMLEmbed {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLEmbed) OnDragEnd(h EventHandler) *HTMLEmbed {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLEmbed) OnDragEnter(h EventHandler) *HTMLEmbed {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLEmbed) OnDragLeave(h EventHandler) *HTMLEmbed {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLEmbed) OnDragOver(h EventHandler) *HTMLEmbed {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLEmbed) OnDragStart(h EventHandler) *HTMLEmbed {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLEmbed) OnDrop(h EventHandler) *HTMLEmbed {
	e.setEventHandler("drop", h)
	return e
}

// OnDurationChange calls the given handler when the length of the media changes.
func (e *HTMLEmbed) OnDurationChange(h EventHandler) *HTMLEmbed {
	e.setEventHandler("durationchange", h)
	return e
}

// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
func (e *HTMLEmbed) OnEmptied(h EventHandler) *HTMLEmbed {
	e.setEventHandler("emptied", h)
	return e
}

// OnEnded calls the given handler when the media has reach the end.
func (e *HTMLEmbed) OnEnded(h EventHandler) *HTMLEmbed {
	e.setEventHandler("ended", h)
	return e
}

// OnError calls the given handler when an error occurs.
func (e *HTMLEmbed) OnError(h EventHandler) *HTMLEmbed {
	e.setEventHandler("error", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLEmbed) OnFocus(h EventHandler) *HTMLEmbed {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLEmbed) OnInput(h EventHandler) *HTMLEmbed {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLEmbed) OnInvalid(h EventHandler) *HTMLEmbed {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLEmbed) OnKeyDown(h EventHandler) *HTMLEmbed {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLEmbed) OnKeyPress(h EventHandler) *HTMLEmbed {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLEmbed) OnKeyup(h EventHandler) *HTMLEmbed {
	e.setEventHandler("keyup", h)
	return e
}

// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
func (e *HTMLEmbed) OnLoadStart(h EventHandler) *HTMLEmbed {
	e.setEventHandler("loadstart", h)
	return e
}

// OnLoadedData calls the given handler when media data is loaded.
func (e *HTMLEmbed) OnLoadedData(h EventHandler) *HTMLEmbed {
	e.setEventHandler("loadeddata", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLEmbed) OnMouseDown(h EventHandler) *HTMLEmbed {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLEmbed) OnMouseMove(h EventHandler) *HTMLEmbed {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLEmbed) OnMouseOut(h EventHandler) *HTMLEmbed {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLEmbed) OnMouseOver(h EventHandler) *HTMLEmbed {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLEmbed) OnMouseUp(h EventHandler) *HTMLEmbed {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLEmbed) OnPaste(h EventHandler) *HTMLEmbed {
	e.setEventHandler("paste", h)
	return e
}

// OnPause calls the given handler when the media is paused either by the user or programmatically.
func (e *HTMLEmbed) OnPause(h EventHandler) *HTMLEmbed {
	e.setEventHandler("pause", h)
	return e
}

// OnPlay calls the given handler when the media is ready to start playing.
func (e *HTMLEmbed) OnPlay(h EventHandler) *HTMLEmbed {
	e.setEventHandler("play", h)
	return e
}

// OnPlaying calls the given handler when the media actually has started playing.
func (e *HTMLEmbed) OnPlaying(h EventHandler) *HTMLEmbed {
	e.setEventHandler("playing", h)
	return e
}

// OnProgress calls the given handler when the browser is in the process of getting the media data.
func (e *HTMLEmbed) OnProgress(h EventHandler) *HTMLEmbed {
	e.setEventHandler("progress", h)
	return e
}

// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
func (e *HTMLEmbed) OnRateChange(h EventHandler) *HTMLEmbed {
	e.setEventHandler("ratechange", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLEmbed) OnReset(h EventHandler) *HTMLEmbed {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLEmbed) OnScroll(h EventHandler) *HTMLEmbed {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLEmbed) OnSearch(h EventHandler) *HTMLEmbed {
	e.setEventHandler("search", h)
	return e
}

// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
func (e *HTMLEmbed) OnSeeked(h EventHandler) *HTMLEmbed {
	e.setEventHandler("seeked", h)
	return e
}

// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
func (e *HTMLEmbed) OnSeeking(h EventHandler) *HTMLEmbed {
	e.setEventHandler("seeking", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLEmbed) OnSelect(h EventHandler) *HTMLEmbed {
	e.setEventHandler("select", h)
	return e
}

// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
func (e *HTMLEmbed) OnStalled(h EventHandler) *HTMLEmbed {
	e.setEventHandler("stalled", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLEmbed) OnSubmit(h EventHandler) *HTMLEmbed {
	e.setEventHandler("submit", h)
	return e
}

// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
func (e *HTMLEmbed) OnSuspend(h EventHandler) *HTMLEmbed {
	e.setEventHandler("suspend", h)
	return e
}

// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
func (e *HTMLEmbed) OnTimeUpdate(h EventHandler) *HTMLEmbed {
	e.setEventHandler("timeupdate", h)
	return e
}

// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
func (e *HTMLEmbed) OnVolumeChange(h EventHandler) *HTMLEmbed {
	e.setEventHandler("volumechange", h)
	return e
}

// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
func (e *HTMLEmbed) OnWaiting(h EventHandler) *HTMLEmbed {
	e.setEventHandler("waiting", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLEmbed) OnWheel(h EventHandler) *HTMLEmbed {
	e.setEventHandler("wheel", h)
	return e
}

// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
func (e *HTMLEmbed) OnloadedMetaData(h EventHandler) *HTMLEmbed {
	e.setEventHandler("loadedmetadata", h)
	return e
}

func (e *HTMLEmbed) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLFieldSet represents an HTML element <fieldset>.
type HTMLFieldSet struct {
	elem
}

// FieldSet returns an HTML element that groups related elements in a form.
func FieldSet() *HTMLFieldSet {
	return &HTMLFieldSet{
		elem: elem{
			tag:         "fieldset",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLFieldSet) Body(nodes ...Node) *HTMLFieldSet {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLFieldSet) AccessKey(v string) *HTMLFieldSet {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLFieldSet) Class(v string) *HTMLFieldSet {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLFieldSet) ContentEditable(v bool) *HTMLFieldSet {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLFieldSet) DataSet(k, v string) *HTMLFieldSet {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLFieldSet) Dir(v string) *HTMLFieldSet {
	e.elem.setAttribute("dir", v)
	return e
}

// Disabled specifies that the specified element/group of elements should be disabled.
func (e *HTMLFieldSet) Disabled(v bool) *HTMLFieldSet {
	e.elem.setAttribute("disabled", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLFieldSet) Draggable(v bool) *HTMLFieldSet {
	e.elem.setAttribute("draggable", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLFieldSet) Form(v string) *HTMLFieldSet {
	e.elem.setAttribute("form", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLFieldSet) Hidden(v bool) *HTMLFieldSet {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLFieldSet) ID(v string) *HTMLFieldSet {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLFieldSet) Lang(v string) *HTMLFieldSet {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLFieldSet) Name(v string) *HTMLFieldSet {
	e.elem.setAttribute("name", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLFieldSet) Spellcheck(v bool) *HTMLFieldSet {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLFieldSet) Style(v string) *HTMLFieldSet {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLFieldSet) TabIndex(v int) *HTMLFieldSet {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLFieldSet) Title(v string) *HTMLFieldSet {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLFieldSet) OnBlur(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLFieldSet) OnChange(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLFieldSet) OnClick(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLFieldSet) OnContextMenu(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLFieldSet) OnCopy(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLFieldSet) OnCut(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLFieldSet) OnDblClick(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLFieldSet) OnDrag(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLFieldSet) OnDragEnd(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLFieldSet) OnDragEnter(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLFieldSet) OnDragLeave(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLFieldSet) OnDragOver(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLFieldSet) OnDragStart(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLFieldSet) OnDrop(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLFieldSet) OnFocus(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLFieldSet) OnInput(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLFieldSet) OnInvalid(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLFieldSet) OnKeyDown(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLFieldSet) OnKeyPress(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLFieldSet) OnKeyup(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLFieldSet) OnMouseDown(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLFieldSet) OnMouseMove(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLFieldSet) OnMouseOut(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLFieldSet) OnMouseOver(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLFieldSet) OnMouseUp(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLFieldSet) OnPaste(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLFieldSet) OnReset(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLFieldSet) OnScroll(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLFieldSet) OnSearch(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLFieldSet) OnSelect(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLFieldSet) OnSubmit(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLFieldSet) OnWheel(h EventHandler) *HTMLFieldSet {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLFieldSet) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLFigCaption represents an HTML element <figcaption>.
type HTMLFigCaption struct {
	elem
}

// FigCaption returns an HTML element that defines a caption for a figure element.
func FigCaption() *HTMLFigCaption {
	return &HTMLFigCaption{
		elem: elem{
			tag:         "figcaption",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLFigCaption) Body(nodes ...Node) *HTMLFigCaption {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLFigCaption) AccessKey(v string) *HTMLFigCaption {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLFigCaption) Class(v string) *HTMLFigCaption {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLFigCaption) ContentEditable(v bool) *HTMLFigCaption {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLFigCaption) DataSet(k, v string) *HTMLFigCaption {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLFigCaption) Dir(v string) *HTMLFigCaption {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLFigCaption) Draggable(v bool) *HTMLFigCaption {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLFigCaption) Hidden(v bool) *HTMLFigCaption {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLFigCaption) ID(v string) *HTMLFigCaption {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLFigCaption) Lang(v string) *HTMLFigCaption {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLFigCaption) Spellcheck(v bool) *HTMLFigCaption {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLFigCaption) Style(v string) *HTMLFigCaption {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLFigCaption) TabIndex(v int) *HTMLFigCaption {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLFigCaption) Title(v string) *HTMLFigCaption {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLFigCaption) OnBlur(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLFigCaption) OnChange(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLFigCaption) OnClick(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLFigCaption) OnContextMenu(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLFigCaption) OnCopy(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLFigCaption) OnCut(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLFigCaption) OnDblClick(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLFigCaption) OnDrag(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLFigCaption) OnDragEnd(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLFigCaption) OnDragEnter(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLFigCaption) OnDragLeave(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLFigCaption) OnDragOver(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLFigCaption) OnDragStart(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLFigCaption) OnDrop(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLFigCaption) OnFocus(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLFigCaption) OnInput(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLFigCaption) OnInvalid(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLFigCaption) OnKeyDown(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLFigCaption) OnKeyPress(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLFigCaption) OnKeyup(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLFigCaption) OnMouseDown(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLFigCaption) OnMouseMove(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLFigCaption) OnMouseOut(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLFigCaption) OnMouseOver(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLFigCaption) OnMouseUp(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLFigCaption) OnPaste(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLFigCaption) OnReset(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLFigCaption) OnScroll(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLFigCaption) OnSearch(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLFigCaption) OnSelect(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLFigCaption) OnSubmit(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLFigCaption) OnWheel(h EventHandler) *HTMLFigCaption {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLFigCaption) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLFigure represents an HTML element <figure>.
type HTMLFigure struct {
	elem
}

// Figure returns an HTML element that specifies self-contained content.
func Figure() *HTMLFigure {
	return &HTMLFigure{
		elem: elem{
			tag:         "figure",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLFigure) Body(nodes ...Node) *HTMLFigure {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLFigure) AccessKey(v string) *HTMLFigure {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLFigure) Class(v string) *HTMLFigure {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLFigure) ContentEditable(v bool) *HTMLFigure {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLFigure) DataSet(k, v string) *HTMLFigure {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLFigure) Dir(v string) *HTMLFigure {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLFigure) Draggable(v bool) *HTMLFigure {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLFigure) Hidden(v bool) *HTMLFigure {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLFigure) ID(v string) *HTMLFigure {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLFigure) Lang(v string) *HTMLFigure {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLFigure) Spellcheck(v bool) *HTMLFigure {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLFigure) Style(v string) *HTMLFigure {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLFigure) TabIndex(v int) *HTMLFigure {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLFigure) Title(v string) *HTMLFigure {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLFigure) OnBlur(h EventHandler) *HTMLFigure {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLFigure) OnChange(h EventHandler) *HTMLFigure {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLFigure) OnClick(h EventHandler) *HTMLFigure {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLFigure) OnContextMenu(h EventHandler) *HTMLFigure {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLFigure) OnCopy(h EventHandler) *HTMLFigure {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLFigure) OnCut(h EventHandler) *HTMLFigure {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLFigure) OnDblClick(h EventHandler) *HTMLFigure {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLFigure) OnDrag(h EventHandler) *HTMLFigure {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLFigure) OnDragEnd(h EventHandler) *HTMLFigure {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLFigure) OnDragEnter(h EventHandler) *HTMLFigure {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLFigure) OnDragLeave(h EventHandler) *HTMLFigure {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLFigure) OnDragOver(h EventHandler) *HTMLFigure {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLFigure) OnDragStart(h EventHandler) *HTMLFigure {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLFigure) OnDrop(h EventHandler) *HTMLFigure {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLFigure) OnFocus(h EventHandler) *HTMLFigure {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLFigure) OnInput(h EventHandler) *HTMLFigure {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLFigure) OnInvalid(h EventHandler) *HTMLFigure {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLFigure) OnKeyDown(h EventHandler) *HTMLFigure {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLFigure) OnKeyPress(h EventHandler) *HTMLFigure {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLFigure) OnKeyup(h EventHandler) *HTMLFigure {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLFigure) OnMouseDown(h EventHandler) *HTMLFigure {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLFigure) OnMouseMove(h EventHandler) *HTMLFigure {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLFigure) OnMouseOut(h EventHandler) *HTMLFigure {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLFigure) OnMouseOver(h EventHandler) *HTMLFigure {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLFigure) OnMouseUp(h EventHandler) *HTMLFigure {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLFigure) OnPaste(h EventHandler) *HTMLFigure {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLFigure) OnReset(h EventHandler) *HTMLFigure {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLFigure) OnScroll(h EventHandler) *HTMLFigure {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLFigure) OnSearch(h EventHandler) *HTMLFigure {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLFigure) OnSelect(h EventHandler) *HTMLFigure {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLFigure) OnSubmit(h EventHandler) *HTMLFigure {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLFigure) OnWheel(h EventHandler) *HTMLFigure {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLFigure) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLFooter represents an HTML element <footer>.
type HTMLFooter struct {
	elem
}

// Footer returns an HTML element that defines a footer for a document or section.
func Footer() *HTMLFooter {
	return &HTMLFooter{
		elem: elem{
			tag:         "footer",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLFooter) Body(nodes ...Node) *HTMLFooter {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLFooter) AccessKey(v string) *HTMLFooter {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLFooter) Class(v string) *HTMLFooter {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLFooter) ContentEditable(v bool) *HTMLFooter {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLFooter) DataSet(k, v string) *HTMLFooter {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLFooter) Dir(v string) *HTMLFooter {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLFooter) Draggable(v bool) *HTMLFooter {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLFooter) Hidden(v bool) *HTMLFooter {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLFooter) ID(v string) *HTMLFooter {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLFooter) Lang(v string) *HTMLFooter {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLFooter) Spellcheck(v bool) *HTMLFooter {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLFooter) Style(v string) *HTMLFooter {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLFooter) TabIndex(v int) *HTMLFooter {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLFooter) Title(v string) *HTMLFooter {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLFooter) OnBlur(h EventHandler) *HTMLFooter {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLFooter) OnChange(h EventHandler) *HTMLFooter {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLFooter) OnClick(h EventHandler) *HTMLFooter {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLFooter) OnContextMenu(h EventHandler) *HTMLFooter {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLFooter) OnCopy(h EventHandler) *HTMLFooter {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLFooter) OnCut(h EventHandler) *HTMLFooter {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLFooter) OnDblClick(h EventHandler) *HTMLFooter {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLFooter) OnDrag(h EventHandler) *HTMLFooter {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLFooter) OnDragEnd(h EventHandler) *HTMLFooter {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLFooter) OnDragEnter(h EventHandler) *HTMLFooter {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLFooter) OnDragLeave(h EventHandler) *HTMLFooter {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLFooter) OnDragOver(h EventHandler) *HTMLFooter {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLFooter) OnDragStart(h EventHandler) *HTMLFooter {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLFooter) OnDrop(h EventHandler) *HTMLFooter {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLFooter) OnFocus(h EventHandler) *HTMLFooter {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLFooter) OnInput(h EventHandler) *HTMLFooter {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLFooter) OnInvalid(h EventHandler) *HTMLFooter {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLFooter) OnKeyDown(h EventHandler) *HTMLFooter {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLFooter) OnKeyPress(h EventHandler) *HTMLFooter {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLFooter) OnKeyup(h EventHandler) *HTMLFooter {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLFooter) OnMouseDown(h EventHandler) *HTMLFooter {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLFooter) OnMouseMove(h EventHandler) *HTMLFooter {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLFooter) OnMouseOut(h EventHandler) *HTMLFooter {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLFooter) OnMouseOver(h EventHandler) *HTMLFooter {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLFooter) OnMouseUp(h EventHandler) *HTMLFooter {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLFooter) OnPaste(h EventHandler) *HTMLFooter {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLFooter) OnReset(h EventHandler) *HTMLFooter {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLFooter) OnScroll(h EventHandler) *HTMLFooter {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLFooter) OnSearch(h EventHandler) *HTMLFooter {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLFooter) OnSelect(h EventHandler) *HTMLFooter {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLFooter) OnSubmit(h EventHandler) *HTMLFooter {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLFooter) OnWheel(h EventHandler) *HTMLFooter {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLFooter) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLForm represents an HTML element <form>.
type HTMLForm struct {
	elem
}

// Form returns an HTML element that defines an HTML form for user input.
func Form() *HTMLForm {
	return &HTMLForm{
		elem: elem{
			tag:         "form",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLForm) Body(nodes ...Node) *HTMLForm {
	e.setBody(e, nodes)
	return e
}

// AcceptCharset specifies the character encodings that are to be used for the form submission.
func (e *HTMLForm) AcceptCharset(v string) *HTMLForm {
	e.elem.setAttribute("acceptcharset", v)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLForm) AccessKey(v string) *HTMLForm {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Action specifies where to send the form-data when a form is submitted.
func (e *HTMLForm) Action(v string) *HTMLForm {
	e.elem.setAttribute("action", v)
	return e
}

// AutoComplete specifies whether the element should have autocomplete enabled.
func (e *HTMLForm) AutoComplete(v bool) *HTMLForm {
	s := "off"
	if v {
		s = "on"
	}

	e.elem.setAttribute("autocomplete", s)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLForm) Class(v string) *HTMLForm {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLForm) ContentEditable(v bool) *HTMLForm {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLForm) DataSet(k, v string) *HTMLForm {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLForm) Dir(v string) *HTMLForm {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLForm) Draggable(v bool) *HTMLForm {
	e.elem.setAttribute("draggable", v)
	return e
}

// EncType specifies how the form-data should be encoded when submitting it to the server (only for post method).
func (e *HTMLForm) EncType(v string) *HTMLForm {
	e.elem.setAttribute("enctype", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLForm) Hidden(v bool) *HTMLForm {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLForm) ID(v string) *HTMLForm {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLForm) Lang(v string) *HTMLForm {
	e.elem.setAttribute("lang", v)
	return e
}

// Method specifies the HTTP method to use when sending form-data.
func (e *HTMLForm) Method(v string) *HTMLForm {
	e.elem.setAttribute("method", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLForm) Name(v string) *HTMLForm {
	e.elem.setAttribute("name", v)
	return e
}

// NoValidate specifies that the form should not be validated when submitted.
func (e *HTMLForm) NoValidate(v bool) *HTMLForm {
	e.elem.setAttribute("novalidate", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLForm) Spellcheck(v bool) *HTMLForm {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLForm) Style(v string) *HTMLForm {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLForm) TabIndex(v int) *HTMLForm {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Target specifies the target for where to open the linked document or where to submit the form.
func (e *HTMLForm) Target(v string) *HTMLForm {
	e.elem.setAttribute("target", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLForm) Title(v string) *HTMLForm {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLForm) OnBlur(h EventHandler) *HTMLForm {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLForm) OnChange(h EventHandler) *HTMLForm {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLForm) OnClick(h EventHandler) *HTMLForm {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLForm) OnContextMenu(h EventHandler) *HTMLForm {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLForm) OnCopy(h EventHandler) *HTMLForm {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLForm) OnCut(h EventHandler) *HTMLForm {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLForm) OnDblClick(h EventHandler) *HTMLForm {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLForm) OnDrag(h EventHandler) *HTMLForm {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLForm) OnDragEnd(h EventHandler) *HTMLForm {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLForm) OnDragEnter(h EventHandler) *HTMLForm {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLForm) OnDragLeave(h EventHandler) *HTMLForm {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLForm) OnDragOver(h EventHandler) *HTMLForm {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLForm) OnDragStart(h EventHandler) *HTMLForm {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLForm) OnDrop(h EventHandler) *HTMLForm {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLForm) OnFocus(h EventHandler) *HTMLForm {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLForm) OnInput(h EventHandler) *HTMLForm {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLForm) OnInvalid(h EventHandler) *HTMLForm {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLForm) OnKeyDown(h EventHandler) *HTMLForm {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLForm) OnKeyPress(h EventHandler) *HTMLForm {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLForm) OnKeyup(h EventHandler) *HTMLForm {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLForm) OnMouseDown(h EventHandler) *HTMLForm {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLForm) OnMouseMove(h EventHandler) *HTMLForm {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLForm) OnMouseOut(h EventHandler) *HTMLForm {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLForm) OnMouseOver(h EventHandler) *HTMLForm {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLForm) OnMouseUp(h EventHandler) *HTMLForm {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLForm) OnPaste(h EventHandler) *HTMLForm {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLForm) OnReset(h EventHandler) *HTMLForm {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLForm) OnScroll(h EventHandler) *HTMLForm {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLForm) OnSearch(h EventHandler) *HTMLForm {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLForm) OnSelect(h EventHandler) *HTMLForm {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLForm) OnSubmit(h EventHandler) *HTMLForm {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLForm) OnWheel(h EventHandler) *HTMLForm {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLForm) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLH1 represents an HTML element <h1>.
type HTMLH1 struct {
	elem
}

// H1 returns an HTML element that defines HTML heading.
func H1() *HTMLH1 {
	return &HTMLH1{
		elem: elem{
			tag:         "h1",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLH1) Body(nodes ...Node) *HTMLH1 {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLH1) AccessKey(v string) *HTMLH1 {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLH1) Class(v string) *HTMLH1 {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLH1) ContentEditable(v bool) *HTMLH1 {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLH1) DataSet(k, v string) *HTMLH1 {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLH1) Dir(v string) *HTMLH1 {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLH1) Draggable(v bool) *HTMLH1 {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLH1) Hidden(v bool) *HTMLH1 {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLH1) ID(v string) *HTMLH1 {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLH1) Lang(v string) *HTMLH1 {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLH1) Spellcheck(v bool) *HTMLH1 {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLH1) Style(v string) *HTMLH1 {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLH1) TabIndex(v int) *HTMLH1 {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLH1) Title(v string) *HTMLH1 {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLH1) OnBlur(h EventHandler) *HTMLH1 {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLH1) OnChange(h EventHandler) *HTMLH1 {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLH1) OnClick(h EventHandler) *HTMLH1 {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLH1) OnContextMenu(h EventHandler) *HTMLH1 {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLH1) OnCopy(h EventHandler) *HTMLH1 {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLH1) OnCut(h EventHandler) *HTMLH1 {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLH1) OnDblClick(h EventHandler) *HTMLH1 {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLH1) OnDrag(h EventHandler) *HTMLH1 {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLH1) OnDragEnd(h EventHandler) *HTMLH1 {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLH1) OnDragEnter(h EventHandler) *HTMLH1 {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLH1) OnDragLeave(h EventHandler) *HTMLH1 {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLH1) OnDragOver(h EventHandler) *HTMLH1 {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLH1) OnDragStart(h EventHandler) *HTMLH1 {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLH1) OnDrop(h EventHandler) *HTMLH1 {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLH1) OnFocus(h EventHandler) *HTMLH1 {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLH1) OnInput(h EventHandler) *HTMLH1 {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLH1) OnInvalid(h EventHandler) *HTMLH1 {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLH1) OnKeyDown(h EventHandler) *HTMLH1 {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLH1) OnKeyPress(h EventHandler) *HTMLH1 {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLH1) OnKeyup(h EventHandler) *HTMLH1 {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLH1) OnMouseDown(h EventHandler) *HTMLH1 {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLH1) OnMouseMove(h EventHandler) *HTMLH1 {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLH1) OnMouseOut(h EventHandler) *HTMLH1 {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLH1) OnMouseOver(h EventHandler) *HTMLH1 {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLH1) OnMouseUp(h EventHandler) *HTMLH1 {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLH1) OnPaste(h EventHandler) *HTMLH1 {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLH1) OnReset(h EventHandler) *HTMLH1 {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLH1) OnScroll(h EventHandler) *HTMLH1 {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLH1) OnSearch(h EventHandler) *HTMLH1 {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLH1) OnSelect(h EventHandler) *HTMLH1 {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLH1) OnSubmit(h EventHandler) *HTMLH1 {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLH1) OnWheel(h EventHandler) *HTMLH1 {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLH1) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLH2 represents an HTML element <h2>.
type HTMLH2 struct {
	elem
}

// H2 returns an HTML element that defines HTML heading.
func H2() *HTMLH2 {
	return &HTMLH2{
		elem: elem{
			tag:         "h2",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLH2) Body(nodes ...Node) *HTMLH2 {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLH2) AccessKey(v string) *HTMLH2 {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLH2) Class(v string) *HTMLH2 {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLH2) ContentEditable(v bool) *HTMLH2 {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLH2) DataSet(k, v string) *HTMLH2 {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLH2) Dir(v string) *HTMLH2 {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLH2) Draggable(v bool) *HTMLH2 {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLH2) Hidden(v bool) *HTMLH2 {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLH2) ID(v string) *HTMLH2 {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLH2) Lang(v string) *HTMLH2 {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLH2) Spellcheck(v bool) *HTMLH2 {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLH2) Style(v string) *HTMLH2 {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLH2) TabIndex(v int) *HTMLH2 {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLH2) Title(v string) *HTMLH2 {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLH2) OnBlur(h EventHandler) *HTMLH2 {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLH2) OnChange(h EventHandler) *HTMLH2 {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLH2) OnClick(h EventHandler) *HTMLH2 {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLH2) OnContextMenu(h EventHandler) *HTMLH2 {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLH2) OnCopy(h EventHandler) *HTMLH2 {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLH2) OnCut(h EventHandler) *HTMLH2 {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLH2) OnDblClick(h EventHandler) *HTMLH2 {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLH2) OnDrag(h EventHandler) *HTMLH2 {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLH2) OnDragEnd(h EventHandler) *HTMLH2 {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLH2) OnDragEnter(h EventHandler) *HTMLH2 {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLH2) OnDragLeave(h EventHandler) *HTMLH2 {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLH2) OnDragOver(h EventHandler) *HTMLH2 {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLH2) OnDragStart(h EventHandler) *HTMLH2 {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLH2) OnDrop(h EventHandler) *HTMLH2 {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLH2) OnFocus(h EventHandler) *HTMLH2 {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLH2) OnInput(h EventHandler) *HTMLH2 {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLH2) OnInvalid(h EventHandler) *HTMLH2 {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLH2) OnKeyDown(h EventHandler) *HTMLH2 {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLH2) OnKeyPress(h EventHandler) *HTMLH2 {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLH2) OnKeyup(h EventHandler) *HTMLH2 {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLH2) OnMouseDown(h EventHandler) *HTMLH2 {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLH2) OnMouseMove(h EventHandler) *HTMLH2 {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLH2) OnMouseOut(h EventHandler) *HTMLH2 {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLH2) OnMouseOver(h EventHandler) *HTMLH2 {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLH2) OnMouseUp(h EventHandler) *HTMLH2 {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLH2) OnPaste(h EventHandler) *HTMLH2 {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLH2) OnReset(h EventHandler) *HTMLH2 {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLH2) OnScroll(h EventHandler) *HTMLH2 {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLH2) OnSearch(h EventHandler) *HTMLH2 {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLH2) OnSelect(h EventHandler) *HTMLH2 {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLH2) OnSubmit(h EventHandler) *HTMLH2 {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLH2) OnWheel(h EventHandler) *HTMLH2 {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLH2) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLH3 represents an HTML element <h3>.
type HTMLH3 struct {
	elem
}

// H3 returns an HTML element that defines HTML heading.
func H3() *HTMLH3 {
	return &HTMLH3{
		elem: elem{
			tag:         "h3",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLH3) Body(nodes ...Node) *HTMLH3 {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLH3) AccessKey(v string) *HTMLH3 {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLH3) Class(v string) *HTMLH3 {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLH3) ContentEditable(v bool) *HTMLH3 {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLH3) DataSet(k, v string) *HTMLH3 {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLH3) Dir(v string) *HTMLH3 {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLH3) Draggable(v bool) *HTMLH3 {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLH3) Hidden(v bool) *HTMLH3 {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLH3) ID(v string) *HTMLH3 {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLH3) Lang(v string) *HTMLH3 {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLH3) Spellcheck(v bool) *HTMLH3 {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLH3) Style(v string) *HTMLH3 {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLH3) TabIndex(v int) *HTMLH3 {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLH3) Title(v string) *HTMLH3 {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLH3) OnBlur(h EventHandler) *HTMLH3 {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLH3) OnChange(h EventHandler) *HTMLH3 {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLH3) OnClick(h EventHandler) *HTMLH3 {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLH3) OnContextMenu(h EventHandler) *HTMLH3 {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLH3) OnCopy(h EventHandler) *HTMLH3 {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLH3) OnCut(h EventHandler) *HTMLH3 {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLH3) OnDblClick(h EventHandler) *HTMLH3 {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLH3) OnDrag(h EventHandler) *HTMLH3 {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLH3) OnDragEnd(h EventHandler) *HTMLH3 {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLH3) OnDragEnter(h EventHandler) *HTMLH3 {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLH3) OnDragLeave(h EventHandler) *HTMLH3 {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLH3) OnDragOver(h EventHandler) *HTMLH3 {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLH3) OnDragStart(h EventHandler) *HTMLH3 {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLH3) OnDrop(h EventHandler) *HTMLH3 {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLH3) OnFocus(h EventHandler) *HTMLH3 {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLH3) OnInput(h EventHandler) *HTMLH3 {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLH3) OnInvalid(h EventHandler) *HTMLH3 {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLH3) OnKeyDown(h EventHandler) *HTMLH3 {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLH3) OnKeyPress(h EventHandler) *HTMLH3 {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLH3) OnKeyup(h EventHandler) *HTMLH3 {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLH3) OnMouseDown(h EventHandler) *HTMLH3 {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLH3) OnMouseMove(h EventHandler) *HTMLH3 {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLH3) OnMouseOut(h EventHandler) *HTMLH3 {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLH3) OnMouseOver(h EventHandler) *HTMLH3 {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLH3) OnMouseUp(h EventHandler) *HTMLH3 {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLH3) OnPaste(h EventHandler) *HTMLH3 {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLH3) OnReset(h EventHandler) *HTMLH3 {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLH3) OnScroll(h EventHandler) *HTMLH3 {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLH3) OnSearch(h EventHandler) *HTMLH3 {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLH3) OnSelect(h EventHandler) *HTMLH3 {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLH3) OnSubmit(h EventHandler) *HTMLH3 {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLH3) OnWheel(h EventHandler) *HTMLH3 {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLH3) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLH4 represents an HTML element <h4>.
type HTMLH4 struct {
	elem
}

// H4 returns an HTML element that defines HTML heading.
func H4() *HTMLH4 {
	return &HTMLH4{
		elem: elem{
			tag:         "h4",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLH4) Body(nodes ...Node) *HTMLH4 {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLH4) AccessKey(v string) *HTMLH4 {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLH4) Class(v string) *HTMLH4 {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLH4) ContentEditable(v bool) *HTMLH4 {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLH4) DataSet(k, v string) *HTMLH4 {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLH4) Dir(v string) *HTMLH4 {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLH4) Draggable(v bool) *HTMLH4 {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLH4) Hidden(v bool) *HTMLH4 {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLH4) ID(v string) *HTMLH4 {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLH4) Lang(v string) *HTMLH4 {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLH4) Spellcheck(v bool) *HTMLH4 {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLH4) Style(v string) *HTMLH4 {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLH4) TabIndex(v int) *HTMLH4 {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLH4) Title(v string) *HTMLH4 {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLH4) OnBlur(h EventHandler) *HTMLH4 {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLH4) OnChange(h EventHandler) *HTMLH4 {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLH4) OnClick(h EventHandler) *HTMLH4 {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLH4) OnContextMenu(h EventHandler) *HTMLH4 {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLH4) OnCopy(h EventHandler) *HTMLH4 {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLH4) OnCut(h EventHandler) *HTMLH4 {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLH4) OnDblClick(h EventHandler) *HTMLH4 {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLH4) OnDrag(h EventHandler) *HTMLH4 {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLH4) OnDragEnd(h EventHandler) *HTMLH4 {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLH4) OnDragEnter(h EventHandler) *HTMLH4 {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLH4) OnDragLeave(h EventHandler) *HTMLH4 {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLH4) OnDragOver(h EventHandler) *HTMLH4 {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLH4) OnDragStart(h EventHandler) *HTMLH4 {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLH4) OnDrop(h EventHandler) *HTMLH4 {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLH4) OnFocus(h EventHandler) *HTMLH4 {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLH4) OnInput(h EventHandler) *HTMLH4 {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLH4) OnInvalid(h EventHandler) *HTMLH4 {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLH4) OnKeyDown(h EventHandler) *HTMLH4 {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLH4) OnKeyPress(h EventHandler) *HTMLH4 {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLH4) OnKeyup(h EventHandler) *HTMLH4 {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLH4) OnMouseDown(h EventHandler) *HTMLH4 {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLH4) OnMouseMove(h EventHandler) *HTMLH4 {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLH4) OnMouseOut(h EventHandler) *HTMLH4 {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLH4) OnMouseOver(h EventHandler) *HTMLH4 {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLH4) OnMouseUp(h EventHandler) *HTMLH4 {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLH4) OnPaste(h EventHandler) *HTMLH4 {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLH4) OnReset(h EventHandler) *HTMLH4 {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLH4) OnScroll(h EventHandler) *HTMLH4 {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLH4) OnSearch(h EventHandler) *HTMLH4 {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLH4) OnSelect(h EventHandler) *HTMLH4 {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLH4) OnSubmit(h EventHandler) *HTMLH4 {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLH4) OnWheel(h EventHandler) *HTMLH4 {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLH4) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLH5 represents an HTML element <h5>.
type HTMLH5 struct {
	elem
}

// H5 returns an HTML element that defines HTML heading.
func H5() *HTMLH5 {
	return &HTMLH5{
		elem: elem{
			tag:         "h5",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLH5) Body(nodes ...Node) *HTMLH5 {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLH5) AccessKey(v string) *HTMLH5 {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLH5) Class(v string) *HTMLH5 {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLH5) ContentEditable(v bool) *HTMLH5 {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLH5) DataSet(k, v string) *HTMLH5 {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLH5) Dir(v string) *HTMLH5 {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLH5) Draggable(v bool) *HTMLH5 {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLH5) Hidden(v bool) *HTMLH5 {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLH5) ID(v string) *HTMLH5 {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLH5) Lang(v string) *HTMLH5 {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLH5) Spellcheck(v bool) *HTMLH5 {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLH5) Style(v string) *HTMLH5 {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLH5) TabIndex(v int) *HTMLH5 {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLH5) Title(v string) *HTMLH5 {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLH5) OnBlur(h EventHandler) *HTMLH5 {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLH5) OnChange(h EventHandler) *HTMLH5 {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLH5) OnClick(h EventHandler) *HTMLH5 {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLH5) OnContextMenu(h EventHandler) *HTMLH5 {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLH5) OnCopy(h EventHandler) *HTMLH5 {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLH5) OnCut(h EventHandler) *HTMLH5 {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLH5) OnDblClick(h EventHandler) *HTMLH5 {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLH5) OnDrag(h EventHandler) *HTMLH5 {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLH5) OnDragEnd(h EventHandler) *HTMLH5 {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLH5) OnDragEnter(h EventHandler) *HTMLH5 {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLH5) OnDragLeave(h EventHandler) *HTMLH5 {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLH5) OnDragOver(h EventHandler) *HTMLH5 {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLH5) OnDragStart(h EventHandler) *HTMLH5 {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLH5) OnDrop(h EventHandler) *HTMLH5 {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLH5) OnFocus(h EventHandler) *HTMLH5 {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLH5) OnInput(h EventHandler) *HTMLH5 {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLH5) OnInvalid(h EventHandler) *HTMLH5 {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLH5) OnKeyDown(h EventHandler) *HTMLH5 {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLH5) OnKeyPress(h EventHandler) *HTMLH5 {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLH5) OnKeyup(h EventHandler) *HTMLH5 {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLH5) OnMouseDown(h EventHandler) *HTMLH5 {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLH5) OnMouseMove(h EventHandler) *HTMLH5 {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLH5) OnMouseOut(h EventHandler) *HTMLH5 {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLH5) OnMouseOver(h EventHandler) *HTMLH5 {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLH5) OnMouseUp(h EventHandler) *HTMLH5 {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLH5) OnPaste(h EventHandler) *HTMLH5 {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLH5) OnReset(h EventHandler) *HTMLH5 {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLH5) OnScroll(h EventHandler) *HTMLH5 {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLH5) OnSearch(h EventHandler) *HTMLH5 {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLH5) OnSelect(h EventHandler) *HTMLH5 {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLH5) OnSubmit(h EventHandler) *HTMLH5 {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLH5) OnWheel(h EventHandler) *HTMLH5 {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLH5) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLH6 represents an HTML element <h6>.
type HTMLH6 struct {
	elem
}

// H6 returns an HTML element that defines HTML heading.
func H6() *HTMLH6 {
	return &HTMLH6{
		elem: elem{
			tag:         "h6",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLH6) Body(nodes ...Node) *HTMLH6 {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLH6) AccessKey(v string) *HTMLH6 {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLH6) Class(v string) *HTMLH6 {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLH6) ContentEditable(v bool) *HTMLH6 {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLH6) DataSet(k, v string) *HTMLH6 {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLH6) Dir(v string) *HTMLH6 {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLH6) Draggable(v bool) *HTMLH6 {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLH6) Hidden(v bool) *HTMLH6 {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLH6) ID(v string) *HTMLH6 {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLH6) Lang(v string) *HTMLH6 {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLH6) Spellcheck(v bool) *HTMLH6 {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLH6) Style(v string) *HTMLH6 {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLH6) TabIndex(v int) *HTMLH6 {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLH6) Title(v string) *HTMLH6 {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLH6) OnBlur(h EventHandler) *HTMLH6 {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLH6) OnChange(h EventHandler) *HTMLH6 {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLH6) OnClick(h EventHandler) *HTMLH6 {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLH6) OnContextMenu(h EventHandler) *HTMLH6 {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLH6) OnCopy(h EventHandler) *HTMLH6 {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLH6) OnCut(h EventHandler) *HTMLH6 {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLH6) OnDblClick(h EventHandler) *HTMLH6 {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLH6) OnDrag(h EventHandler) *HTMLH6 {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLH6) OnDragEnd(h EventHandler) *HTMLH6 {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLH6) OnDragEnter(h EventHandler) *HTMLH6 {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLH6) OnDragLeave(h EventHandler) *HTMLH6 {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLH6) OnDragOver(h EventHandler) *HTMLH6 {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLH6) OnDragStart(h EventHandler) *HTMLH6 {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLH6) OnDrop(h EventHandler) *HTMLH6 {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLH6) OnFocus(h EventHandler) *HTMLH6 {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLH6) OnInput(h EventHandler) *HTMLH6 {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLH6) OnInvalid(h EventHandler) *HTMLH6 {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLH6) OnKeyDown(h EventHandler) *HTMLH6 {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLH6) OnKeyPress(h EventHandler) *HTMLH6 {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLH6) OnKeyup(h EventHandler) *HTMLH6 {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLH6) OnMouseDown(h EventHandler) *HTMLH6 {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLH6) OnMouseMove(h EventHandler) *HTMLH6 {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLH6) OnMouseOut(h EventHandler) *HTMLH6 {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLH6) OnMouseOver(h EventHandler) *HTMLH6 {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLH6) OnMouseUp(h EventHandler) *HTMLH6 {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLH6) OnPaste(h EventHandler) *HTMLH6 {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLH6) OnReset(h EventHandler) *HTMLH6 {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLH6) OnScroll(h EventHandler) *HTMLH6 {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLH6) OnSearch(h EventHandler) *HTMLH6 {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLH6) OnSelect(h EventHandler) *HTMLH6 {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLH6) OnSubmit(h EventHandler) *HTMLH6 {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLH6) OnWheel(h EventHandler) *HTMLH6 {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLH6) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLHead represents an HTML element <head>.
type HTMLHead struct {
	elem
}

// Head returns an HTML element that defines information about the document.
func Head() *HTMLHead {
	return &HTMLHead{
		elem: elem{
			tag:         "head",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLHead) Body(nodes ...Node) *HTMLHead {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLHead) AccessKey(v string) *HTMLHead {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLHead) Class(v string) *HTMLHead {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLHead) ContentEditable(v bool) *HTMLHead {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLHead) DataSet(k, v string) *HTMLHead {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLHead) Dir(v string) *HTMLHead {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLHead) Draggable(v bool) *HTMLHead {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLHead) Hidden(v bool) *HTMLHead {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLHead) ID(v string) *HTMLHead {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLHead) Lang(v string) *HTMLHead {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLHead) Spellcheck(v bool) *HTMLHead {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLHead) Style(v string) *HTMLHead {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLHead) TabIndex(v int) *HTMLHead {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLHead) Title(v string) *HTMLHead {
	e.elem.setAttribute("title", v)
	return e
}

func (e *HTMLHead) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLHeader represents an HTML element <header>.
type HTMLHeader struct {
	elem
}

// Header returns an HTML element that defines a header for a document or section.
func Header() *HTMLHeader {
	return &HTMLHeader{
		elem: elem{
			tag:         "header",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLHeader) Body(nodes ...Node) *HTMLHeader {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLHeader) AccessKey(v string) *HTMLHeader {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLHeader) Class(v string) *HTMLHeader {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLHeader) ContentEditable(v bool) *HTMLHeader {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLHeader) DataSet(k, v string) *HTMLHeader {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLHeader) Dir(v string) *HTMLHeader {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLHeader) Draggable(v bool) *HTMLHeader {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLHeader) Hidden(v bool) *HTMLHeader {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLHeader) ID(v string) *HTMLHeader {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLHeader) Lang(v string) *HTMLHeader {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLHeader) Spellcheck(v bool) *HTMLHeader {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLHeader) Style(v string) *HTMLHeader {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLHeader) TabIndex(v int) *HTMLHeader {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLHeader) Title(v string) *HTMLHeader {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLHeader) OnBlur(h EventHandler) *HTMLHeader {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLHeader) OnChange(h EventHandler) *HTMLHeader {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLHeader) OnClick(h EventHandler) *HTMLHeader {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLHeader) OnContextMenu(h EventHandler) *HTMLHeader {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLHeader) OnCopy(h EventHandler) *HTMLHeader {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLHeader) OnCut(h EventHandler) *HTMLHeader {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLHeader) OnDblClick(h EventHandler) *HTMLHeader {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLHeader) OnDrag(h EventHandler) *HTMLHeader {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLHeader) OnDragEnd(h EventHandler) *HTMLHeader {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLHeader) OnDragEnter(h EventHandler) *HTMLHeader {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLHeader) OnDragLeave(h EventHandler) *HTMLHeader {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLHeader) OnDragOver(h EventHandler) *HTMLHeader {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLHeader) OnDragStart(h EventHandler) *HTMLHeader {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLHeader) OnDrop(h EventHandler) *HTMLHeader {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLHeader) OnFocus(h EventHandler) *HTMLHeader {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLHeader) OnInput(h EventHandler) *HTMLHeader {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLHeader) OnInvalid(h EventHandler) *HTMLHeader {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLHeader) OnKeyDown(h EventHandler) *HTMLHeader {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLHeader) OnKeyPress(h EventHandler) *HTMLHeader {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLHeader) OnKeyup(h EventHandler) *HTMLHeader {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLHeader) OnMouseDown(h EventHandler) *HTMLHeader {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLHeader) OnMouseMove(h EventHandler) *HTMLHeader {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLHeader) OnMouseOut(h EventHandler) *HTMLHeader {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLHeader) OnMouseOver(h EventHandler) *HTMLHeader {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLHeader) OnMouseUp(h EventHandler) *HTMLHeader {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLHeader) OnPaste(h EventHandler) *HTMLHeader {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLHeader) OnReset(h EventHandler) *HTMLHeader {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLHeader) OnScroll(h EventHandler) *HTMLHeader {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLHeader) OnSearch(h EventHandler) *HTMLHeader {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLHeader) OnSelect(h EventHandler) *HTMLHeader {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLHeader) OnSubmit(h EventHandler) *HTMLHeader {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLHeader) OnWheel(h EventHandler) *HTMLHeader {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLHeader) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLHr represents an HTML element <hr>.
type HTMLHr struct {
	elem
}

// Hr returns an HTML element that defines a thematic change in the content.
func Hr() *HTMLHr {
	return &HTMLHr{
		elem: elem{
			tag:         "hr",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLHr) AccessKey(v string) *HTMLHr {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLHr) Class(v string) *HTMLHr {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLHr) ContentEditable(v bool) *HTMLHr {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLHr) DataSet(k, v string) *HTMLHr {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLHr) Dir(v string) *HTMLHr {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLHr) Draggable(v bool) *HTMLHr {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLHr) Hidden(v bool) *HTMLHr {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLHr) ID(v string) *HTMLHr {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLHr) Lang(v string) *HTMLHr {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLHr) Spellcheck(v bool) *HTMLHr {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLHr) Style(v string) *HTMLHr {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLHr) TabIndex(v int) *HTMLHr {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLHr) Title(v string) *HTMLHr {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLHr) OnBlur(h EventHandler) *HTMLHr {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLHr) OnChange(h EventHandler) *HTMLHr {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLHr) OnClick(h EventHandler) *HTMLHr {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLHr) OnContextMenu(h EventHandler) *HTMLHr {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLHr) OnCopy(h EventHandler) *HTMLHr {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLHr) OnCut(h EventHandler) *HTMLHr {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLHr) OnDblClick(h EventHandler) *HTMLHr {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLHr) OnDrag(h EventHandler) *HTMLHr {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLHr) OnDragEnd(h EventHandler) *HTMLHr {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLHr) OnDragEnter(h EventHandler) *HTMLHr {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLHr) OnDragLeave(h EventHandler) *HTMLHr {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLHr) OnDragOver(h EventHandler) *HTMLHr {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLHr) OnDragStart(h EventHandler) *HTMLHr {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLHr) OnDrop(h EventHandler) *HTMLHr {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLHr) OnFocus(h EventHandler) *HTMLHr {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLHr) OnInput(h EventHandler) *HTMLHr {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLHr) OnInvalid(h EventHandler) *HTMLHr {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLHr) OnKeyDown(h EventHandler) *HTMLHr {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLHr) OnKeyPress(h EventHandler) *HTMLHr {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLHr) OnKeyup(h EventHandler) *HTMLHr {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLHr) OnMouseDown(h EventHandler) *HTMLHr {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLHr) OnMouseMove(h EventHandler) *HTMLHr {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLHr) OnMouseOut(h EventHandler) *HTMLHr {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLHr) OnMouseOver(h EventHandler) *HTMLHr {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLHr) OnMouseUp(h EventHandler) *HTMLHr {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLHr) OnPaste(h EventHandler) *HTMLHr {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLHr) OnReset(h EventHandler) *HTMLHr {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLHr) OnScroll(h EventHandler) *HTMLHr {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLHr) OnSearch(h EventHandler) *HTMLHr {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLHr) OnSelect(h EventHandler) *HTMLHr {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLHr) OnSubmit(h EventHandler) *HTMLHr {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLHr) OnWheel(h EventHandler) *HTMLHr {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLHr) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLHtml represents an HTML element <html>.
type HTMLHtml struct {
	elem
}

// Html returns an HTML element that defines the root of an HTML document.
func Html() *HTMLHtml {
	return &HTMLHtml{
		elem: elem{
			tag:         "html",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLHtml) Body(nodes ...Node) *HTMLHtml {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLHtml) AccessKey(v string) *HTMLHtml {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLHtml) Class(v string) *HTMLHtml {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLHtml) ContentEditable(v bool) *HTMLHtml {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLHtml) DataSet(k, v string) *HTMLHtml {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLHtml) Dir(v string) *HTMLHtml {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLHtml) Draggable(v bool) *HTMLHtml {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLHtml) Hidden(v bool) *HTMLHtml {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLHtml) ID(v string) *HTMLHtml {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLHtml) Lang(v string) *HTMLHtml {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLHtml) Spellcheck(v bool) *HTMLHtml {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLHtml) Style(v string) *HTMLHtml {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLHtml) TabIndex(v int) *HTMLHtml {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLHtml) Title(v string) *HTMLHtml {
	e.elem.setAttribute("title", v)
	return e
}

func (e *HTMLHtml) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLI represents an HTML element <i>.
type HTMLI struct {
	elem
}

// I returns an HTML element that defines a part of text in an alternate voice or mood.
func I() *HTMLI {
	return &HTMLI{
		elem: elem{
			tag:         "i",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLI) Body(nodes ...Node) *HTMLI {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLI) AccessKey(v string) *HTMLI {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLI) Class(v string) *HTMLI {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLI) ContentEditable(v bool) *HTMLI {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLI) DataSet(k, v string) *HTMLI {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLI) Dir(v string) *HTMLI {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLI) Draggable(v bool) *HTMLI {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLI) Hidden(v bool) *HTMLI {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLI) ID(v string) *HTMLI {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLI) Lang(v string) *HTMLI {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLI) Spellcheck(v bool) *HTMLI {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLI) Style(v string) *HTMLI {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLI) TabIndex(v int) *HTMLI {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLI) Title(v string) *HTMLI {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLI) OnBlur(h EventHandler) *HTMLI {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLI) OnChange(h EventHandler) *HTMLI {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLI) OnClick(h EventHandler) *HTMLI {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLI) OnContextMenu(h EventHandler) *HTMLI {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLI) OnCopy(h EventHandler) *HTMLI {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLI) OnCut(h EventHandler) *HTMLI {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLI) OnDblClick(h EventHandler) *HTMLI {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLI) OnDrag(h EventHandler) *HTMLI {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLI) OnDragEnd(h EventHandler) *HTMLI {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLI) OnDragEnter(h EventHandler) *HTMLI {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLI) OnDragLeave(h EventHandler) *HTMLI {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLI) OnDragOver(h EventHandler) *HTMLI {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLI) OnDragStart(h EventHandler) *HTMLI {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLI) OnDrop(h EventHandler) *HTMLI {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLI) OnFocus(h EventHandler) *HTMLI {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLI) OnInput(h EventHandler) *HTMLI {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLI) OnInvalid(h EventHandler) *HTMLI {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLI) OnKeyDown(h EventHandler) *HTMLI {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLI) OnKeyPress(h EventHandler) *HTMLI {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLI) OnKeyup(h EventHandler) *HTMLI {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLI) OnMouseDown(h EventHandler) *HTMLI {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLI) OnMouseMove(h EventHandler) *HTMLI {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLI) OnMouseOut(h EventHandler) *HTMLI {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLI) OnMouseOver(h EventHandler) *HTMLI {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLI) OnMouseUp(h EventHandler) *HTMLI {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLI) OnPaste(h EventHandler) *HTMLI {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLI) OnReset(h EventHandler) *HTMLI {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLI) OnScroll(h EventHandler) *HTMLI {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLI) OnSearch(h EventHandler) *HTMLI {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLI) OnSelect(h EventHandler) *HTMLI {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLI) OnSubmit(h EventHandler) *HTMLI {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLI) OnWheel(h EventHandler) *HTMLI {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLI) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLIFrame represents an HTML element <iframe>.
type HTMLIFrame struct {
	elem
}

// IFrame returns an HTML element that defines an inline frame.
func IFrame() *HTMLIFrame {
	return &HTMLIFrame{
		elem: elem{
			tag:         "iframe",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLIFrame) Body(nodes ...Node) *HTMLIFrame {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLIFrame) AccessKey(v string) *HTMLIFrame {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLIFrame) Class(v string) *HTMLIFrame {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLIFrame) ContentEditable(v bool) *HTMLIFrame {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLIFrame) DataSet(k, v string) *HTMLIFrame {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLIFrame) Dir(v string) *HTMLIFrame {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLIFrame) Draggable(v bool) *HTMLIFrame {
	e.elem.setAttribute("draggable", v)
	return e
}

// Height specifies the height of the element (in pixels).
func (e *HTMLIFrame) Height(v int) *HTMLIFrame {
	e.elem.setAttribute("height", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLIFrame) Hidden(v bool) *HTMLIFrame {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLIFrame) ID(v string) *HTMLIFrame {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLIFrame) Lang(v string) *HTMLIFrame {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLIFrame) Name(v string) *HTMLIFrame {
	e.elem.setAttribute("name", v)
	return e
}

// Sandbox enables an extra set of restrictions for the content in an iframe.
func (e *HTMLIFrame) Sandbox(v bool) *HTMLIFrame {
	e.elem.setAttribute("sandbox", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLIFrame) Spellcheck(v bool) *HTMLIFrame {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLIFrame) Src(v string) *HTMLIFrame {
	e.elem.setAttribute("src", v)
	return e
}

// SrcDoc specifies the HTML content of the page to show in the iframe.
func (e *HTMLIFrame) SrcDoc(v string) *HTMLIFrame {
	e.elem.setAttribute("srcdoc", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLIFrame) Style(v string) *HTMLIFrame {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLIFrame) TabIndex(v int) *HTMLIFrame {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLIFrame) Title(v string) *HTMLIFrame {
	e.elem.setAttribute("title", v)
	return e
}

// Width specifies the width of the element.
func (e *HTMLIFrame) Width(v int) *HTMLIFrame {
	e.elem.setAttribute("width", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLIFrame) OnBlur(h EventHandler) *HTMLIFrame {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLIFrame) OnChange(h EventHandler) *HTMLIFrame {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLIFrame) OnClick(h EventHandler) *HTMLIFrame {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLIFrame) OnContextMenu(h EventHandler) *HTMLIFrame {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLIFrame) OnCopy(h EventHandler) *HTMLIFrame {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLIFrame) OnCut(h EventHandler) *HTMLIFrame {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLIFrame) OnDblClick(h EventHandler) *HTMLIFrame {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLIFrame) OnDrag(h EventHandler) *HTMLIFrame {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLIFrame) OnDragEnd(h EventHandler) *HTMLIFrame {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLIFrame) OnDragEnter(h EventHandler) *HTMLIFrame {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLIFrame) OnDragLeave(h EventHandler) *HTMLIFrame {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLIFrame) OnDragOver(h EventHandler) *HTMLIFrame {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLIFrame) OnDragStart(h EventHandler) *HTMLIFrame {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLIFrame) OnDrop(h EventHandler) *HTMLIFrame {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLIFrame) OnFocus(h EventHandler) *HTMLIFrame {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLIFrame) OnInput(h EventHandler) *HTMLIFrame {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLIFrame) OnInvalid(h EventHandler) *HTMLIFrame {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLIFrame) OnKeyDown(h EventHandler) *HTMLIFrame {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLIFrame) OnKeyPress(h EventHandler) *HTMLIFrame {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLIFrame) OnKeyup(h EventHandler) *HTMLIFrame {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLIFrame) OnMouseDown(h EventHandler) *HTMLIFrame {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLIFrame) OnMouseMove(h EventHandler) *HTMLIFrame {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLIFrame) OnMouseOut(h EventHandler) *HTMLIFrame {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLIFrame) OnMouseOver(h EventHandler) *HTMLIFrame {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLIFrame) OnMouseUp(h EventHandler) *HTMLIFrame {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLIFrame) OnPaste(h EventHandler) *HTMLIFrame {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLIFrame) OnReset(h EventHandler) *HTMLIFrame {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLIFrame) OnScroll(h EventHandler) *HTMLIFrame {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLIFrame) OnSearch(h EventHandler) *HTMLIFrame {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLIFrame) OnSelect(h EventHandler) *HTMLIFrame {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLIFrame) OnSubmit(h EventHandler) *HTMLIFrame {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLIFrame) OnWheel(h EventHandler) *HTMLIFrame {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLIFrame) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLImg represents an HTML element <img>.
type HTMLImg struct {
	elem
}

// Img returns an HTML element that defines an image.
func Img() *HTMLImg {
	return &HTMLImg{
		elem: elem{
			tag:         "img",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLImg) AccessKey(v string) *HTMLImg {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Alt specifies an alternate text when the original element fails to display.
func (e *HTMLImg) Alt(v string) *HTMLImg {
	e.elem.setAttribute("alt", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLImg) Class(v string) *HTMLImg {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLImg) ContentEditable(v bool) *HTMLImg {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLImg) DataSet(k, v string) *HTMLImg {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLImg) Dir(v string) *HTMLImg {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLImg) Draggable(v bool) *HTMLImg {
	e.elem.setAttribute("draggable", v)
	return e
}

// Height specifies the height of the element (in pixels).
func (e *HTMLImg) Height(v int) *HTMLImg {
	e.elem.setAttribute("height", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLImg) Hidden(v bool) *HTMLImg {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLImg) ID(v string) *HTMLImg {
	e.elem.setAttribute("id", v)
	return e
}

// IsMap specifies an image as a server-side image-map.
func (e *HTMLImg) IsMap(v bool) *HTMLImg {
	e.elem.setAttribute("ismap", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLImg) Lang(v string) *HTMLImg {
	e.elem.setAttribute("lang", v)
	return e
}

// Sizes specifies the size of the linked resource.
func (e *HTMLImg) Sizes(v string) *HTMLImg {
	e.elem.setAttribute("sizes", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLImg) Spellcheck(v bool) *HTMLImg {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLImg) Src(v string) *HTMLImg {
	e.elem.setAttribute("src", v)
	return e
}

// SrcSet specifies the URL of the image to use in different situations.
func (e *HTMLImg) SrcSet(v string) *HTMLImg {
	e.elem.setAttribute("srcset", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLImg) Style(v string) *HTMLImg {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLImg) TabIndex(v int) *HTMLImg {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLImg) Title(v string) *HTMLImg {
	e.elem.setAttribute("title", v)
	return e
}

// UseMap specifies an image as a client-side image-map.
func (e *HTMLImg) UseMap(v string) *HTMLImg {
	e.elem.setAttribute("usemap", v)
	return e
}

// Width specifies the width of the element.
func (e *HTMLImg) Width(v int) *HTMLImg {
	e.elem.setAttribute("width", v)
	return e
}

// OnAbort calls the given handler on abort.
func (e *HTMLImg) OnAbort(h EventHandler) *HTMLImg {
	e.setEventHandler("abort", h)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLImg) OnBlur(h EventHandler) *HTMLImg {
	e.setEventHandler("blur", h)
	return e
}

// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
func (e *HTMLImg) OnCanPlay(h EventHandler) *HTMLImg {
	e.setEventHandler("canplay", h)
	return e
}

// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
func (e *HTMLImg) OnCanPlayThrough(h EventHandler) *HTMLImg {
	e.setEventHandler("canplaythrough", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLImg) OnChange(h EventHandler) *HTMLImg {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLImg) OnClick(h EventHandler) *HTMLImg {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLImg) OnContextMenu(h EventHandler) *HTMLImg {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLImg) OnCopy(h EventHandler) *HTMLImg {
	e.setEventHandler("copy", h)
	return e
}

// OnCueChange calls the given handler when the cue changes in a track element.
func (e *HTMLImg) OnCueChange(h EventHandler) *HTMLImg {
	e.setEventHandler("cuechange", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLImg) OnCut(h EventHandler) *HTMLImg {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLImg) OnDblClick(h EventHandler) *HTMLImg {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLImg) OnDrag(h EventHandler) *HTMLImg {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLImg) OnDragEnd(h EventHandler) *HTMLImg {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLImg) OnDragEnter(h EventHandler) *HTMLImg {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLImg) OnDragLeave(h EventHandler) *HTMLImg {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLImg) OnDragOver(h EventHandler) *HTMLImg {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLImg) OnDragStart(h EventHandler) *HTMLImg {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLImg) OnDrop(h EventHandler) *HTMLImg {
	e.setEventHandler("drop", h)
	return e
}

// OnDurationChange calls the given handler when the length of the media changes.
func (e *HTMLImg) OnDurationChange(h EventHandler) *HTMLImg {
	e.setEventHandler("durationchange", h)
	return e
}

// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
func (e *HTMLImg) OnEmptied(h EventHandler) *HTMLImg {
	e.setEventHandler("emptied", h)
	return e
}

// OnEnded calls the given handler when the media has reach the end.
func (e *HTMLImg) OnEnded(h EventHandler) *HTMLImg {
	e.setEventHandler("ended", h)
	return e
}

// OnError calls the given handler when an error occurs.
func (e *HTMLImg) OnError(h EventHandler) *HTMLImg {
	e.setEventHandler("error", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLImg) OnFocus(h EventHandler) *HTMLImg {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLImg) OnInput(h EventHandler) *HTMLImg {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLImg) OnInvalid(h EventHandler) *HTMLImg {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLImg) OnKeyDown(h EventHandler) *HTMLImg {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLImg) OnKeyPress(h EventHandler) *HTMLImg {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLImg) OnKeyup(h EventHandler) *HTMLImg {
	e.setEventHandler("keyup", h)
	return e
}

// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
func (e *HTMLImg) OnLoadStart(h EventHandler) *HTMLImg {
	e.setEventHandler("loadstart", h)
	return e
}

// OnLoadedData calls the given handler when media data is loaded.
func (e *HTMLImg) OnLoadedData(h EventHandler) *HTMLImg {
	e.setEventHandler("loadeddata", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLImg) OnMouseDown(h EventHandler) *HTMLImg {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLImg) OnMouseMove(h EventHandler) *HTMLImg {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLImg) OnMouseOut(h EventHandler) *HTMLImg {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLImg) OnMouseOver(h EventHandler) *HTMLImg {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLImg) OnMouseUp(h EventHandler) *HTMLImg {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLImg) OnPaste(h EventHandler) *HTMLImg {
	e.setEventHandler("paste", h)
	return e
}

// OnPause calls the given handler when the media is paused either by the user or programmatically.
func (e *HTMLImg) OnPause(h EventHandler) *HTMLImg {
	e.setEventHandler("pause", h)
	return e
}

// OnPlay calls the given handler when the media is ready to start playing.
func (e *HTMLImg) OnPlay(h EventHandler) *HTMLImg {
	e.setEventHandler("play", h)
	return e
}

// OnPlaying calls the given handler when the media actually has started playing.
func (e *HTMLImg) OnPlaying(h EventHandler) *HTMLImg {
	e.setEventHandler("playing", h)
	return e
}

// OnProgress calls the given handler when the browser is in the process of getting the media data.
func (e *HTMLImg) OnProgress(h EventHandler) *HTMLImg {
	e.setEventHandler("progress", h)
	return e
}

// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
func (e *HTMLImg) OnRateChange(h EventHandler) *HTMLImg {
	e.setEventHandler("ratechange", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLImg) OnReset(h EventHandler) *HTMLImg {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLImg) OnScroll(h EventHandler) *HTMLImg {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLImg) OnSearch(h EventHandler) *HTMLImg {
	e.setEventHandler("search", h)
	return e
}

// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
func (e *HTMLImg) OnSeeked(h EventHandler) *HTMLImg {
	e.setEventHandler("seeked", h)
	return e
}

// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
func (e *HTMLImg) OnSeeking(h EventHandler) *HTMLImg {
	e.setEventHandler("seeking", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLImg) OnSelect(h EventHandler) *HTMLImg {
	e.setEventHandler("select", h)
	return e
}

// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
func (e *HTMLImg) OnStalled(h EventHandler) *HTMLImg {
	e.setEventHandler("stalled", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLImg) OnSubmit(h EventHandler) *HTMLImg {
	e.setEventHandler("submit", h)
	return e
}

// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
func (e *HTMLImg) OnSuspend(h EventHandler) *HTMLImg {
	e.setEventHandler("suspend", h)
	return e
}

// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
func (e *HTMLImg) OnTimeUpdate(h EventHandler) *HTMLImg {
	e.setEventHandler("timeupdate", h)
	return e
}

// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
func (e *HTMLImg) OnVolumeChange(h EventHandler) *HTMLImg {
	e.setEventHandler("volumechange", h)
	return e
}

// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
func (e *HTMLImg) OnWaiting(h EventHandler) *HTMLImg {
	e.setEventHandler("waiting", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLImg) OnWheel(h EventHandler) *HTMLImg {
	e.setEventHandler("wheel", h)
	return e
}

// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
func (e *HTMLImg) OnloadedMetaData(h EventHandler) *HTMLImg {
	e.setEventHandler("loadedmetadata", h)
	return e
}

func (e *HTMLImg) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLInput represents an HTML element <input>.
type HTMLInput struct {
	elem
}

// Input returns an HTML element that defines an input control.
func Input() *HTMLInput {
	return &HTMLInput{
		elem: elem{
			tag:         "input",
			selfClosing: true,
		},
	}
}

// Accept specifies the types of files that the server accepts (only for file type).
func (e *HTMLInput) Accept(v string) *HTMLInput {
	e.elem.setAttribute("accept", v)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLInput) AccessKey(v string) *HTMLInput {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Alt specifies an alternate text when the original element fails to display.
func (e *HTMLInput) Alt(v string) *HTMLInput {
	e.elem.setAttribute("alt", v)
	return e
}

// AutoComplete specifies whether the element should have autocomplete enabled.
func (e *HTMLInput) AutoComplete(v bool) *HTMLInput {
	s := "off"
	if v {
		s = "on"
	}

	e.elem.setAttribute("autocomplete", s)
	return e
}

// AutoFocus specifies that the element should automatically get focus when the page loads.
func (e *HTMLInput) AutoFocus(v bool) *HTMLInput {
	e.elem.setAttribute("autofocus", v)
	return e
}

// Checked specifies that an input element should be pre-selected when the page loads (for checkbox or radio types).
func (e *HTMLInput) Checked(v bool) *HTMLInput {
	e.elem.setAttribute("checked", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLInput) Class(v string) *HTMLInput {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLInput) ContentEditable(v bool) *HTMLInput {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLInput) DataSet(k, v string) *HTMLInput {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLInput) Dir(v string) *HTMLInput {
	e.elem.setAttribute("dir", v)
	return e
}

// DirName specifies that the text direction will be submitted.
func (e *HTMLInput) DirName(v string) *HTMLInput {
	e.elem.setAttribute("dirname", v)
	return e
}

// Disabled specifies that the specified element/group of elements should be disabled.
func (e *HTMLInput) Disabled(v bool) *HTMLInput {
	e.elem.setAttribute("disabled", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLInput) Draggable(v bool) *HTMLInput {
	e.elem.setAttribute("draggable", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLInput) Form(v string) *HTMLInput {
	e.elem.setAttribute("form", v)
	return e
}

// FormAction specifies where to send the form-data when a form is submitted. Only for submit type.
func (e *HTMLInput) FormAction(v string) *HTMLInput {
	e.elem.setAttribute("formaction", v)
	return e
}

// FormEncType specifies how form-data should be encoded before sending it to a server. Only for submit type.
func (e *HTMLInput) FormEncType(v string) *HTMLInput {
	e.elem.setAttribute("formenctype", v)
	return e
}

// FormMethod specifies how to send the form-data (which HTTP method to use). Only for submit type.
func (e *HTMLInput) FormMethod(v string) *HTMLInput {
	e.elem.setAttribute("formmethod", v)
	return e
}

// FormNoValidate specifies that the form-data should not be validated on submission. Only for submit type.
func (e *HTMLInput) FormNoValidate(v bool) *HTMLInput {
	e.elem.setAttribute("formnovalidate", v)
	return e
}

// FormTarget specifies where to display the response after submitting the form. Only for submit type.
func (e *HTMLInput) FormTarget(v string) *HTMLInput {
	e.elem.setAttribute("formtarget", v)
	return e
}

// Height specifies the height of the element (in pixels).
func (e *HTMLInput) Height(v int) *HTMLInput {
	e.elem.setAttribute("height", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLInput) Hidden(v bool) *HTMLInput {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLInput) ID(v string) *HTMLInput {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLInput) Lang(v string) *HTMLInput {
	e.elem.setAttribute("lang", v)
	return e
}

// List refers to a datalist element that contains pre-defined options for an input element.
func (e *HTMLInput) List(v string) *HTMLInput {
	e.elem.setAttribute("list", v)
	return e
}

// Max Specifies the maximum value.
func (e *HTMLInput) Max(v string) *HTMLInput {
	e.elem.setAttribute("max", v)
	return e
}

// MaxLength specifies the maximum number of characters allowed in an element.
func (e *HTMLInput) MaxLength(v int) *HTMLInput {
	e.elem.setAttribute("maxlength", v)
	return e
}

// Min specifies a minimum value.
func (e *HTMLInput) Min(v string) *HTMLInput {
	e.elem.setAttribute("min", v)
	return e
}

// Multiple specifies that a user can enter more than one value.
func (e *HTMLInput) Multiple(v bool) *HTMLInput {
	e.elem.setAttribute("multiple", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLInput) Name(v string) *HTMLInput {
	e.elem.setAttribute("name", v)
	return e
}

// Pattern specifies a regular expression that an input element's value is checked against.
func (e *HTMLInput) Pattern(v string) *HTMLInput {
	e.elem.setAttribute("pattern", v)
	return e
}

// Placeholder specifies a short hint that describes the expected value of the element.
func (e *HTMLInput) Placeholder(v string) *HTMLInput {
	e.elem.setAttribute("placeholder", v)
	return e
}

// ReadOnly specifies that the element is read-only.
func (e *HTMLInput) ReadOnly(v bool) *HTMLInput {
	e.elem.setAttribute("readonly", v)
	return e
}

// Required specifies that the element must be filled out before submitting the form.
func (e *HTMLInput) Required(v bool) *HTMLInput {
	e.elem.setAttribute("required", v)
	return e
}

// Size specifies the width.
func (e *HTMLInput) Size(v int) *HTMLInput {
	e.elem.setAttribute("size", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLInput) Spellcheck(v bool) *HTMLInput {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLInput) Src(v string) *HTMLInput {
	e.elem.setAttribute("src", v)
	return e
}

// Step specifies the legal number intervals for an input field.
func (e *HTMLInput) Step(v int) *HTMLInput {
	e.elem.setAttribute("step", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLInput) Style(v string) *HTMLInput {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLInput) TabIndex(v int) *HTMLInput {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLInput) Title(v string) *HTMLInput {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLInput) Type(v string) *HTMLInput {
	e.elem.setAttribute("type", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLInput) Value(v interface{}) *HTMLInput {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

// Width specifies the width of the element.
func (e *HTMLInput) Width(v int) *HTMLInput {
	e.elem.setAttribute("width", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLInput) OnBlur(h EventHandler) *HTMLInput {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLInput) OnChange(h EventHandler) *HTMLInput {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLInput) OnClick(h EventHandler) *HTMLInput {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLInput) OnContextMenu(h EventHandler) *HTMLInput {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLInput) OnCopy(h EventHandler) *HTMLInput {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLInput) OnCut(h EventHandler) *HTMLInput {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLInput) OnDblClick(h EventHandler) *HTMLInput {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLInput) OnDrag(h EventHandler) *HTMLInput {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLInput) OnDragEnd(h EventHandler) *HTMLInput {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLInput) OnDragEnter(h EventHandler) *HTMLInput {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLInput) OnDragLeave(h EventHandler) *HTMLInput {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLInput) OnDragOver(h EventHandler) *HTMLInput {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLInput) OnDragStart(h EventHandler) *HTMLInput {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLInput) OnDrop(h EventHandler) *HTMLInput {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLInput) OnFocus(h EventHandler) *HTMLInput {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLInput) OnInput(h EventHandler) *HTMLInput {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLInput) OnInvalid(h EventHandler) *HTMLInput {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLInput) OnKeyDown(h EventHandler) *HTMLInput {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLInput) OnKeyPress(h EventHandler) *HTMLInput {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLInput) OnKeyup(h EventHandler) *HTMLInput {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLInput) OnMouseDown(h EventHandler) *HTMLInput {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLInput) OnMouseMove(h EventHandler) *HTMLInput {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLInput) OnMouseOut(h EventHandler) *HTMLInput {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLInput) OnMouseOver(h EventHandler) *HTMLInput {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLInput) OnMouseUp(h EventHandler) *HTMLInput {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLInput) OnPaste(h EventHandler) *HTMLInput {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLInput) OnReset(h EventHandler) *HTMLInput {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLInput) OnScroll(h EventHandler) *HTMLInput {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLInput) OnSearch(h EventHandler) *HTMLInput {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLInput) OnSelect(h EventHandler) *HTMLInput {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLInput) OnSubmit(h EventHandler) *HTMLInput {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLInput) OnWheel(h EventHandler) *HTMLInput {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLInput) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLIns represents an HTML element <ins>.
type HTMLIns struct {
	elem
}

// Ins returns an HTML element that defines a text that has been inserted into a document.
func Ins() *HTMLIns {
	return &HTMLIns{
		elem: elem{
			tag:         "ins",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLIns) Body(nodes ...Node) *HTMLIns {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLIns) AccessKey(v string) *HTMLIns {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLIns) Class(v string) *HTMLIns {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLIns) ContentEditable(v bool) *HTMLIns {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLIns) DataSet(k, v string) *HTMLIns {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLIns) Dir(v string) *HTMLIns {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLIns) Draggable(v bool) *HTMLIns {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLIns) Hidden(v bool) *HTMLIns {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLIns) ID(v string) *HTMLIns {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLIns) Lang(v string) *HTMLIns {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLIns) Spellcheck(v bool) *HTMLIns {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLIns) Style(v string) *HTMLIns {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLIns) TabIndex(v int) *HTMLIns {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLIns) Title(v string) *HTMLIns {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLIns) OnBlur(h EventHandler) *HTMLIns {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLIns) OnChange(h EventHandler) *HTMLIns {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLIns) OnClick(h EventHandler) *HTMLIns {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLIns) OnContextMenu(h EventHandler) *HTMLIns {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLIns) OnCopy(h EventHandler) *HTMLIns {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLIns) OnCut(h EventHandler) *HTMLIns {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLIns) OnDblClick(h EventHandler) *HTMLIns {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLIns) OnDrag(h EventHandler) *HTMLIns {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLIns) OnDragEnd(h EventHandler) *HTMLIns {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLIns) OnDragEnter(h EventHandler) *HTMLIns {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLIns) OnDragLeave(h EventHandler) *HTMLIns {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLIns) OnDragOver(h EventHandler) *HTMLIns {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLIns) OnDragStart(h EventHandler) *HTMLIns {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLIns) OnDrop(h EventHandler) *HTMLIns {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLIns) OnFocus(h EventHandler) *HTMLIns {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLIns) OnInput(h EventHandler) *HTMLIns {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLIns) OnInvalid(h EventHandler) *HTMLIns {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLIns) OnKeyDown(h EventHandler) *HTMLIns {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLIns) OnKeyPress(h EventHandler) *HTMLIns {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLIns) OnKeyup(h EventHandler) *HTMLIns {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLIns) OnMouseDown(h EventHandler) *HTMLIns {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLIns) OnMouseMove(h EventHandler) *HTMLIns {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLIns) OnMouseOut(h EventHandler) *HTMLIns {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLIns) OnMouseOver(h EventHandler) *HTMLIns {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLIns) OnMouseUp(h EventHandler) *HTMLIns {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLIns) OnPaste(h EventHandler) *HTMLIns {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLIns) OnReset(h EventHandler) *HTMLIns {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLIns) OnScroll(h EventHandler) *HTMLIns {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLIns) OnSearch(h EventHandler) *HTMLIns {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLIns) OnSelect(h EventHandler) *HTMLIns {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLIns) OnSubmit(h EventHandler) *HTMLIns {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLIns) OnWheel(h EventHandler) *HTMLIns {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLIns) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLKbd represents an HTML element <kbd>.
type HTMLKbd struct {
	elem
}

// Kbd returns an HTML element that defines keyboard input.
func Kbd() *HTMLKbd {
	return &HTMLKbd{
		elem: elem{
			tag:         "kbd",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLKbd) Body(nodes ...Node) *HTMLKbd {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLKbd) AccessKey(v string) *HTMLKbd {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLKbd) Class(v string) *HTMLKbd {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLKbd) ContentEditable(v bool) *HTMLKbd {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLKbd) DataSet(k, v string) *HTMLKbd {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLKbd) Dir(v string) *HTMLKbd {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLKbd) Draggable(v bool) *HTMLKbd {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLKbd) Hidden(v bool) *HTMLKbd {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLKbd) ID(v string) *HTMLKbd {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLKbd) Lang(v string) *HTMLKbd {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLKbd) Spellcheck(v bool) *HTMLKbd {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLKbd) Style(v string) *HTMLKbd {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLKbd) TabIndex(v int) *HTMLKbd {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLKbd) Title(v string) *HTMLKbd {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLKbd) OnBlur(h EventHandler) *HTMLKbd {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLKbd) OnChange(h EventHandler) *HTMLKbd {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLKbd) OnClick(h EventHandler) *HTMLKbd {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLKbd) OnContextMenu(h EventHandler) *HTMLKbd {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLKbd) OnCopy(h EventHandler) *HTMLKbd {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLKbd) OnCut(h EventHandler) *HTMLKbd {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLKbd) OnDblClick(h EventHandler) *HTMLKbd {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLKbd) OnDrag(h EventHandler) *HTMLKbd {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLKbd) OnDragEnd(h EventHandler) *HTMLKbd {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLKbd) OnDragEnter(h EventHandler) *HTMLKbd {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLKbd) OnDragLeave(h EventHandler) *HTMLKbd {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLKbd) OnDragOver(h EventHandler) *HTMLKbd {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLKbd) OnDragStart(h EventHandler) *HTMLKbd {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLKbd) OnDrop(h EventHandler) *HTMLKbd {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLKbd) OnFocus(h EventHandler) *HTMLKbd {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLKbd) OnInput(h EventHandler) *HTMLKbd {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLKbd) OnInvalid(h EventHandler) *HTMLKbd {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLKbd) OnKeyDown(h EventHandler) *HTMLKbd {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLKbd) OnKeyPress(h EventHandler) *HTMLKbd {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLKbd) OnKeyup(h EventHandler) *HTMLKbd {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLKbd) OnMouseDown(h EventHandler) *HTMLKbd {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLKbd) OnMouseMove(h EventHandler) *HTMLKbd {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLKbd) OnMouseOut(h EventHandler) *HTMLKbd {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLKbd) OnMouseOver(h EventHandler) *HTMLKbd {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLKbd) OnMouseUp(h EventHandler) *HTMLKbd {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLKbd) OnPaste(h EventHandler) *HTMLKbd {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLKbd) OnReset(h EventHandler) *HTMLKbd {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLKbd) OnScroll(h EventHandler) *HTMLKbd {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLKbd) OnSearch(h EventHandler) *HTMLKbd {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLKbd) OnSelect(h EventHandler) *HTMLKbd {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLKbd) OnSubmit(h EventHandler) *HTMLKbd {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLKbd) OnWheel(h EventHandler) *HTMLKbd {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLKbd) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLLabel represents an HTML element <label>.
type HTMLLabel struct {
	elem
}

// Label returns an HTML element that defines a label for an input element.
func Label() *HTMLLabel {
	return &HTMLLabel{
		elem: elem{
			tag:         "label",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLLabel) Body(nodes ...Node) *HTMLLabel {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLLabel) AccessKey(v string) *HTMLLabel {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLLabel) Class(v string) *HTMLLabel {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLLabel) ContentEditable(v bool) *HTMLLabel {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLLabel) DataSet(k, v string) *HTMLLabel {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLLabel) Dir(v string) *HTMLLabel {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLLabel) Draggable(v bool) *HTMLLabel {
	e.elem.setAttribute("draggable", v)
	return e
}

// For specifies which form element(s) a label/calculation is bound to.
func (e *HTMLLabel) For(v string) *HTMLLabel {
	e.elem.setAttribute("for", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLLabel) Form(v string) *HTMLLabel {
	e.elem.setAttribute("form", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLLabel) Hidden(v bool) *HTMLLabel {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLLabel) ID(v string) *HTMLLabel {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLLabel) Lang(v string) *HTMLLabel {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLLabel) Spellcheck(v bool) *HTMLLabel {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLLabel) Style(v string) *HTMLLabel {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLLabel) TabIndex(v int) *HTMLLabel {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLLabel) Title(v string) *HTMLLabel {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLLabel) OnBlur(h EventHandler) *HTMLLabel {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLLabel) OnChange(h EventHandler) *HTMLLabel {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLLabel) OnClick(h EventHandler) *HTMLLabel {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLLabel) OnContextMenu(h EventHandler) *HTMLLabel {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLLabel) OnCopy(h EventHandler) *HTMLLabel {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLLabel) OnCut(h EventHandler) *HTMLLabel {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLLabel) OnDblClick(h EventHandler) *HTMLLabel {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLLabel) OnDrag(h EventHandler) *HTMLLabel {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLLabel) OnDragEnd(h EventHandler) *HTMLLabel {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLLabel) OnDragEnter(h EventHandler) *HTMLLabel {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLLabel) OnDragLeave(h EventHandler) *HTMLLabel {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLLabel) OnDragOver(h EventHandler) *HTMLLabel {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLLabel) OnDragStart(h EventHandler) *HTMLLabel {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLLabel) OnDrop(h EventHandler) *HTMLLabel {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLLabel) OnFocus(h EventHandler) *HTMLLabel {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLLabel) OnInput(h EventHandler) *HTMLLabel {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLLabel) OnInvalid(h EventHandler) *HTMLLabel {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLLabel) OnKeyDown(h EventHandler) *HTMLLabel {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLLabel) OnKeyPress(h EventHandler) *HTMLLabel {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLLabel) OnKeyup(h EventHandler) *HTMLLabel {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLLabel) OnMouseDown(h EventHandler) *HTMLLabel {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLLabel) OnMouseMove(h EventHandler) *HTMLLabel {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLLabel) OnMouseOut(h EventHandler) *HTMLLabel {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLLabel) OnMouseOver(h EventHandler) *HTMLLabel {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLLabel) OnMouseUp(h EventHandler) *HTMLLabel {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLLabel) OnPaste(h EventHandler) *HTMLLabel {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLLabel) OnReset(h EventHandler) *HTMLLabel {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLLabel) OnScroll(h EventHandler) *HTMLLabel {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLLabel) OnSearch(h EventHandler) *HTMLLabel {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLLabel) OnSelect(h EventHandler) *HTMLLabel {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLLabel) OnSubmit(h EventHandler) *HTMLLabel {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLLabel) OnWheel(h EventHandler) *HTMLLabel {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLLabel) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLLegends represents an HTML element <legends>.
type HTMLLegends struct {
	elem
}

// Legends returns an HTML element that defines a caption for a fieldset element.
func Legends() *HTMLLegends {
	return &HTMLLegends{
		elem: elem{
			tag:         "legends",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLLegends) Body(nodes ...Node) *HTMLLegends {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLLegends) AccessKey(v string) *HTMLLegends {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLLegends) Class(v string) *HTMLLegends {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLLegends) ContentEditable(v bool) *HTMLLegends {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLLegends) DataSet(k, v string) *HTMLLegends {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLLegends) Dir(v string) *HTMLLegends {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLLegends) Draggable(v bool) *HTMLLegends {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLLegends) Hidden(v bool) *HTMLLegends {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLLegends) ID(v string) *HTMLLegends {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLLegends) Lang(v string) *HTMLLegends {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLLegends) Spellcheck(v bool) *HTMLLegends {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLLegends) Style(v string) *HTMLLegends {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLLegends) TabIndex(v int) *HTMLLegends {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLLegends) Title(v string) *HTMLLegends {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLLegends) OnBlur(h EventHandler) *HTMLLegends {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLLegends) OnChange(h EventHandler) *HTMLLegends {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLLegends) OnClick(h EventHandler) *HTMLLegends {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLLegends) OnContextMenu(h EventHandler) *HTMLLegends {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLLegends) OnCopy(h EventHandler) *HTMLLegends {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLLegends) OnCut(h EventHandler) *HTMLLegends {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLLegends) OnDblClick(h EventHandler) *HTMLLegends {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLLegends) OnDrag(h EventHandler) *HTMLLegends {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLLegends) OnDragEnd(h EventHandler) *HTMLLegends {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLLegends) OnDragEnter(h EventHandler) *HTMLLegends {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLLegends) OnDragLeave(h EventHandler) *HTMLLegends {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLLegends) OnDragOver(h EventHandler) *HTMLLegends {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLLegends) OnDragStart(h EventHandler) *HTMLLegends {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLLegends) OnDrop(h EventHandler) *HTMLLegends {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLLegends) OnFocus(h EventHandler) *HTMLLegends {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLLegends) OnInput(h EventHandler) *HTMLLegends {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLLegends) OnInvalid(h EventHandler) *HTMLLegends {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLLegends) OnKeyDown(h EventHandler) *HTMLLegends {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLLegends) OnKeyPress(h EventHandler) *HTMLLegends {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLLegends) OnKeyup(h EventHandler) *HTMLLegends {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLLegends) OnMouseDown(h EventHandler) *HTMLLegends {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLLegends) OnMouseMove(h EventHandler) *HTMLLegends {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLLegends) OnMouseOut(h EventHandler) *HTMLLegends {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLLegends) OnMouseOver(h EventHandler) *HTMLLegends {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLLegends) OnMouseUp(h EventHandler) *HTMLLegends {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLLegends) OnPaste(h EventHandler) *HTMLLegends {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLLegends) OnReset(h EventHandler) *HTMLLegends {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLLegends) OnScroll(h EventHandler) *HTMLLegends {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLLegends) OnSearch(h EventHandler) *HTMLLegends {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLLegends) OnSelect(h EventHandler) *HTMLLegends {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLLegends) OnSubmit(h EventHandler) *HTMLLegends {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLLegends) OnWheel(h EventHandler) *HTMLLegends {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLLegends) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLLi represents an HTML element <li>.
type HTMLLi struct {
	elem
}

// Li returns an HTML element that defines a list item.
func Li() *HTMLLi {
	return &HTMLLi{
		elem: elem{
			tag:         "li",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLLi) Body(nodes ...Node) *HTMLLi {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLLi) AccessKey(v string) *HTMLLi {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLLi) Class(v string) *HTMLLi {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLLi) ContentEditable(v bool) *HTMLLi {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLLi) DataSet(k, v string) *HTMLLi {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLLi) Dir(v string) *HTMLLi {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLLi) Draggable(v bool) *HTMLLi {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLLi) Hidden(v bool) *HTMLLi {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLLi) ID(v string) *HTMLLi {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLLi) Lang(v string) *HTMLLi {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLLi) Spellcheck(v bool) *HTMLLi {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLLi) Style(v string) *HTMLLi {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLLi) TabIndex(v int) *HTMLLi {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLLi) Title(v string) *HTMLLi {
	e.elem.setAttribute("title", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLLi) Value(v interface{}) *HTMLLi {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLLi) OnBlur(h EventHandler) *HTMLLi {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLLi) OnChange(h EventHandler) *HTMLLi {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLLi) OnClick(h EventHandler) *HTMLLi {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLLi) OnContextMenu(h EventHandler) *HTMLLi {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLLi) OnCopy(h EventHandler) *HTMLLi {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLLi) OnCut(h EventHandler) *HTMLLi {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLLi) OnDblClick(h EventHandler) *HTMLLi {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLLi) OnDrag(h EventHandler) *HTMLLi {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLLi) OnDragEnd(h EventHandler) *HTMLLi {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLLi) OnDragEnter(h EventHandler) *HTMLLi {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLLi) OnDragLeave(h EventHandler) *HTMLLi {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLLi) OnDragOver(h EventHandler) *HTMLLi {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLLi) OnDragStart(h EventHandler) *HTMLLi {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLLi) OnDrop(h EventHandler) *HTMLLi {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLLi) OnFocus(h EventHandler) *HTMLLi {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLLi) OnInput(h EventHandler) *HTMLLi {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLLi) OnInvalid(h EventHandler) *HTMLLi {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLLi) OnKeyDown(h EventHandler) *HTMLLi {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLLi) OnKeyPress(h EventHandler) *HTMLLi {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLLi) OnKeyup(h EventHandler) *HTMLLi {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLLi) OnMouseDown(h EventHandler) *HTMLLi {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLLi) OnMouseMove(h EventHandler) *HTMLLi {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLLi) OnMouseOut(h EventHandler) *HTMLLi {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLLi) OnMouseOver(h EventHandler) *HTMLLi {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLLi) OnMouseUp(h EventHandler) *HTMLLi {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLLi) OnPaste(h EventHandler) *HTMLLi {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLLi) OnReset(h EventHandler) *HTMLLi {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLLi) OnScroll(h EventHandler) *HTMLLi {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLLi) OnSearch(h EventHandler) *HTMLLi {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLLi) OnSelect(h EventHandler) *HTMLLi {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLLi) OnSubmit(h EventHandler) *HTMLLi {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLLi) OnWheel(h EventHandler) *HTMLLi {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLLi) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLLink represents an HTML element <link>.
type HTMLLink struct {
	elem
}

// Link returns an HTML element that defines the relationship between a document and an external resource (most used to link to style sheets).
func Link() *HTMLLink {
	return &HTMLLink{
		elem: elem{
			tag:         "link",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLLink) AccessKey(v string) *HTMLLink {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLLink) Class(v string) *HTMLLink {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLLink) ContentEditable(v bool) *HTMLLink {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLLink) DataSet(k, v string) *HTMLLink {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLLink) Dir(v string) *HTMLLink {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLLink) Draggable(v bool) *HTMLLink {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLLink) Hidden(v bool) *HTMLLink {
	e.elem.setAttribute("hidden", v)
	return e
}

// Href specifies the URL of the page the link goes to.
func (e *HTMLLink) Href(v string) *HTMLLink {
	e.elem.setAttribute("href", v)
	return e
}

// HrefLang specifies the language of the linked document.
func (e *HTMLLink) HrefLang(v string) *HTMLLink {
	e.elem.setAttribute("hreflang", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLLink) ID(v string) *HTMLLink {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLLink) Lang(v string) *HTMLLink {
	e.elem.setAttribute("lang", v)
	return e
}

// Media specifies what media/device the linked document is optimized for.
func (e *HTMLLink) Media(v string) *HTMLLink {
	e.elem.setAttribute("media", v)
	return e
}

// Rel specifies the relationship between the current document and the linked document.
func (e *HTMLLink) Rel(v string) *HTMLLink {
	e.elem.setAttribute("rel", v)
	return e
}

// Sizes specifies the size of the linked resource.
func (e *HTMLLink) Sizes(v string) *HTMLLink {
	e.elem.setAttribute("sizes", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLLink) Spellcheck(v bool) *HTMLLink {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLLink) Style(v string) *HTMLLink {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLLink) TabIndex(v int) *HTMLLink {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLLink) Title(v string) *HTMLLink {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLLink) Type(v string) *HTMLLink {
	e.elem.setAttribute("type", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLLink) OnBlur(h EventHandler) *HTMLLink {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLLink) OnChange(h EventHandler) *HTMLLink {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLLink) OnClick(h EventHandler) *HTMLLink {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLLink) OnContextMenu(h EventHandler) *HTMLLink {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLLink) OnCopy(h EventHandler) *HTMLLink {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLLink) OnCut(h EventHandler) *HTMLLink {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLLink) OnDblClick(h EventHandler) *HTMLLink {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLLink) OnDrag(h EventHandler) *HTMLLink {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLLink) OnDragEnd(h EventHandler) *HTMLLink {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLLink) OnDragEnter(h EventHandler) *HTMLLink {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLLink) OnDragLeave(h EventHandler) *HTMLLink {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLLink) OnDragOver(h EventHandler) *HTMLLink {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLLink) OnDragStart(h EventHandler) *HTMLLink {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLLink) OnDrop(h EventHandler) *HTMLLink {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLLink) OnFocus(h EventHandler) *HTMLLink {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLLink) OnInput(h EventHandler) *HTMLLink {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLLink) OnInvalid(h EventHandler) *HTMLLink {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLLink) OnKeyDown(h EventHandler) *HTMLLink {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLLink) OnKeyPress(h EventHandler) *HTMLLink {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLLink) OnKeyup(h EventHandler) *HTMLLink {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLLink) OnMouseDown(h EventHandler) *HTMLLink {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLLink) OnMouseMove(h EventHandler) *HTMLLink {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLLink) OnMouseOut(h EventHandler) *HTMLLink {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLLink) OnMouseOver(h EventHandler) *HTMLLink {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLLink) OnMouseUp(h EventHandler) *HTMLLink {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLLink) OnPaste(h EventHandler) *HTMLLink {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLLink) OnReset(h EventHandler) *HTMLLink {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLLink) OnScroll(h EventHandler) *HTMLLink {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLLink) OnSearch(h EventHandler) *HTMLLink {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLLink) OnSelect(h EventHandler) *HTMLLink {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLLink) OnSubmit(h EventHandler) *HTMLLink {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLLink) OnWheel(h EventHandler) *HTMLLink {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLLink) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLMain represents an HTML element <main>.
type HTMLMain struct {
	elem
}

// Main returns an HTML element that specifies the main content of a document.
func Main() *HTMLMain {
	return &HTMLMain{
		elem: elem{
			tag:         "main",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLMain) Body(nodes ...Node) *HTMLMain {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLMain) AccessKey(v string) *HTMLMain {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLMain) Class(v string) *HTMLMain {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLMain) ContentEditable(v bool) *HTMLMain {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLMain) DataSet(k, v string) *HTMLMain {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLMain) Dir(v string) *HTMLMain {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLMain) Draggable(v bool) *HTMLMain {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLMain) Hidden(v bool) *HTMLMain {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLMain) ID(v string) *HTMLMain {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLMain) Lang(v string) *HTMLMain {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLMain) Spellcheck(v bool) *HTMLMain {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLMain) Style(v string) *HTMLMain {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLMain) TabIndex(v int) *HTMLMain {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLMain) Title(v string) *HTMLMain {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLMain) OnBlur(h EventHandler) *HTMLMain {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLMain) OnChange(h EventHandler) *HTMLMain {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLMain) OnClick(h EventHandler) *HTMLMain {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLMain) OnContextMenu(h EventHandler) *HTMLMain {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLMain) OnCopy(h EventHandler) *HTMLMain {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLMain) OnCut(h EventHandler) *HTMLMain {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLMain) OnDblClick(h EventHandler) *HTMLMain {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLMain) OnDrag(h EventHandler) *HTMLMain {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLMain) OnDragEnd(h EventHandler) *HTMLMain {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLMain) OnDragEnter(h EventHandler) *HTMLMain {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLMain) OnDragLeave(h EventHandler) *HTMLMain {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLMain) OnDragOver(h EventHandler) *HTMLMain {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLMain) OnDragStart(h EventHandler) *HTMLMain {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLMain) OnDrop(h EventHandler) *HTMLMain {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLMain) OnFocus(h EventHandler) *HTMLMain {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLMain) OnInput(h EventHandler) *HTMLMain {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLMain) OnInvalid(h EventHandler) *HTMLMain {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLMain) OnKeyDown(h EventHandler) *HTMLMain {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLMain) OnKeyPress(h EventHandler) *HTMLMain {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLMain) OnKeyup(h EventHandler) *HTMLMain {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLMain) OnMouseDown(h EventHandler) *HTMLMain {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLMain) OnMouseMove(h EventHandler) *HTMLMain {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLMain) OnMouseOut(h EventHandler) *HTMLMain {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLMain) OnMouseOver(h EventHandler) *HTMLMain {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLMain) OnMouseUp(h EventHandler) *HTMLMain {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLMain) OnPaste(h EventHandler) *HTMLMain {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLMain) OnReset(h EventHandler) *HTMLMain {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLMain) OnScroll(h EventHandler) *HTMLMain {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLMain) OnSearch(h EventHandler) *HTMLMain {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLMain) OnSelect(h EventHandler) *HTMLMain {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLMain) OnSubmit(h EventHandler) *HTMLMain {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLMain) OnWheel(h EventHandler) *HTMLMain {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLMain) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLMap represents an HTML element <map>.
type HTMLMap struct {
	elem
}

// Map returns an HTML element that defines a client-side image-map.
func Map() *HTMLMap {
	return &HTMLMap{
		elem: elem{
			tag:         "map",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLMap) Body(nodes ...Node) *HTMLMap {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLMap) AccessKey(v string) *HTMLMap {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLMap) Class(v string) *HTMLMap {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLMap) ContentEditable(v bool) *HTMLMap {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLMap) DataSet(k, v string) *HTMLMap {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLMap) Dir(v string) *HTMLMap {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLMap) Draggable(v bool) *HTMLMap {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLMap) Hidden(v bool) *HTMLMap {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLMap) ID(v string) *HTMLMap {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLMap) Lang(v string) *HTMLMap {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLMap) Name(v string) *HTMLMap {
	e.elem.setAttribute("name", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLMap) Spellcheck(v bool) *HTMLMap {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLMap) Style(v string) *HTMLMap {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLMap) TabIndex(v int) *HTMLMap {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLMap) Title(v string) *HTMLMap {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLMap) OnBlur(h EventHandler) *HTMLMap {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLMap) OnChange(h EventHandler) *HTMLMap {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLMap) OnClick(h EventHandler) *HTMLMap {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLMap) OnContextMenu(h EventHandler) *HTMLMap {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLMap) OnCopy(h EventHandler) *HTMLMap {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLMap) OnCut(h EventHandler) *HTMLMap {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLMap) OnDblClick(h EventHandler) *HTMLMap {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLMap) OnDrag(h EventHandler) *HTMLMap {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLMap) OnDragEnd(h EventHandler) *HTMLMap {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLMap) OnDragEnter(h EventHandler) *HTMLMap {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLMap) OnDragLeave(h EventHandler) *HTMLMap {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLMap) OnDragOver(h EventHandler) *HTMLMap {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLMap) OnDragStart(h EventHandler) *HTMLMap {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLMap) OnDrop(h EventHandler) *HTMLMap {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLMap) OnFocus(h EventHandler) *HTMLMap {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLMap) OnInput(h EventHandler) *HTMLMap {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLMap) OnInvalid(h EventHandler) *HTMLMap {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLMap) OnKeyDown(h EventHandler) *HTMLMap {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLMap) OnKeyPress(h EventHandler) *HTMLMap {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLMap) OnKeyup(h EventHandler) *HTMLMap {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLMap) OnMouseDown(h EventHandler) *HTMLMap {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLMap) OnMouseMove(h EventHandler) *HTMLMap {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLMap) OnMouseOut(h EventHandler) *HTMLMap {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLMap) OnMouseOver(h EventHandler) *HTMLMap {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLMap) OnMouseUp(h EventHandler) *HTMLMap {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLMap) OnPaste(h EventHandler) *HTMLMap {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLMap) OnReset(h EventHandler) *HTMLMap {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLMap) OnScroll(h EventHandler) *HTMLMap {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLMap) OnSearch(h EventHandler) *HTMLMap {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLMap) OnSelect(h EventHandler) *HTMLMap {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLMap) OnSubmit(h EventHandler) *HTMLMap {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLMap) OnWheel(h EventHandler) *HTMLMap {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLMap) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLMark represents an HTML element <mark>.
type HTMLMark struct {
	elem
}

// Mark returns an HTML element that defines marked/highlighted text.
func Mark() *HTMLMark {
	return &HTMLMark{
		elem: elem{
			tag:         "mark",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLMark) Body(nodes ...Node) *HTMLMark {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLMark) AccessKey(v string) *HTMLMark {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLMark) Class(v string) *HTMLMark {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLMark) ContentEditable(v bool) *HTMLMark {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLMark) DataSet(k, v string) *HTMLMark {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLMark) Dir(v string) *HTMLMark {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLMark) Draggable(v bool) *HTMLMark {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLMark) Hidden(v bool) *HTMLMark {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLMark) ID(v string) *HTMLMark {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLMark) Lang(v string) *HTMLMark {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLMark) Spellcheck(v bool) *HTMLMark {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLMark) Style(v string) *HTMLMark {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLMark) TabIndex(v int) *HTMLMark {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLMark) Title(v string) *HTMLMark {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLMark) OnBlur(h EventHandler) *HTMLMark {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLMark) OnChange(h EventHandler) *HTMLMark {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLMark) OnClick(h EventHandler) *HTMLMark {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLMark) OnContextMenu(h EventHandler) *HTMLMark {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLMark) OnCopy(h EventHandler) *HTMLMark {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLMark) OnCut(h EventHandler) *HTMLMark {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLMark) OnDblClick(h EventHandler) *HTMLMark {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLMark) OnDrag(h EventHandler) *HTMLMark {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLMark) OnDragEnd(h EventHandler) *HTMLMark {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLMark) OnDragEnter(h EventHandler) *HTMLMark {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLMark) OnDragLeave(h EventHandler) *HTMLMark {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLMark) OnDragOver(h EventHandler) *HTMLMark {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLMark) OnDragStart(h EventHandler) *HTMLMark {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLMark) OnDrop(h EventHandler) *HTMLMark {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLMark) OnFocus(h EventHandler) *HTMLMark {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLMark) OnInput(h EventHandler) *HTMLMark {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLMark) OnInvalid(h EventHandler) *HTMLMark {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLMark) OnKeyDown(h EventHandler) *HTMLMark {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLMark) OnKeyPress(h EventHandler) *HTMLMark {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLMark) OnKeyup(h EventHandler) *HTMLMark {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLMark) OnMouseDown(h EventHandler) *HTMLMark {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLMark) OnMouseMove(h EventHandler) *HTMLMark {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLMark) OnMouseOut(h EventHandler) *HTMLMark {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLMark) OnMouseOver(h EventHandler) *HTMLMark {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLMark) OnMouseUp(h EventHandler) *HTMLMark {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLMark) OnPaste(h EventHandler) *HTMLMark {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLMark) OnReset(h EventHandler) *HTMLMark {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLMark) OnScroll(h EventHandler) *HTMLMark {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLMark) OnSearch(h EventHandler) *HTMLMark {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLMark) OnSelect(h EventHandler) *HTMLMark {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLMark) OnSubmit(h EventHandler) *HTMLMark {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLMark) OnWheel(h EventHandler) *HTMLMark {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLMark) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLMeta represents an HTML element <meta>.
type HTMLMeta struct {
	elem
}

// Meta returns an HTML element that .
func Meta() *HTMLMeta {
	return &HTMLMeta{
		elem: elem{
			tag:         "meta",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLMeta) AccessKey(v string) *HTMLMeta {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Charset specifies the character encoding.
func (e *HTMLMeta) Charset(v string) *HTMLMeta {
	e.elem.setAttribute("charset", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLMeta) Class(v string) *HTMLMeta {
	e.elem.setAttribute("class", v)
	return e
}

// Content gives the value associated with the http-equiv or name attribute.
func (e *HTMLMeta) Content(v string) *HTMLMeta {
	e.elem.setAttribute("content", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLMeta) ContentEditable(v bool) *HTMLMeta {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLMeta) DataSet(k, v string) *HTMLMeta {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLMeta) Dir(v string) *HTMLMeta {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLMeta) Draggable(v bool) *HTMLMeta {
	e.elem.setAttribute("draggable", v)
	return e
}

// HTTPEquiv provides an HTTP header for the information/value of the content attribute.
func (e *HTMLMeta) HTTPEquiv(v string) *HTMLMeta {
	e.elem.setAttribute("httpequiv", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLMeta) Hidden(v bool) *HTMLMeta {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLMeta) ID(v string) *HTMLMeta {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLMeta) Lang(v string) *HTMLMeta {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLMeta) Name(v string) *HTMLMeta {
	e.elem.setAttribute("name", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLMeta) Spellcheck(v bool) *HTMLMeta {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLMeta) Style(v string) *HTMLMeta {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLMeta) TabIndex(v int) *HTMLMeta {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLMeta) Title(v string) *HTMLMeta {
	e.elem.setAttribute("title", v)
	return e
}

func (e *HTMLMeta) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLMeter represents an HTML element <meter>.
type HTMLMeter struct {
	elem
}

// Meter returns an HTML element that defines a scalar measurement within a known range (a gauge).
func Meter() *HTMLMeter {
	return &HTMLMeter{
		elem: elem{
			tag:         "meter",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLMeter) Body(nodes ...Node) *HTMLMeter {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLMeter) AccessKey(v string) *HTMLMeter {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLMeter) Class(v string) *HTMLMeter {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLMeter) ContentEditable(v bool) *HTMLMeter {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLMeter) DataSet(k, v string) *HTMLMeter {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLMeter) Dir(v string) *HTMLMeter {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLMeter) Draggable(v bool) *HTMLMeter {
	e.elem.setAttribute("draggable", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLMeter) Form(v string) *HTMLMeter {
	e.elem.setAttribute("form", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLMeter) Hidden(v bool) *HTMLMeter {
	e.elem.setAttribute("hidden", v)
	return e
}

// High specifies the range that is considered to be a high value.
func (e *HTMLMeter) High(v float64) *HTMLMeter {
	e.elem.setAttribute("high", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLMeter) ID(v string) *HTMLMeter {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLMeter) Lang(v string) *HTMLMeter {
	e.elem.setAttribute("lang", v)
	return e
}

// Low specifies the range that is considered to be a low value.
func (e *HTMLMeter) Low(v float64) *HTMLMeter {
	e.elem.setAttribute("low", v)
	return e
}

// Max Specifies the maximum value.
func (e *HTMLMeter) Max(v string) *HTMLMeter {
	e.elem.setAttribute("max", v)
	return e
}

// Min specifies a minimum value.
func (e *HTMLMeter) Min(v string) *HTMLMeter {
	e.elem.setAttribute("min", v)
	return e
}

// Optimum specifies what value is the optimal value for the gauge.
func (e *HTMLMeter) Optimum(v float64) *HTMLMeter {
	e.elem.setAttribute("optimum", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLMeter) Spellcheck(v bool) *HTMLMeter {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLMeter) Style(v string) *HTMLMeter {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLMeter) TabIndex(v int) *HTMLMeter {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLMeter) Title(v string) *HTMLMeter {
	e.elem.setAttribute("title", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLMeter) Value(v interface{}) *HTMLMeter {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLMeter) OnBlur(h EventHandler) *HTMLMeter {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLMeter) OnChange(h EventHandler) *HTMLMeter {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLMeter) OnClick(h EventHandler) *HTMLMeter {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLMeter) OnContextMenu(h EventHandler) *HTMLMeter {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLMeter) OnCopy(h EventHandler) *HTMLMeter {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLMeter) OnCut(h EventHandler) *HTMLMeter {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLMeter) OnDblClick(h EventHandler) *HTMLMeter {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLMeter) OnDrag(h EventHandler) *HTMLMeter {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLMeter) OnDragEnd(h EventHandler) *HTMLMeter {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLMeter) OnDragEnter(h EventHandler) *HTMLMeter {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLMeter) OnDragLeave(h EventHandler) *HTMLMeter {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLMeter) OnDragOver(h EventHandler) *HTMLMeter {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLMeter) OnDragStart(h EventHandler) *HTMLMeter {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLMeter) OnDrop(h EventHandler) *HTMLMeter {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLMeter) OnFocus(h EventHandler) *HTMLMeter {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLMeter) OnInput(h EventHandler) *HTMLMeter {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLMeter) OnInvalid(h EventHandler) *HTMLMeter {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLMeter) OnKeyDown(h EventHandler) *HTMLMeter {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLMeter) OnKeyPress(h EventHandler) *HTMLMeter {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLMeter) OnKeyup(h EventHandler) *HTMLMeter {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLMeter) OnMouseDown(h EventHandler) *HTMLMeter {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLMeter) OnMouseMove(h EventHandler) *HTMLMeter {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLMeter) OnMouseOut(h EventHandler) *HTMLMeter {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLMeter) OnMouseOver(h EventHandler) *HTMLMeter {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLMeter) OnMouseUp(h EventHandler) *HTMLMeter {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLMeter) OnPaste(h EventHandler) *HTMLMeter {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLMeter) OnReset(h EventHandler) *HTMLMeter {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLMeter) OnScroll(h EventHandler) *HTMLMeter {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLMeter) OnSearch(h EventHandler) *HTMLMeter {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLMeter) OnSelect(h EventHandler) *HTMLMeter {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLMeter) OnSubmit(h EventHandler) *HTMLMeter {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLMeter) OnWheel(h EventHandler) *HTMLMeter {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLMeter) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLNav represents an HTML element <nav>.
type HTMLNav struct {
	elem
}

// Nav returns an HTML element that defines navigation links.
func Nav() *HTMLNav {
	return &HTMLNav{
		elem: elem{
			tag:         "nav",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLNav) Body(nodes ...Node) *HTMLNav {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLNav) AccessKey(v string) *HTMLNav {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLNav) Class(v string) *HTMLNav {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLNav) ContentEditable(v bool) *HTMLNav {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLNav) DataSet(k, v string) *HTMLNav {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLNav) Dir(v string) *HTMLNav {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLNav) Draggable(v bool) *HTMLNav {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLNav) Hidden(v bool) *HTMLNav {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLNav) ID(v string) *HTMLNav {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLNav) Lang(v string) *HTMLNav {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLNav) Spellcheck(v bool) *HTMLNav {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLNav) Style(v string) *HTMLNav {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLNav) TabIndex(v int) *HTMLNav {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLNav) Title(v string) *HTMLNav {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLNav) OnBlur(h EventHandler) *HTMLNav {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLNav) OnChange(h EventHandler) *HTMLNav {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLNav) OnClick(h EventHandler) *HTMLNav {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLNav) OnContextMenu(h EventHandler) *HTMLNav {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLNav) OnCopy(h EventHandler) *HTMLNav {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLNav) OnCut(h EventHandler) *HTMLNav {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLNav) OnDblClick(h EventHandler) *HTMLNav {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLNav) OnDrag(h EventHandler) *HTMLNav {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLNav) OnDragEnd(h EventHandler) *HTMLNav {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLNav) OnDragEnter(h EventHandler) *HTMLNav {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLNav) OnDragLeave(h EventHandler) *HTMLNav {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLNav) OnDragOver(h EventHandler) *HTMLNav {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLNav) OnDragStart(h EventHandler) *HTMLNav {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLNav) OnDrop(h EventHandler) *HTMLNav {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLNav) OnFocus(h EventHandler) *HTMLNav {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLNav) OnInput(h EventHandler) *HTMLNav {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLNav) OnInvalid(h EventHandler) *HTMLNav {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLNav) OnKeyDown(h EventHandler) *HTMLNav {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLNav) OnKeyPress(h EventHandler) *HTMLNav {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLNav) OnKeyup(h EventHandler) *HTMLNav {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLNav) OnMouseDown(h EventHandler) *HTMLNav {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLNav) OnMouseMove(h EventHandler) *HTMLNav {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLNav) OnMouseOut(h EventHandler) *HTMLNav {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLNav) OnMouseOver(h EventHandler) *HTMLNav {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLNav) OnMouseUp(h EventHandler) *HTMLNav {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLNav) OnPaste(h EventHandler) *HTMLNav {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLNav) OnReset(h EventHandler) *HTMLNav {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLNav) OnScroll(h EventHandler) *HTMLNav {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLNav) OnSearch(h EventHandler) *HTMLNav {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLNav) OnSelect(h EventHandler) *HTMLNav {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLNav) OnSubmit(h EventHandler) *HTMLNav {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLNav) OnWheel(h EventHandler) *HTMLNav {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLNav) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLNoScript represents an HTML element <noscript>.
type HTMLNoScript struct {
	elem
}

// NoScript returns an HTML element that defines an alternate content for users that do not support client-side scripts.
func NoScript() *HTMLNoScript {
	return &HTMLNoScript{
		elem: elem{
			tag:         "noscript",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLNoScript) Body(nodes ...Node) *HTMLNoScript {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLNoScript) AccessKey(v string) *HTMLNoScript {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLNoScript) Class(v string) *HTMLNoScript {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLNoScript) ContentEditable(v bool) *HTMLNoScript {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLNoScript) DataSet(k, v string) *HTMLNoScript {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLNoScript) Dir(v string) *HTMLNoScript {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLNoScript) Draggable(v bool) *HTMLNoScript {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLNoScript) Hidden(v bool) *HTMLNoScript {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLNoScript) ID(v string) *HTMLNoScript {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLNoScript) Lang(v string) *HTMLNoScript {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLNoScript) Spellcheck(v bool) *HTMLNoScript {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLNoScript) Style(v string) *HTMLNoScript {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLNoScript) TabIndex(v int) *HTMLNoScript {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLNoScript) Title(v string) *HTMLNoScript {
	e.elem.setAttribute("title", v)
	return e
}

func (e *HTMLNoScript) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLObject represents an HTML element <object>.
type HTMLObject struct {
	elem
}

// Object returns an HTML element that defines an embedded object.
func Object() *HTMLObject {
	return &HTMLObject{
		elem: elem{
			tag:         "object",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLObject) Body(nodes ...Node) *HTMLObject {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLObject) AccessKey(v string) *HTMLObject {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLObject) Class(v string) *HTMLObject {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLObject) ContentEditable(v bool) *HTMLObject {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// Data specifies the URL of the resource to be used by the object.
func (e *HTMLObject) Data(v string) *HTMLObject {
	e.elem.setAttribute("data", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLObject) DataSet(k, v string) *HTMLObject {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLObject) Dir(v string) *HTMLObject {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLObject) Draggable(v bool) *HTMLObject {
	e.elem.setAttribute("draggable", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLObject) Form(v string) *HTMLObject {
	e.elem.setAttribute("form", v)
	return e
}

// Height specifies the height of the element (in pixels).
func (e *HTMLObject) Height(v int) *HTMLObject {
	e.elem.setAttribute("height", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLObject) Hidden(v bool) *HTMLObject {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLObject) ID(v string) *HTMLObject {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLObject) Lang(v string) *HTMLObject {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLObject) Name(v string) *HTMLObject {
	e.elem.setAttribute("name", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLObject) Spellcheck(v bool) *HTMLObject {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLObject) Style(v string) *HTMLObject {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLObject) TabIndex(v int) *HTMLObject {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLObject) Title(v string) *HTMLObject {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLObject) Type(v string) *HTMLObject {
	e.elem.setAttribute("type", v)
	return e
}

// UseMap specifies an image as a client-side image-map.
func (e *HTMLObject) UseMap(v string) *HTMLObject {
	e.elem.setAttribute("usemap", v)
	return e
}

// Width specifies the width of the element.
func (e *HTMLObject) Width(v int) *HTMLObject {
	e.elem.setAttribute("width", v)
	return e
}

// OnAbort calls the given handler on abort.
func (e *HTMLObject) OnAbort(h EventHandler) *HTMLObject {
	e.setEventHandler("abort", h)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLObject) OnBlur(h EventHandler) *HTMLObject {
	e.setEventHandler("blur", h)
	return e
}

// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
func (e *HTMLObject) OnCanPlay(h EventHandler) *HTMLObject {
	e.setEventHandler("canplay", h)
	return e
}

// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
func (e *HTMLObject) OnCanPlayThrough(h EventHandler) *HTMLObject {
	e.setEventHandler("canplaythrough", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLObject) OnChange(h EventHandler) *HTMLObject {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLObject) OnClick(h EventHandler) *HTMLObject {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLObject) OnContextMenu(h EventHandler) *HTMLObject {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLObject) OnCopy(h EventHandler) *HTMLObject {
	e.setEventHandler("copy", h)
	return e
}

// OnCueChange calls the given handler when the cue changes in a track element.
func (e *HTMLObject) OnCueChange(h EventHandler) *HTMLObject {
	e.setEventHandler("cuechange", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLObject) OnCut(h EventHandler) *HTMLObject {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLObject) OnDblClick(h EventHandler) *HTMLObject {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLObject) OnDrag(h EventHandler) *HTMLObject {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLObject) OnDragEnd(h EventHandler) *HTMLObject {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLObject) OnDragEnter(h EventHandler) *HTMLObject {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLObject) OnDragLeave(h EventHandler) *HTMLObject {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLObject) OnDragOver(h EventHandler) *HTMLObject {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLObject) OnDragStart(h EventHandler) *HTMLObject {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLObject) OnDrop(h EventHandler) *HTMLObject {
	e.setEventHandler("drop", h)
	return e
}

// OnDurationChange calls the given handler when the length of the media changes.
func (e *HTMLObject) OnDurationChange(h EventHandler) *HTMLObject {
	e.setEventHandler("durationchange", h)
	return e
}

// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
func (e *HTMLObject) OnEmptied(h EventHandler) *HTMLObject {
	e.setEventHandler("emptied", h)
	return e
}

// OnEnded calls the given handler when the media has reach the end.
func (e *HTMLObject) OnEnded(h EventHandler) *HTMLObject {
	e.setEventHandler("ended", h)
	return e
}

// OnError calls the given handler when an error occurs.
func (e *HTMLObject) OnError(h EventHandler) *HTMLObject {
	e.setEventHandler("error", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLObject) OnFocus(h EventHandler) *HTMLObject {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLObject) OnInput(h EventHandler) *HTMLObject {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLObject) OnInvalid(h EventHandler) *HTMLObject {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLObject) OnKeyDown(h EventHandler) *HTMLObject {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLObject) OnKeyPress(h EventHandler) *HTMLObject {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLObject) OnKeyup(h EventHandler) *HTMLObject {
	e.setEventHandler("keyup", h)
	return e
}

// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
func (e *HTMLObject) OnLoadStart(h EventHandler) *HTMLObject {
	e.setEventHandler("loadstart", h)
	return e
}

// OnLoadedData calls the given handler when media data is loaded.
func (e *HTMLObject) OnLoadedData(h EventHandler) *HTMLObject {
	e.setEventHandler("loadeddata", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLObject) OnMouseDown(h EventHandler) *HTMLObject {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLObject) OnMouseMove(h EventHandler) *HTMLObject {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLObject) OnMouseOut(h EventHandler) *HTMLObject {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLObject) OnMouseOver(h EventHandler) *HTMLObject {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLObject) OnMouseUp(h EventHandler) *HTMLObject {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLObject) OnPaste(h EventHandler) *HTMLObject {
	e.setEventHandler("paste", h)
	return e
}

// OnPause calls the given handler when the media is paused either by the user or programmatically.
func (e *HTMLObject) OnPause(h EventHandler) *HTMLObject {
	e.setEventHandler("pause", h)
	return e
}

// OnPlay calls the given handler when the media is ready to start playing.
func (e *HTMLObject) OnPlay(h EventHandler) *HTMLObject {
	e.setEventHandler("play", h)
	return e
}

// OnPlaying calls the given handler when the media actually has started playing.
func (e *HTMLObject) OnPlaying(h EventHandler) *HTMLObject {
	e.setEventHandler("playing", h)
	return e
}

// OnProgress calls the given handler when the browser is in the process of getting the media data.
func (e *HTMLObject) OnProgress(h EventHandler) *HTMLObject {
	e.setEventHandler("progress", h)
	return e
}

// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
func (e *HTMLObject) OnRateChange(h EventHandler) *HTMLObject {
	e.setEventHandler("ratechange", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLObject) OnReset(h EventHandler) *HTMLObject {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLObject) OnScroll(h EventHandler) *HTMLObject {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLObject) OnSearch(h EventHandler) *HTMLObject {
	e.setEventHandler("search", h)
	return e
}

// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
func (e *HTMLObject) OnSeeked(h EventHandler) *HTMLObject {
	e.setEventHandler("seeked", h)
	return e
}

// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
func (e *HTMLObject) OnSeeking(h EventHandler) *HTMLObject {
	e.setEventHandler("seeking", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLObject) OnSelect(h EventHandler) *HTMLObject {
	e.setEventHandler("select", h)
	return e
}

// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
func (e *HTMLObject) OnStalled(h EventHandler) *HTMLObject {
	e.setEventHandler("stalled", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLObject) OnSubmit(h EventHandler) *HTMLObject {
	e.setEventHandler("submit", h)
	return e
}

// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
func (e *HTMLObject) OnSuspend(h EventHandler) *HTMLObject {
	e.setEventHandler("suspend", h)
	return e
}

// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
func (e *HTMLObject) OnTimeUpdate(h EventHandler) *HTMLObject {
	e.setEventHandler("timeupdate", h)
	return e
}

// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
func (e *HTMLObject) OnVolumeChange(h EventHandler) *HTMLObject {
	e.setEventHandler("volumechange", h)
	return e
}

// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
func (e *HTMLObject) OnWaiting(h EventHandler) *HTMLObject {
	e.setEventHandler("waiting", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLObject) OnWheel(h EventHandler) *HTMLObject {
	e.setEventHandler("wheel", h)
	return e
}

// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
func (e *HTMLObject) OnloadedMetaData(h EventHandler) *HTMLObject {
	e.setEventHandler("loadedmetadata", h)
	return e
}

func (e *HTMLObject) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLOl represents an HTML element <ol>.
type HTMLOl struct {
	elem
}

// Ol returns an HTML element that defines an ordered list.
func Ol() *HTMLOl {
	return &HTMLOl{
		elem: elem{
			tag:         "ol",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLOl) Body(nodes ...Node) *HTMLOl {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLOl) AccessKey(v string) *HTMLOl {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLOl) Class(v string) *HTMLOl {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLOl) ContentEditable(v bool) *HTMLOl {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLOl) DataSet(k, v string) *HTMLOl {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLOl) Dir(v string) *HTMLOl {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLOl) Draggable(v bool) *HTMLOl {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLOl) Hidden(v bool) *HTMLOl {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLOl) ID(v string) *HTMLOl {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLOl) Lang(v string) *HTMLOl {
	e.elem.setAttribute("lang", v)
	return e
}

// Reversed specifies that the list order should be descending (9,8,7...).
func (e *HTMLOl) Reversed(v bool) *HTMLOl {
	e.elem.setAttribute("reversed", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLOl) Spellcheck(v bool) *HTMLOl {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Start specifies the start value of the ordered list.
func (e *HTMLOl) Start(v int) *HTMLOl {
	e.elem.setAttribute("start", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLOl) Style(v string) *HTMLOl {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLOl) TabIndex(v int) *HTMLOl {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLOl) Title(v string) *HTMLOl {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLOl) Type(v string) *HTMLOl {
	e.elem.setAttribute("type", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLOl) OnBlur(h EventHandler) *HTMLOl {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLOl) OnChange(h EventHandler) *HTMLOl {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLOl) OnClick(h EventHandler) *HTMLOl {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLOl) OnContextMenu(h EventHandler) *HTMLOl {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLOl) OnCopy(h EventHandler) *HTMLOl {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLOl) OnCut(h EventHandler) *HTMLOl {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLOl) OnDblClick(h EventHandler) *HTMLOl {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLOl) OnDrag(h EventHandler) *HTMLOl {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLOl) OnDragEnd(h EventHandler) *HTMLOl {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLOl) OnDragEnter(h EventHandler) *HTMLOl {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLOl) OnDragLeave(h EventHandler) *HTMLOl {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLOl) OnDragOver(h EventHandler) *HTMLOl {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLOl) OnDragStart(h EventHandler) *HTMLOl {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLOl) OnDrop(h EventHandler) *HTMLOl {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLOl) OnFocus(h EventHandler) *HTMLOl {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLOl) OnInput(h EventHandler) *HTMLOl {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLOl) OnInvalid(h EventHandler) *HTMLOl {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLOl) OnKeyDown(h EventHandler) *HTMLOl {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLOl) OnKeyPress(h EventHandler) *HTMLOl {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLOl) OnKeyup(h EventHandler) *HTMLOl {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLOl) OnMouseDown(h EventHandler) *HTMLOl {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLOl) OnMouseMove(h EventHandler) *HTMLOl {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLOl) OnMouseOut(h EventHandler) *HTMLOl {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLOl) OnMouseOver(h EventHandler) *HTMLOl {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLOl) OnMouseUp(h EventHandler) *HTMLOl {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLOl) OnPaste(h EventHandler) *HTMLOl {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLOl) OnReset(h EventHandler) *HTMLOl {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLOl) OnScroll(h EventHandler) *HTMLOl {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLOl) OnSearch(h EventHandler) *HTMLOl {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLOl) OnSelect(h EventHandler) *HTMLOl {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLOl) OnSubmit(h EventHandler) *HTMLOl {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLOl) OnWheel(h EventHandler) *HTMLOl {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLOl) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLOptGroup represents an HTML element <optgroup>.
type HTMLOptGroup struct {
	elem
}

// OptGroup returns an HTML element that defines a group of related options in a drop-down list.
func OptGroup() *HTMLOptGroup {
	return &HTMLOptGroup{
		elem: elem{
			tag:         "optgroup",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLOptGroup) Body(nodes ...Node) *HTMLOptGroup {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLOptGroup) AccessKey(v string) *HTMLOptGroup {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLOptGroup) Class(v string) *HTMLOptGroup {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLOptGroup) ContentEditable(v bool) *HTMLOptGroup {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLOptGroup) DataSet(k, v string) *HTMLOptGroup {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLOptGroup) Dir(v string) *HTMLOptGroup {
	e.elem.setAttribute("dir", v)
	return e
}

// Disabled specifies that the specified element/group of elements should be disabled.
func (e *HTMLOptGroup) Disabled(v bool) *HTMLOptGroup {
	e.elem.setAttribute("disabled", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLOptGroup) Draggable(v bool) *HTMLOptGroup {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLOptGroup) Hidden(v bool) *HTMLOptGroup {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLOptGroup) ID(v string) *HTMLOptGroup {
	e.elem.setAttribute("id", v)
	return e
}

// Label specifies a shorter label for the option.
func (e *HTMLOptGroup) Label(v string) *HTMLOptGroup {
	e.elem.setAttribute("label", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLOptGroup) Lang(v string) *HTMLOptGroup {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLOptGroup) Spellcheck(v bool) *HTMLOptGroup {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLOptGroup) Style(v string) *HTMLOptGroup {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLOptGroup) TabIndex(v int) *HTMLOptGroup {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLOptGroup) Title(v string) *HTMLOptGroup {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLOptGroup) OnBlur(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLOptGroup) OnChange(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLOptGroup) OnClick(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLOptGroup) OnContextMenu(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLOptGroup) OnCopy(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLOptGroup) OnCut(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLOptGroup) OnDblClick(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLOptGroup) OnDrag(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLOptGroup) OnDragEnd(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLOptGroup) OnDragEnter(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLOptGroup) OnDragLeave(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLOptGroup) OnDragOver(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLOptGroup) OnDragStart(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLOptGroup) OnDrop(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLOptGroup) OnFocus(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLOptGroup) OnInput(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLOptGroup) OnInvalid(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLOptGroup) OnKeyDown(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLOptGroup) OnKeyPress(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLOptGroup) OnKeyup(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLOptGroup) OnMouseDown(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLOptGroup) OnMouseMove(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLOptGroup) OnMouseOut(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLOptGroup) OnMouseOver(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLOptGroup) OnMouseUp(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLOptGroup) OnPaste(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLOptGroup) OnReset(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLOptGroup) OnScroll(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLOptGroup) OnSearch(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLOptGroup) OnSelect(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLOptGroup) OnSubmit(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLOptGroup) OnWheel(h EventHandler) *HTMLOptGroup {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLOptGroup) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLOption represents an HTML element <option>.
type HTMLOption struct {
	elem
}

// Option returns an HTML element that defines an option in a drop-down list.
func Option() *HTMLOption {
	return &HTMLOption{
		elem: elem{
			tag:         "option",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLOption) Body(nodes ...Node) *HTMLOption {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLOption) AccessKey(v string) *HTMLOption {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLOption) Class(v string) *HTMLOption {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLOption) ContentEditable(v bool) *HTMLOption {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLOption) DataSet(k, v string) *HTMLOption {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLOption) Dir(v string) *HTMLOption {
	e.elem.setAttribute("dir", v)
	return e
}

// Disabled specifies that the specified element/group of elements should be disabled.
func (e *HTMLOption) Disabled(v bool) *HTMLOption {
	e.elem.setAttribute("disabled", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLOption) Draggable(v bool) *HTMLOption {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLOption) Hidden(v bool) *HTMLOption {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLOption) ID(v string) *HTMLOption {
	e.elem.setAttribute("id", v)
	return e
}

// Label specifies a shorter label for the option.
func (e *HTMLOption) Label(v string) *HTMLOption {
	e.elem.setAttribute("label", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLOption) Lang(v string) *HTMLOption {
	e.elem.setAttribute("lang", v)
	return e
}

// Selected specifies that an option should be pre-selected when the page loads.
func (e *HTMLOption) Selected(v bool) *HTMLOption {
	e.elem.setAttribute("selected", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLOption) Spellcheck(v bool) *HTMLOption {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLOption) Style(v string) *HTMLOption {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLOption) TabIndex(v int) *HTMLOption {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLOption) Title(v string) *HTMLOption {
	e.elem.setAttribute("title", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLOption) Value(v interface{}) *HTMLOption {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLOption) OnBlur(h EventHandler) *HTMLOption {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLOption) OnChange(h EventHandler) *HTMLOption {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLOption) OnClick(h EventHandler) *HTMLOption {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLOption) OnContextMenu(h EventHandler) *HTMLOption {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLOption) OnCopy(h EventHandler) *HTMLOption {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLOption) OnCut(h EventHandler) *HTMLOption {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLOption) OnDblClick(h EventHandler) *HTMLOption {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLOption) OnDrag(h EventHandler) *HTMLOption {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLOption) OnDragEnd(h EventHandler) *HTMLOption {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLOption) OnDragEnter(h EventHandler) *HTMLOption {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLOption) OnDragLeave(h EventHandler) *HTMLOption {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLOption) OnDragOver(h EventHandler) *HTMLOption {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLOption) OnDragStart(h EventHandler) *HTMLOption {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLOption) OnDrop(h EventHandler) *HTMLOption {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLOption) OnFocus(h EventHandler) *HTMLOption {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLOption) OnInput(h EventHandler) *HTMLOption {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLOption) OnInvalid(h EventHandler) *HTMLOption {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLOption) OnKeyDown(h EventHandler) *HTMLOption {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLOption) OnKeyPress(h EventHandler) *HTMLOption {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLOption) OnKeyup(h EventHandler) *HTMLOption {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLOption) OnMouseDown(h EventHandler) *HTMLOption {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLOption) OnMouseMove(h EventHandler) *HTMLOption {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLOption) OnMouseOut(h EventHandler) *HTMLOption {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLOption) OnMouseOver(h EventHandler) *HTMLOption {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLOption) OnMouseUp(h EventHandler) *HTMLOption {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLOption) OnPaste(h EventHandler) *HTMLOption {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLOption) OnReset(h EventHandler) *HTMLOption {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLOption) OnScroll(h EventHandler) *HTMLOption {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLOption) OnSearch(h EventHandler) *HTMLOption {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLOption) OnSelect(h EventHandler) *HTMLOption {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLOption) OnSubmit(h EventHandler) *HTMLOption {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLOption) OnWheel(h EventHandler) *HTMLOption {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLOption) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLOutput represents an HTML element <output>.
type HTMLOutput struct {
	elem
}

// Output returns an HTML element that .
func Output() *HTMLOutput {
	return &HTMLOutput{
		elem: elem{
			tag:         "output",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLOutput) Body(nodes ...Node) *HTMLOutput {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLOutput) AccessKey(v string) *HTMLOutput {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLOutput) Class(v string) *HTMLOutput {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLOutput) ContentEditable(v bool) *HTMLOutput {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLOutput) DataSet(k, v string) *HTMLOutput {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLOutput) Dir(v string) *HTMLOutput {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLOutput) Draggable(v bool) *HTMLOutput {
	e.elem.setAttribute("draggable", v)
	return e
}

// For specifies which form element(s) a label/calculation is bound to.
func (e *HTMLOutput) For(v string) *HTMLOutput {
	e.elem.setAttribute("for", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLOutput) Form(v string) *HTMLOutput {
	e.elem.setAttribute("form", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLOutput) Hidden(v bool) *HTMLOutput {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLOutput) ID(v string) *HTMLOutput {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLOutput) Lang(v string) *HTMLOutput {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLOutput) Name(v string) *HTMLOutput {
	e.elem.setAttribute("name", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLOutput) Spellcheck(v bool) *HTMLOutput {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLOutput) Style(v string) *HTMLOutput {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLOutput) TabIndex(v int) *HTMLOutput {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLOutput) Title(v string) *HTMLOutput {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLOutput) OnBlur(h EventHandler) *HTMLOutput {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLOutput) OnChange(h EventHandler) *HTMLOutput {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLOutput) OnClick(h EventHandler) *HTMLOutput {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLOutput) OnContextMenu(h EventHandler) *HTMLOutput {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLOutput) OnCopy(h EventHandler) *HTMLOutput {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLOutput) OnCut(h EventHandler) *HTMLOutput {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLOutput) OnDblClick(h EventHandler) *HTMLOutput {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLOutput) OnDrag(h EventHandler) *HTMLOutput {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLOutput) OnDragEnd(h EventHandler) *HTMLOutput {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLOutput) OnDragEnter(h EventHandler) *HTMLOutput {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLOutput) OnDragLeave(h EventHandler) *HTMLOutput {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLOutput) OnDragOver(h EventHandler) *HTMLOutput {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLOutput) OnDragStart(h EventHandler) *HTMLOutput {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLOutput) OnDrop(h EventHandler) *HTMLOutput {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLOutput) OnFocus(h EventHandler) *HTMLOutput {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLOutput) OnInput(h EventHandler) *HTMLOutput {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLOutput) OnInvalid(h EventHandler) *HTMLOutput {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLOutput) OnKeyDown(h EventHandler) *HTMLOutput {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLOutput) OnKeyPress(h EventHandler) *HTMLOutput {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLOutput) OnKeyup(h EventHandler) *HTMLOutput {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLOutput) OnMouseDown(h EventHandler) *HTMLOutput {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLOutput) OnMouseMove(h EventHandler) *HTMLOutput {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLOutput) OnMouseOut(h EventHandler) *HTMLOutput {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLOutput) OnMouseOver(h EventHandler) *HTMLOutput {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLOutput) OnMouseUp(h EventHandler) *HTMLOutput {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLOutput) OnPaste(h EventHandler) *HTMLOutput {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLOutput) OnReset(h EventHandler) *HTMLOutput {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLOutput) OnScroll(h EventHandler) *HTMLOutput {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLOutput) OnSearch(h EventHandler) *HTMLOutput {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLOutput) OnSelect(h EventHandler) *HTMLOutput {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLOutput) OnSubmit(h EventHandler) *HTMLOutput {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLOutput) OnWheel(h EventHandler) *HTMLOutput {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLOutput) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLP represents an HTML element <p>.
type HTMLP struct {
	elem
}

// P returns an HTML element that defines a paragraph.
func P() *HTMLP {
	return &HTMLP{
		elem: elem{
			tag:         "p",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLP) Body(nodes ...Node) *HTMLP {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLP) AccessKey(v string) *HTMLP {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLP) Class(v string) *HTMLP {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLP) ContentEditable(v bool) *HTMLP {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLP) DataSet(k, v string) *HTMLP {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLP) Dir(v string) *HTMLP {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLP) Draggable(v bool) *HTMLP {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLP) Hidden(v bool) *HTMLP {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLP) ID(v string) *HTMLP {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLP) Lang(v string) *HTMLP {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLP) Spellcheck(v bool) *HTMLP {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLP) Style(v string) *HTMLP {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLP) TabIndex(v int) *HTMLP {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLP) Title(v string) *HTMLP {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLP) OnBlur(h EventHandler) *HTMLP {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLP) OnChange(h EventHandler) *HTMLP {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLP) OnClick(h EventHandler) *HTMLP {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLP) OnContextMenu(h EventHandler) *HTMLP {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLP) OnCopy(h EventHandler) *HTMLP {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLP) OnCut(h EventHandler) *HTMLP {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLP) OnDblClick(h EventHandler) *HTMLP {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLP) OnDrag(h EventHandler) *HTMLP {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLP) OnDragEnd(h EventHandler) *HTMLP {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLP) OnDragEnter(h EventHandler) *HTMLP {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLP) OnDragLeave(h EventHandler) *HTMLP {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLP) OnDragOver(h EventHandler) *HTMLP {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLP) OnDragStart(h EventHandler) *HTMLP {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLP) OnDrop(h EventHandler) *HTMLP {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLP) OnFocus(h EventHandler) *HTMLP {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLP) OnInput(h EventHandler) *HTMLP {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLP) OnInvalid(h EventHandler) *HTMLP {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLP) OnKeyDown(h EventHandler) *HTMLP {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLP) OnKeyPress(h EventHandler) *HTMLP {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLP) OnKeyup(h EventHandler) *HTMLP {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLP) OnMouseDown(h EventHandler) *HTMLP {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLP) OnMouseMove(h EventHandler) *HTMLP {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLP) OnMouseOut(h EventHandler) *HTMLP {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLP) OnMouseOver(h EventHandler) *HTMLP {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLP) OnMouseUp(h EventHandler) *HTMLP {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLP) OnPaste(h EventHandler) *HTMLP {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLP) OnReset(h EventHandler) *HTMLP {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLP) OnScroll(h EventHandler) *HTMLP {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLP) OnSearch(h EventHandler) *HTMLP {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLP) OnSelect(h EventHandler) *HTMLP {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLP) OnSubmit(h EventHandler) *HTMLP {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLP) OnWheel(h EventHandler) *HTMLP {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLP) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLParam represents an HTML element <param>.
type HTMLParam struct {
	elem
}

// Param returns an HTML element that defines a parameter for an object.
func Param() *HTMLParam {
	return &HTMLParam{
		elem: elem{
			tag:         "param",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLParam) AccessKey(v string) *HTMLParam {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLParam) Class(v string) *HTMLParam {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLParam) ContentEditable(v bool) *HTMLParam {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLParam) DataSet(k, v string) *HTMLParam {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLParam) Dir(v string) *HTMLParam {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLParam) Draggable(v bool) *HTMLParam {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLParam) Hidden(v bool) *HTMLParam {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLParam) ID(v string) *HTMLParam {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLParam) Lang(v string) *HTMLParam {
	e.elem.setAttribute("lang", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLParam) Name(v string) *HTMLParam {
	e.elem.setAttribute("name", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLParam) Spellcheck(v bool) *HTMLParam {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLParam) Style(v string) *HTMLParam {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLParam) TabIndex(v int) *HTMLParam {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLParam) Title(v string) *HTMLParam {
	e.elem.setAttribute("title", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLParam) Value(v interface{}) *HTMLParam {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLParam) OnBlur(h EventHandler) *HTMLParam {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLParam) OnChange(h EventHandler) *HTMLParam {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLParam) OnClick(h EventHandler) *HTMLParam {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLParam) OnContextMenu(h EventHandler) *HTMLParam {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLParam) OnCopy(h EventHandler) *HTMLParam {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLParam) OnCut(h EventHandler) *HTMLParam {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLParam) OnDblClick(h EventHandler) *HTMLParam {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLParam) OnDrag(h EventHandler) *HTMLParam {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLParam) OnDragEnd(h EventHandler) *HTMLParam {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLParam) OnDragEnter(h EventHandler) *HTMLParam {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLParam) OnDragLeave(h EventHandler) *HTMLParam {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLParam) OnDragOver(h EventHandler) *HTMLParam {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLParam) OnDragStart(h EventHandler) *HTMLParam {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLParam) OnDrop(h EventHandler) *HTMLParam {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLParam) OnFocus(h EventHandler) *HTMLParam {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLParam) OnInput(h EventHandler) *HTMLParam {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLParam) OnInvalid(h EventHandler) *HTMLParam {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLParam) OnKeyDown(h EventHandler) *HTMLParam {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLParam) OnKeyPress(h EventHandler) *HTMLParam {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLParam) OnKeyup(h EventHandler) *HTMLParam {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLParam) OnMouseDown(h EventHandler) *HTMLParam {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLParam) OnMouseMove(h EventHandler) *HTMLParam {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLParam) OnMouseOut(h EventHandler) *HTMLParam {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLParam) OnMouseOver(h EventHandler) *HTMLParam {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLParam) OnMouseUp(h EventHandler) *HTMLParam {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLParam) OnPaste(h EventHandler) *HTMLParam {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLParam) OnReset(h EventHandler) *HTMLParam {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLParam) OnScroll(h EventHandler) *HTMLParam {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLParam) OnSearch(h EventHandler) *HTMLParam {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLParam) OnSelect(h EventHandler) *HTMLParam {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLParam) OnSubmit(h EventHandler) *HTMLParam {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLParam) OnWheel(h EventHandler) *HTMLParam {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLParam) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLPicture represents an HTML element <picture>.
type HTMLPicture struct {
	elem
}

// Picture returns an HTML element that defines a container for multiple image resources.
func Picture() *HTMLPicture {
	return &HTMLPicture{
		elem: elem{
			tag:         "picture",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLPicture) Body(nodes ...Node) *HTMLPicture {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLPicture) AccessKey(v string) *HTMLPicture {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLPicture) Class(v string) *HTMLPicture {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLPicture) ContentEditable(v bool) *HTMLPicture {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLPicture) DataSet(k, v string) *HTMLPicture {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLPicture) Dir(v string) *HTMLPicture {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLPicture) Draggable(v bool) *HTMLPicture {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLPicture) Hidden(v bool) *HTMLPicture {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLPicture) ID(v string) *HTMLPicture {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLPicture) Lang(v string) *HTMLPicture {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLPicture) Spellcheck(v bool) *HTMLPicture {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLPicture) Style(v string) *HTMLPicture {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLPicture) TabIndex(v int) *HTMLPicture {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLPicture) Title(v string) *HTMLPicture {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLPicture) OnBlur(h EventHandler) *HTMLPicture {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLPicture) OnChange(h EventHandler) *HTMLPicture {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLPicture) OnClick(h EventHandler) *HTMLPicture {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLPicture) OnContextMenu(h EventHandler) *HTMLPicture {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLPicture) OnCopy(h EventHandler) *HTMLPicture {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLPicture) OnCut(h EventHandler) *HTMLPicture {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLPicture) OnDblClick(h EventHandler) *HTMLPicture {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLPicture) OnDrag(h EventHandler) *HTMLPicture {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLPicture) OnDragEnd(h EventHandler) *HTMLPicture {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLPicture) OnDragEnter(h EventHandler) *HTMLPicture {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLPicture) OnDragLeave(h EventHandler) *HTMLPicture {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLPicture) OnDragOver(h EventHandler) *HTMLPicture {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLPicture) OnDragStart(h EventHandler) *HTMLPicture {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLPicture) OnDrop(h EventHandler) *HTMLPicture {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLPicture) OnFocus(h EventHandler) *HTMLPicture {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLPicture) OnInput(h EventHandler) *HTMLPicture {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLPicture) OnInvalid(h EventHandler) *HTMLPicture {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLPicture) OnKeyDown(h EventHandler) *HTMLPicture {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLPicture) OnKeyPress(h EventHandler) *HTMLPicture {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLPicture) OnKeyup(h EventHandler) *HTMLPicture {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLPicture) OnMouseDown(h EventHandler) *HTMLPicture {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLPicture) OnMouseMove(h EventHandler) *HTMLPicture {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLPicture) OnMouseOut(h EventHandler) *HTMLPicture {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLPicture) OnMouseOver(h EventHandler) *HTMLPicture {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLPicture) OnMouseUp(h EventHandler) *HTMLPicture {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLPicture) OnPaste(h EventHandler) *HTMLPicture {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLPicture) OnReset(h EventHandler) *HTMLPicture {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLPicture) OnScroll(h EventHandler) *HTMLPicture {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLPicture) OnSearch(h EventHandler) *HTMLPicture {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLPicture) OnSelect(h EventHandler) *HTMLPicture {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLPicture) OnSubmit(h EventHandler) *HTMLPicture {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLPicture) OnWheel(h EventHandler) *HTMLPicture {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLPicture) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLPre represents an HTML element <pre>.
type HTMLPre struct {
	elem
}

// Pre returns an HTML element that defines preformatted text.
func Pre() *HTMLPre {
	return &HTMLPre{
		elem: elem{
			tag:         "pre",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLPre) Body(nodes ...Node) *HTMLPre {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLPre) AccessKey(v string) *HTMLPre {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLPre) Class(v string) *HTMLPre {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLPre) ContentEditable(v bool) *HTMLPre {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLPre) DataSet(k, v string) *HTMLPre {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLPre) Dir(v string) *HTMLPre {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLPre) Draggable(v bool) *HTMLPre {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLPre) Hidden(v bool) *HTMLPre {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLPre) ID(v string) *HTMLPre {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLPre) Lang(v string) *HTMLPre {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLPre) Spellcheck(v bool) *HTMLPre {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLPre) Style(v string) *HTMLPre {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLPre) TabIndex(v int) *HTMLPre {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLPre) Title(v string) *HTMLPre {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLPre) OnBlur(h EventHandler) *HTMLPre {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLPre) OnChange(h EventHandler) *HTMLPre {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLPre) OnClick(h EventHandler) *HTMLPre {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLPre) OnContextMenu(h EventHandler) *HTMLPre {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLPre) OnCopy(h EventHandler) *HTMLPre {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLPre) OnCut(h EventHandler) *HTMLPre {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLPre) OnDblClick(h EventHandler) *HTMLPre {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLPre) OnDrag(h EventHandler) *HTMLPre {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLPre) OnDragEnd(h EventHandler) *HTMLPre {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLPre) OnDragEnter(h EventHandler) *HTMLPre {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLPre) OnDragLeave(h EventHandler) *HTMLPre {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLPre) OnDragOver(h EventHandler) *HTMLPre {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLPre) OnDragStart(h EventHandler) *HTMLPre {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLPre) OnDrop(h EventHandler) *HTMLPre {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLPre) OnFocus(h EventHandler) *HTMLPre {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLPre) OnInput(h EventHandler) *HTMLPre {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLPre) OnInvalid(h EventHandler) *HTMLPre {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLPre) OnKeyDown(h EventHandler) *HTMLPre {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLPre) OnKeyPress(h EventHandler) *HTMLPre {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLPre) OnKeyup(h EventHandler) *HTMLPre {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLPre) OnMouseDown(h EventHandler) *HTMLPre {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLPre) OnMouseMove(h EventHandler) *HTMLPre {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLPre) OnMouseOut(h EventHandler) *HTMLPre {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLPre) OnMouseOver(h EventHandler) *HTMLPre {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLPre) OnMouseUp(h EventHandler) *HTMLPre {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLPre) OnPaste(h EventHandler) *HTMLPre {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLPre) OnReset(h EventHandler) *HTMLPre {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLPre) OnScroll(h EventHandler) *HTMLPre {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLPre) OnSearch(h EventHandler) *HTMLPre {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLPre) OnSelect(h EventHandler) *HTMLPre {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLPre) OnSubmit(h EventHandler) *HTMLPre {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLPre) OnWheel(h EventHandler) *HTMLPre {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLPre) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLProgress represents an HTML element <progress>.
type HTMLProgress struct {
	elem
}

// Progress returns an HTML element that represents the progress of a task.
func Progress() *HTMLProgress {
	return &HTMLProgress{
		elem: elem{
			tag:         "progress",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLProgress) Body(nodes ...Node) *HTMLProgress {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLProgress) AccessKey(v string) *HTMLProgress {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLProgress) Class(v string) *HTMLProgress {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLProgress) ContentEditable(v bool) *HTMLProgress {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLProgress) DataSet(k, v string) *HTMLProgress {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLProgress) Dir(v string) *HTMLProgress {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLProgress) Draggable(v bool) *HTMLProgress {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLProgress) Hidden(v bool) *HTMLProgress {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLProgress) ID(v string) *HTMLProgress {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLProgress) Lang(v string) *HTMLProgress {
	e.elem.setAttribute("lang", v)
	return e
}

// Max Specifies the maximum value.
func (e *HTMLProgress) Max(v string) *HTMLProgress {
	e.elem.setAttribute("max", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLProgress) Spellcheck(v bool) *HTMLProgress {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLProgress) Style(v string) *HTMLProgress {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLProgress) TabIndex(v int) *HTMLProgress {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLProgress) Title(v string) *HTMLProgress {
	e.elem.setAttribute("title", v)
	return e
}

// Value specifies the value of the element.
func (e *HTMLProgress) Value(v interface{}) *HTMLProgress {
	e.elem.setAttribute("value", fmt.Sprintf("%v", v))
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLProgress) OnBlur(h EventHandler) *HTMLProgress {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLProgress) OnChange(h EventHandler) *HTMLProgress {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLProgress) OnClick(h EventHandler) *HTMLProgress {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLProgress) OnContextMenu(h EventHandler) *HTMLProgress {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLProgress) OnCopy(h EventHandler) *HTMLProgress {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLProgress) OnCut(h EventHandler) *HTMLProgress {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLProgress) OnDblClick(h EventHandler) *HTMLProgress {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLProgress) OnDrag(h EventHandler) *HTMLProgress {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLProgress) OnDragEnd(h EventHandler) *HTMLProgress {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLProgress) OnDragEnter(h EventHandler) *HTMLProgress {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLProgress) OnDragLeave(h EventHandler) *HTMLProgress {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLProgress) OnDragOver(h EventHandler) *HTMLProgress {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLProgress) OnDragStart(h EventHandler) *HTMLProgress {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLProgress) OnDrop(h EventHandler) *HTMLProgress {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLProgress) OnFocus(h EventHandler) *HTMLProgress {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLProgress) OnInput(h EventHandler) *HTMLProgress {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLProgress) OnInvalid(h EventHandler) *HTMLProgress {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLProgress) OnKeyDown(h EventHandler) *HTMLProgress {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLProgress) OnKeyPress(h EventHandler) *HTMLProgress {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLProgress) OnKeyup(h EventHandler) *HTMLProgress {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLProgress) OnMouseDown(h EventHandler) *HTMLProgress {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLProgress) OnMouseMove(h EventHandler) *HTMLProgress {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLProgress) OnMouseOut(h EventHandler) *HTMLProgress {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLProgress) OnMouseOver(h EventHandler) *HTMLProgress {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLProgress) OnMouseUp(h EventHandler) *HTMLProgress {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLProgress) OnPaste(h EventHandler) *HTMLProgress {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLProgress) OnReset(h EventHandler) *HTMLProgress {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLProgress) OnScroll(h EventHandler) *HTMLProgress {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLProgress) OnSearch(h EventHandler) *HTMLProgress {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLProgress) OnSelect(h EventHandler) *HTMLProgress {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLProgress) OnSubmit(h EventHandler) *HTMLProgress {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLProgress) OnWheel(h EventHandler) *HTMLProgress {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLProgress) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLQ represents an HTML element <q>.
type HTMLQ struct {
	elem
}

// Q returns an HTML element that defines a short quotation.
func Q() *HTMLQ {
	return &HTMLQ{
		elem: elem{
			tag:         "q",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLQ) Body(nodes ...Node) *HTMLQ {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLQ) AccessKey(v string) *HTMLQ {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Cite specifies a URL which explains the quote/deleted/inserted text.
func (e *HTMLQ) Cite(v string) *HTMLQ {
	e.elem.setAttribute("cite", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLQ) Class(v string) *HTMLQ {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLQ) ContentEditable(v bool) *HTMLQ {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLQ) DataSet(k, v string) *HTMLQ {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLQ) Dir(v string) *HTMLQ {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLQ) Draggable(v bool) *HTMLQ {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLQ) Hidden(v bool) *HTMLQ {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLQ) ID(v string) *HTMLQ {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLQ) Lang(v string) *HTMLQ {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLQ) Spellcheck(v bool) *HTMLQ {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLQ) Style(v string) *HTMLQ {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLQ) TabIndex(v int) *HTMLQ {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLQ) Title(v string) *HTMLQ {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLQ) OnBlur(h EventHandler) *HTMLQ {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLQ) OnChange(h EventHandler) *HTMLQ {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLQ) OnClick(h EventHandler) *HTMLQ {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLQ) OnContextMenu(h EventHandler) *HTMLQ {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLQ) OnCopy(h EventHandler) *HTMLQ {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLQ) OnCut(h EventHandler) *HTMLQ {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLQ) OnDblClick(h EventHandler) *HTMLQ {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLQ) OnDrag(h EventHandler) *HTMLQ {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLQ) OnDragEnd(h EventHandler) *HTMLQ {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLQ) OnDragEnter(h EventHandler) *HTMLQ {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLQ) OnDragLeave(h EventHandler) *HTMLQ {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLQ) OnDragOver(h EventHandler) *HTMLQ {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLQ) OnDragStart(h EventHandler) *HTMLQ {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLQ) OnDrop(h EventHandler) *HTMLQ {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLQ) OnFocus(h EventHandler) *HTMLQ {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLQ) OnInput(h EventHandler) *HTMLQ {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLQ) OnInvalid(h EventHandler) *HTMLQ {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLQ) OnKeyDown(h EventHandler) *HTMLQ {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLQ) OnKeyPress(h EventHandler) *HTMLQ {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLQ) OnKeyup(h EventHandler) *HTMLQ {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLQ) OnMouseDown(h EventHandler) *HTMLQ {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLQ) OnMouseMove(h EventHandler) *HTMLQ {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLQ) OnMouseOut(h EventHandler) *HTMLQ {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLQ) OnMouseOver(h EventHandler) *HTMLQ {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLQ) OnMouseUp(h EventHandler) *HTMLQ {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLQ) OnPaste(h EventHandler) *HTMLQ {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLQ) OnReset(h EventHandler) *HTMLQ {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLQ) OnScroll(h EventHandler) *HTMLQ {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLQ) OnSearch(h EventHandler) *HTMLQ {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLQ) OnSelect(h EventHandler) *HTMLQ {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLQ) OnSubmit(h EventHandler) *HTMLQ {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLQ) OnWheel(h EventHandler) *HTMLQ {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLQ) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLRp represents an HTML element <rp>.
type HTMLRp struct {
	elem
}

// Rp returns an HTML element that defines what to show in browsers that do not support ruby annotations.
func Rp() *HTMLRp {
	return &HTMLRp{
		elem: elem{
			tag:         "rp",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLRp) Body(nodes ...Node) *HTMLRp {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLRp) AccessKey(v string) *HTMLRp {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLRp) Class(v string) *HTMLRp {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLRp) ContentEditable(v bool) *HTMLRp {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLRp) DataSet(k, v string) *HTMLRp {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLRp) Dir(v string) *HTMLRp {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLRp) Draggable(v bool) *HTMLRp {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLRp) Hidden(v bool) *HTMLRp {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLRp) ID(v string) *HTMLRp {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLRp) Lang(v string) *HTMLRp {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLRp) Spellcheck(v bool) *HTMLRp {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLRp) Style(v string) *HTMLRp {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLRp) TabIndex(v int) *HTMLRp {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLRp) Title(v string) *HTMLRp {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLRp) OnBlur(h EventHandler) *HTMLRp {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLRp) OnChange(h EventHandler) *HTMLRp {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLRp) OnClick(h EventHandler) *HTMLRp {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLRp) OnContextMenu(h EventHandler) *HTMLRp {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLRp) OnCopy(h EventHandler) *HTMLRp {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLRp) OnCut(h EventHandler) *HTMLRp {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLRp) OnDblClick(h EventHandler) *HTMLRp {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLRp) OnDrag(h EventHandler) *HTMLRp {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLRp) OnDragEnd(h EventHandler) *HTMLRp {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLRp) OnDragEnter(h EventHandler) *HTMLRp {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLRp) OnDragLeave(h EventHandler) *HTMLRp {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLRp) OnDragOver(h EventHandler) *HTMLRp {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLRp) OnDragStart(h EventHandler) *HTMLRp {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLRp) OnDrop(h EventHandler) *HTMLRp {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLRp) OnFocus(h EventHandler) *HTMLRp {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLRp) OnInput(h EventHandler) *HTMLRp {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLRp) OnInvalid(h EventHandler) *HTMLRp {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLRp) OnKeyDown(h EventHandler) *HTMLRp {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLRp) OnKeyPress(h EventHandler) *HTMLRp {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLRp) OnKeyup(h EventHandler) *HTMLRp {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLRp) OnMouseDown(h EventHandler) *HTMLRp {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLRp) OnMouseMove(h EventHandler) *HTMLRp {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLRp) OnMouseOut(h EventHandler) *HTMLRp {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLRp) OnMouseOver(h EventHandler) *HTMLRp {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLRp) OnMouseUp(h EventHandler) *HTMLRp {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLRp) OnPaste(h EventHandler) *HTMLRp {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLRp) OnReset(h EventHandler) *HTMLRp {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLRp) OnScroll(h EventHandler) *HTMLRp {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLRp) OnSearch(h EventHandler) *HTMLRp {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLRp) OnSelect(h EventHandler) *HTMLRp {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLRp) OnSubmit(h EventHandler) *HTMLRp {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLRp) OnWheel(h EventHandler) *HTMLRp {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLRp) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLRt represents an HTML element <rt>.
type HTMLRt struct {
	elem
}

// Rt returns an HTML element that defines an explanation/pronunciation of characters (for East Asian typography).
func Rt() *HTMLRt {
	return &HTMLRt{
		elem: elem{
			tag:         "rt",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLRt) Body(nodes ...Node) *HTMLRt {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLRt) AccessKey(v string) *HTMLRt {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLRt) Class(v string) *HTMLRt {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLRt) ContentEditable(v bool) *HTMLRt {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLRt) DataSet(k, v string) *HTMLRt {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLRt) Dir(v string) *HTMLRt {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLRt) Draggable(v bool) *HTMLRt {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLRt) Hidden(v bool) *HTMLRt {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLRt) ID(v string) *HTMLRt {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLRt) Lang(v string) *HTMLRt {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLRt) Spellcheck(v bool) *HTMLRt {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLRt) Style(v string) *HTMLRt {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLRt) TabIndex(v int) *HTMLRt {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLRt) Title(v string) *HTMLRt {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLRt) OnBlur(h EventHandler) *HTMLRt {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLRt) OnChange(h EventHandler) *HTMLRt {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLRt) OnClick(h EventHandler) *HTMLRt {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLRt) OnContextMenu(h EventHandler) *HTMLRt {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLRt) OnCopy(h EventHandler) *HTMLRt {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLRt) OnCut(h EventHandler) *HTMLRt {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLRt) OnDblClick(h EventHandler) *HTMLRt {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLRt) OnDrag(h EventHandler) *HTMLRt {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLRt) OnDragEnd(h EventHandler) *HTMLRt {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLRt) OnDragEnter(h EventHandler) *HTMLRt {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLRt) OnDragLeave(h EventHandler) *HTMLRt {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLRt) OnDragOver(h EventHandler) *HTMLRt {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLRt) OnDragStart(h EventHandler) *HTMLRt {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLRt) OnDrop(h EventHandler) *HTMLRt {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLRt) OnFocus(h EventHandler) *HTMLRt {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLRt) OnInput(h EventHandler) *HTMLRt {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLRt) OnInvalid(h EventHandler) *HTMLRt {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLRt) OnKeyDown(h EventHandler) *HTMLRt {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLRt) OnKeyPress(h EventHandler) *HTMLRt {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLRt) OnKeyup(h EventHandler) *HTMLRt {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLRt) OnMouseDown(h EventHandler) *HTMLRt {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLRt) OnMouseMove(h EventHandler) *HTMLRt {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLRt) OnMouseOut(h EventHandler) *HTMLRt {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLRt) OnMouseOver(h EventHandler) *HTMLRt {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLRt) OnMouseUp(h EventHandler) *HTMLRt {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLRt) OnPaste(h EventHandler) *HTMLRt {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLRt) OnReset(h EventHandler) *HTMLRt {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLRt) OnScroll(h EventHandler) *HTMLRt {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLRt) OnSearch(h EventHandler) *HTMLRt {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLRt) OnSelect(h EventHandler) *HTMLRt {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLRt) OnSubmit(h EventHandler) *HTMLRt {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLRt) OnWheel(h EventHandler) *HTMLRt {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLRt) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLRuby represents an HTML element <ruby>.
type HTMLRuby struct {
	elem
}

// Ruby returns an HTML element that defines a ruby annotation (for East Asian typography).
func Ruby() *HTMLRuby {
	return &HTMLRuby{
		elem: elem{
			tag:         "ruby",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLRuby) Body(nodes ...Node) *HTMLRuby {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLRuby) AccessKey(v string) *HTMLRuby {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLRuby) Class(v string) *HTMLRuby {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLRuby) ContentEditable(v bool) *HTMLRuby {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLRuby) DataSet(k, v string) *HTMLRuby {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLRuby) Dir(v string) *HTMLRuby {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLRuby) Draggable(v bool) *HTMLRuby {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLRuby) Hidden(v bool) *HTMLRuby {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLRuby) ID(v string) *HTMLRuby {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLRuby) Lang(v string) *HTMLRuby {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLRuby) Spellcheck(v bool) *HTMLRuby {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLRuby) Style(v string) *HTMLRuby {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLRuby) TabIndex(v int) *HTMLRuby {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLRuby) Title(v string) *HTMLRuby {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLRuby) OnBlur(h EventHandler) *HTMLRuby {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLRuby) OnChange(h EventHandler) *HTMLRuby {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLRuby) OnClick(h EventHandler) *HTMLRuby {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLRuby) OnContextMenu(h EventHandler) *HTMLRuby {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLRuby) OnCopy(h EventHandler) *HTMLRuby {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLRuby) OnCut(h EventHandler) *HTMLRuby {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLRuby) OnDblClick(h EventHandler) *HTMLRuby {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLRuby) OnDrag(h EventHandler) *HTMLRuby {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLRuby) OnDragEnd(h EventHandler) *HTMLRuby {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLRuby) OnDragEnter(h EventHandler) *HTMLRuby {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLRuby) OnDragLeave(h EventHandler) *HTMLRuby {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLRuby) OnDragOver(h EventHandler) *HTMLRuby {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLRuby) OnDragStart(h EventHandler) *HTMLRuby {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLRuby) OnDrop(h EventHandler) *HTMLRuby {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLRuby) OnFocus(h EventHandler) *HTMLRuby {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLRuby) OnInput(h EventHandler) *HTMLRuby {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLRuby) OnInvalid(h EventHandler) *HTMLRuby {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLRuby) OnKeyDown(h EventHandler) *HTMLRuby {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLRuby) OnKeyPress(h EventHandler) *HTMLRuby {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLRuby) OnKeyup(h EventHandler) *HTMLRuby {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLRuby) OnMouseDown(h EventHandler) *HTMLRuby {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLRuby) OnMouseMove(h EventHandler) *HTMLRuby {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLRuby) OnMouseOut(h EventHandler) *HTMLRuby {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLRuby) OnMouseOver(h EventHandler) *HTMLRuby {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLRuby) OnMouseUp(h EventHandler) *HTMLRuby {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLRuby) OnPaste(h EventHandler) *HTMLRuby {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLRuby) OnReset(h EventHandler) *HTMLRuby {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLRuby) OnScroll(h EventHandler) *HTMLRuby {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLRuby) OnSearch(h EventHandler) *HTMLRuby {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLRuby) OnSelect(h EventHandler) *HTMLRuby {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLRuby) OnSubmit(h EventHandler) *HTMLRuby {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLRuby) OnWheel(h EventHandler) *HTMLRuby {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLRuby) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLS represents an HTML element <s>.
type HTMLS struct {
	elem
}

// S returns an HTML element that Defines text that is no longer correct.
func S() *HTMLS {
	return &HTMLS{
		elem: elem{
			tag:         "s",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLS) Body(nodes ...Node) *HTMLS {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLS) AccessKey(v string) *HTMLS {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLS) Class(v string) *HTMLS {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLS) ContentEditable(v bool) *HTMLS {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLS) DataSet(k, v string) *HTMLS {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLS) Dir(v string) *HTMLS {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLS) Draggable(v bool) *HTMLS {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLS) Hidden(v bool) *HTMLS {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLS) ID(v string) *HTMLS {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLS) Lang(v string) *HTMLS {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLS) Spellcheck(v bool) *HTMLS {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLS) Style(v string) *HTMLS {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLS) TabIndex(v int) *HTMLS {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLS) Title(v string) *HTMLS {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLS) OnBlur(h EventHandler) *HTMLS {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLS) OnChange(h EventHandler) *HTMLS {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLS) OnClick(h EventHandler) *HTMLS {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLS) OnContextMenu(h EventHandler) *HTMLS {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLS) OnCopy(h EventHandler) *HTMLS {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLS) OnCut(h EventHandler) *HTMLS {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLS) OnDblClick(h EventHandler) *HTMLS {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLS) OnDrag(h EventHandler) *HTMLS {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLS) OnDragEnd(h EventHandler) *HTMLS {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLS) OnDragEnter(h EventHandler) *HTMLS {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLS) OnDragLeave(h EventHandler) *HTMLS {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLS) OnDragOver(h EventHandler) *HTMLS {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLS) OnDragStart(h EventHandler) *HTMLS {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLS) OnDrop(h EventHandler) *HTMLS {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLS) OnFocus(h EventHandler) *HTMLS {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLS) OnInput(h EventHandler) *HTMLS {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLS) OnInvalid(h EventHandler) *HTMLS {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLS) OnKeyDown(h EventHandler) *HTMLS {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLS) OnKeyPress(h EventHandler) *HTMLS {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLS) OnKeyup(h EventHandler) *HTMLS {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLS) OnMouseDown(h EventHandler) *HTMLS {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLS) OnMouseMove(h EventHandler) *HTMLS {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLS) OnMouseOut(h EventHandler) *HTMLS {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLS) OnMouseOver(h EventHandler) *HTMLS {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLS) OnMouseUp(h EventHandler) *HTMLS {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLS) OnPaste(h EventHandler) *HTMLS {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLS) OnReset(h EventHandler) *HTMLS {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLS) OnScroll(h EventHandler) *HTMLS {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLS) OnSearch(h EventHandler) *HTMLS {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLS) OnSelect(h EventHandler) *HTMLS {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLS) OnSubmit(h EventHandler) *HTMLS {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLS) OnWheel(h EventHandler) *HTMLS {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLS) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSamp represents an HTML element <samp>.
type HTMLSamp struct {
	elem
}

// Samp returns an HTML element that defines sample output from a computer program.
func Samp() *HTMLSamp {
	return &HTMLSamp{
		elem: elem{
			tag:         "samp",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSamp) Body(nodes ...Node) *HTMLSamp {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSamp) AccessKey(v string) *HTMLSamp {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSamp) Class(v string) *HTMLSamp {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSamp) ContentEditable(v bool) *HTMLSamp {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSamp) DataSet(k, v string) *HTMLSamp {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSamp) Dir(v string) *HTMLSamp {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSamp) Draggable(v bool) *HTMLSamp {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSamp) Hidden(v bool) *HTMLSamp {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSamp) ID(v string) *HTMLSamp {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSamp) Lang(v string) *HTMLSamp {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSamp) Spellcheck(v bool) *HTMLSamp {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSamp) Style(v string) *HTMLSamp {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSamp) TabIndex(v int) *HTMLSamp {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSamp) Title(v string) *HTMLSamp {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSamp) OnBlur(h EventHandler) *HTMLSamp {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSamp) OnChange(h EventHandler) *HTMLSamp {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSamp) OnClick(h EventHandler) *HTMLSamp {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSamp) OnContextMenu(h EventHandler) *HTMLSamp {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSamp) OnCopy(h EventHandler) *HTMLSamp {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSamp) OnCut(h EventHandler) *HTMLSamp {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSamp) OnDblClick(h EventHandler) *HTMLSamp {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSamp) OnDrag(h EventHandler) *HTMLSamp {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSamp) OnDragEnd(h EventHandler) *HTMLSamp {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSamp) OnDragEnter(h EventHandler) *HTMLSamp {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSamp) OnDragLeave(h EventHandler) *HTMLSamp {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSamp) OnDragOver(h EventHandler) *HTMLSamp {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSamp) OnDragStart(h EventHandler) *HTMLSamp {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSamp) OnDrop(h EventHandler) *HTMLSamp {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSamp) OnFocus(h EventHandler) *HTMLSamp {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSamp) OnInput(h EventHandler) *HTMLSamp {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSamp) OnInvalid(h EventHandler) *HTMLSamp {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSamp) OnKeyDown(h EventHandler) *HTMLSamp {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSamp) OnKeyPress(h EventHandler) *HTMLSamp {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSamp) OnKeyup(h EventHandler) *HTMLSamp {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSamp) OnMouseDown(h EventHandler) *HTMLSamp {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSamp) OnMouseMove(h EventHandler) *HTMLSamp {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSamp) OnMouseOut(h EventHandler) *HTMLSamp {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSamp) OnMouseOver(h EventHandler) *HTMLSamp {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSamp) OnMouseUp(h EventHandler) *HTMLSamp {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSamp) OnPaste(h EventHandler) *HTMLSamp {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSamp) OnReset(h EventHandler) *HTMLSamp {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSamp) OnScroll(h EventHandler) *HTMLSamp {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSamp) OnSearch(h EventHandler) *HTMLSamp {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSamp) OnSelect(h EventHandler) *HTMLSamp {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSamp) OnSubmit(h EventHandler) *HTMLSamp {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSamp) OnWheel(h EventHandler) *HTMLSamp {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSamp) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLScript represents an HTML element <script>.
type HTMLScript struct {
	elem
}

// Script returns an HTML element that defines a client-side script.
func Script() *HTMLScript {
	return &HTMLScript{
		elem: elem{
			tag:         "script",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLScript) Body(nodes ...Node) *HTMLScript {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLScript) AccessKey(v string) *HTMLScript {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Async specifies that the script is executed asynchronously (only for external scripts).
func (e *HTMLScript) Async(v bool) *HTMLScript {
	e.elem.setAttribute("async", v)
	return e
}

// Charset specifies the character encoding.
func (e *HTMLScript) Charset(v string) *HTMLScript {
	e.elem.setAttribute("charset", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLScript) Class(v string) *HTMLScript {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLScript) ContentEditable(v bool) *HTMLScript {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLScript) DataSet(k, v string) *HTMLScript {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Defer specifies that the script is executed when the page has finished parsing (only for external scripts).
func (e *HTMLScript) Defer(v bool) *HTMLScript {
	e.elem.setAttribute("defer", v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLScript) Dir(v string) *HTMLScript {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLScript) Draggable(v bool) *HTMLScript {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLScript) Hidden(v bool) *HTMLScript {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLScript) ID(v string) *HTMLScript {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLScript) Lang(v string) *HTMLScript {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLScript) Spellcheck(v bool) *HTMLScript {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLScript) Src(v string) *HTMLScript {
	e.elem.setAttribute("src", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLScript) Style(v string) *HTMLScript {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLScript) TabIndex(v int) *HTMLScript {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLScript) Title(v string) *HTMLScript {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLScript) Type(v string) *HTMLScript {
	e.elem.setAttribute("type", v)
	return e
}

func (e *HTMLScript) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSection represents an HTML element <section>.
type HTMLSection struct {
	elem
}

// Section returns an HTML element that defines a section in a document.
func Section() *HTMLSection {
	return &HTMLSection{
		elem: elem{
			tag:         "section",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSection) Body(nodes ...Node) *HTMLSection {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSection) AccessKey(v string) *HTMLSection {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSection) Class(v string) *HTMLSection {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSection) ContentEditable(v bool) *HTMLSection {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSection) DataSet(k, v string) *HTMLSection {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSection) Dir(v string) *HTMLSection {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSection) Draggable(v bool) *HTMLSection {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSection) Hidden(v bool) *HTMLSection {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSection) ID(v string) *HTMLSection {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSection) Lang(v string) *HTMLSection {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSection) Spellcheck(v bool) *HTMLSection {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSection) Style(v string) *HTMLSection {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSection) TabIndex(v int) *HTMLSection {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSection) Title(v string) *HTMLSection {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSection) OnBlur(h EventHandler) *HTMLSection {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSection) OnChange(h EventHandler) *HTMLSection {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSection) OnClick(h EventHandler) *HTMLSection {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSection) OnContextMenu(h EventHandler) *HTMLSection {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSection) OnCopy(h EventHandler) *HTMLSection {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSection) OnCut(h EventHandler) *HTMLSection {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSection) OnDblClick(h EventHandler) *HTMLSection {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSection) OnDrag(h EventHandler) *HTMLSection {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSection) OnDragEnd(h EventHandler) *HTMLSection {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSection) OnDragEnter(h EventHandler) *HTMLSection {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSection) OnDragLeave(h EventHandler) *HTMLSection {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSection) OnDragOver(h EventHandler) *HTMLSection {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSection) OnDragStart(h EventHandler) *HTMLSection {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSection) OnDrop(h EventHandler) *HTMLSection {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSection) OnFocus(h EventHandler) *HTMLSection {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSection) OnInput(h EventHandler) *HTMLSection {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSection) OnInvalid(h EventHandler) *HTMLSection {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSection) OnKeyDown(h EventHandler) *HTMLSection {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSection) OnKeyPress(h EventHandler) *HTMLSection {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSection) OnKeyup(h EventHandler) *HTMLSection {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSection) OnMouseDown(h EventHandler) *HTMLSection {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSection) OnMouseMove(h EventHandler) *HTMLSection {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSection) OnMouseOut(h EventHandler) *HTMLSection {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSection) OnMouseOver(h EventHandler) *HTMLSection {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSection) OnMouseUp(h EventHandler) *HTMLSection {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSection) OnPaste(h EventHandler) *HTMLSection {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSection) OnReset(h EventHandler) *HTMLSection {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSection) OnScroll(h EventHandler) *HTMLSection {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSection) OnSearch(h EventHandler) *HTMLSection {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSection) OnSelect(h EventHandler) *HTMLSection {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSection) OnSubmit(h EventHandler) *HTMLSection {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSection) OnWheel(h EventHandler) *HTMLSection {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSection) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSelect represents an HTML element <select>.
type HTMLSelect struct {
	elem
}

// Select returns an HTML element that defines a drop-down list.
func Select() *HTMLSelect {
	return &HTMLSelect{
		elem: elem{
			tag:         "select",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSelect) Body(nodes ...Node) *HTMLSelect {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSelect) AccessKey(v string) *HTMLSelect {
	e.elem.setAttribute("accesskey", v)
	return e
}

// AutoFocus specifies that the element should automatically get focus when the page loads.
func (e *HTMLSelect) AutoFocus(v bool) *HTMLSelect {
	e.elem.setAttribute("autofocus", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSelect) Class(v string) *HTMLSelect {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSelect) ContentEditable(v bool) *HTMLSelect {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSelect) DataSet(k, v string) *HTMLSelect {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSelect) Dir(v string) *HTMLSelect {
	e.elem.setAttribute("dir", v)
	return e
}

// Disabled specifies that the specified element/group of elements should be disabled.
func (e *HTMLSelect) Disabled(v bool) *HTMLSelect {
	e.elem.setAttribute("disabled", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSelect) Draggable(v bool) *HTMLSelect {
	e.elem.setAttribute("draggable", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLSelect) Form(v string) *HTMLSelect {
	e.elem.setAttribute("form", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSelect) Hidden(v bool) *HTMLSelect {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSelect) ID(v string) *HTMLSelect {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSelect) Lang(v string) *HTMLSelect {
	e.elem.setAttribute("lang", v)
	return e
}

// Multiple specifies that a user can enter more than one value.
func (e *HTMLSelect) Multiple(v bool) *HTMLSelect {
	e.elem.setAttribute("multiple", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLSelect) Name(v string) *HTMLSelect {
	e.elem.setAttribute("name", v)
	return e
}

// Required specifies that the element must be filled out before submitting the form.
func (e *HTMLSelect) Required(v bool) *HTMLSelect {
	e.elem.setAttribute("required", v)
	return e
}

// Size specifies the width.
func (e *HTMLSelect) Size(v int) *HTMLSelect {
	e.elem.setAttribute("size", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSelect) Spellcheck(v bool) *HTMLSelect {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSelect) Style(v string) *HTMLSelect {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSelect) TabIndex(v int) *HTMLSelect {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSelect) Title(v string) *HTMLSelect {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSelect) OnBlur(h EventHandler) *HTMLSelect {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSelect) OnChange(h EventHandler) *HTMLSelect {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSelect) OnClick(h EventHandler) *HTMLSelect {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSelect) OnContextMenu(h EventHandler) *HTMLSelect {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSelect) OnCopy(h EventHandler) *HTMLSelect {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSelect) OnCut(h EventHandler) *HTMLSelect {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSelect) OnDblClick(h EventHandler) *HTMLSelect {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSelect) OnDrag(h EventHandler) *HTMLSelect {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSelect) OnDragEnd(h EventHandler) *HTMLSelect {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSelect) OnDragEnter(h EventHandler) *HTMLSelect {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSelect) OnDragLeave(h EventHandler) *HTMLSelect {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSelect) OnDragOver(h EventHandler) *HTMLSelect {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSelect) OnDragStart(h EventHandler) *HTMLSelect {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSelect) OnDrop(h EventHandler) *HTMLSelect {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSelect) OnFocus(h EventHandler) *HTMLSelect {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSelect) OnInput(h EventHandler) *HTMLSelect {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSelect) OnInvalid(h EventHandler) *HTMLSelect {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSelect) OnKeyDown(h EventHandler) *HTMLSelect {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSelect) OnKeyPress(h EventHandler) *HTMLSelect {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSelect) OnKeyup(h EventHandler) *HTMLSelect {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSelect) OnMouseDown(h EventHandler) *HTMLSelect {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSelect) OnMouseMove(h EventHandler) *HTMLSelect {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSelect) OnMouseOut(h EventHandler) *HTMLSelect {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSelect) OnMouseOver(h EventHandler) *HTMLSelect {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSelect) OnMouseUp(h EventHandler) *HTMLSelect {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSelect) OnPaste(h EventHandler) *HTMLSelect {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSelect) OnReset(h EventHandler) *HTMLSelect {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSelect) OnScroll(h EventHandler) *HTMLSelect {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSelect) OnSearch(h EventHandler) *HTMLSelect {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSelect) OnSelect(h EventHandler) *HTMLSelect {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSelect) OnSubmit(h EventHandler) *HTMLSelect {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSelect) OnWheel(h EventHandler) *HTMLSelect {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSelect) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSmall represents an HTML element <small>.
type HTMLSmall struct {
	elem
}

// Small returns an HTML element that defines smaller text.
func Small() *HTMLSmall {
	return &HTMLSmall{
		elem: elem{
			tag:         "small",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSmall) Body(nodes ...Node) *HTMLSmall {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSmall) AccessKey(v string) *HTMLSmall {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSmall) Class(v string) *HTMLSmall {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSmall) ContentEditable(v bool) *HTMLSmall {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSmall) DataSet(k, v string) *HTMLSmall {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSmall) Dir(v string) *HTMLSmall {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSmall) Draggable(v bool) *HTMLSmall {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSmall) Hidden(v bool) *HTMLSmall {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSmall) ID(v string) *HTMLSmall {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSmall) Lang(v string) *HTMLSmall {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSmall) Spellcheck(v bool) *HTMLSmall {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSmall) Style(v string) *HTMLSmall {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSmall) TabIndex(v int) *HTMLSmall {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSmall) Title(v string) *HTMLSmall {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSmall) OnBlur(h EventHandler) *HTMLSmall {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSmall) OnChange(h EventHandler) *HTMLSmall {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSmall) OnClick(h EventHandler) *HTMLSmall {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSmall) OnContextMenu(h EventHandler) *HTMLSmall {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSmall) OnCopy(h EventHandler) *HTMLSmall {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSmall) OnCut(h EventHandler) *HTMLSmall {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSmall) OnDblClick(h EventHandler) *HTMLSmall {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSmall) OnDrag(h EventHandler) *HTMLSmall {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSmall) OnDragEnd(h EventHandler) *HTMLSmall {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSmall) OnDragEnter(h EventHandler) *HTMLSmall {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSmall) OnDragLeave(h EventHandler) *HTMLSmall {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSmall) OnDragOver(h EventHandler) *HTMLSmall {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSmall) OnDragStart(h EventHandler) *HTMLSmall {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSmall) OnDrop(h EventHandler) *HTMLSmall {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSmall) OnFocus(h EventHandler) *HTMLSmall {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSmall) OnInput(h EventHandler) *HTMLSmall {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSmall) OnInvalid(h EventHandler) *HTMLSmall {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSmall) OnKeyDown(h EventHandler) *HTMLSmall {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSmall) OnKeyPress(h EventHandler) *HTMLSmall {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSmall) OnKeyup(h EventHandler) *HTMLSmall {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSmall) OnMouseDown(h EventHandler) *HTMLSmall {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSmall) OnMouseMove(h EventHandler) *HTMLSmall {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSmall) OnMouseOut(h EventHandler) *HTMLSmall {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSmall) OnMouseOver(h EventHandler) *HTMLSmall {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSmall) OnMouseUp(h EventHandler) *HTMLSmall {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSmall) OnPaste(h EventHandler) *HTMLSmall {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSmall) OnReset(h EventHandler) *HTMLSmall {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSmall) OnScroll(h EventHandler) *HTMLSmall {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSmall) OnSearch(h EventHandler) *HTMLSmall {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSmall) OnSelect(h EventHandler) *HTMLSmall {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSmall) OnSubmit(h EventHandler) *HTMLSmall {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSmall) OnWheel(h EventHandler) *HTMLSmall {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSmall) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSource represents an HTML element <source>.
type HTMLSource struct {
	elem
}

// Source returns an HTML element that .
func Source() *HTMLSource {
	return &HTMLSource{
		elem: elem{
			tag:         "source",
			selfClosing: true,
		},
	}
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSource) AccessKey(v string) *HTMLSource {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSource) Class(v string) *HTMLSource {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSource) ContentEditable(v bool) *HTMLSource {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSource) DataSet(k, v string) *HTMLSource {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSource) Dir(v string) *HTMLSource {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSource) Draggable(v bool) *HTMLSource {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSource) Hidden(v bool) *HTMLSource {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSource) ID(v string) *HTMLSource {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSource) Lang(v string) *HTMLSource {
	e.elem.setAttribute("lang", v)
	return e
}

// Media specifies what media/device the linked document is optimized for.
func (e *HTMLSource) Media(v string) *HTMLSource {
	e.elem.setAttribute("media", v)
	return e
}

// Sizes specifies the size of the linked resource.
func (e *HTMLSource) Sizes(v string) *HTMLSource {
	e.elem.setAttribute("sizes", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSource) Spellcheck(v bool) *HTMLSource {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLSource) Src(v string) *HTMLSource {
	e.elem.setAttribute("src", v)
	return e
}

// SrcSet specifies the URL of the image to use in different situations.
func (e *HTMLSource) SrcSet(v string) *HTMLSource {
	e.elem.setAttribute("srcset", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSource) Style(v string) *HTMLSource {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSource) TabIndex(v int) *HTMLSource {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSource) Title(v string) *HTMLSource {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLSource) Type(v string) *HTMLSource {
	e.elem.setAttribute("type", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSource) OnBlur(h EventHandler) *HTMLSource {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSource) OnChange(h EventHandler) *HTMLSource {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSource) OnClick(h EventHandler) *HTMLSource {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSource) OnContextMenu(h EventHandler) *HTMLSource {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSource) OnCopy(h EventHandler) *HTMLSource {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSource) OnCut(h EventHandler) *HTMLSource {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSource) OnDblClick(h EventHandler) *HTMLSource {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSource) OnDrag(h EventHandler) *HTMLSource {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSource) OnDragEnd(h EventHandler) *HTMLSource {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSource) OnDragEnter(h EventHandler) *HTMLSource {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSource) OnDragLeave(h EventHandler) *HTMLSource {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSource) OnDragOver(h EventHandler) *HTMLSource {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSource) OnDragStart(h EventHandler) *HTMLSource {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSource) OnDrop(h EventHandler) *HTMLSource {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSource) OnFocus(h EventHandler) *HTMLSource {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSource) OnInput(h EventHandler) *HTMLSource {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSource) OnInvalid(h EventHandler) *HTMLSource {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSource) OnKeyDown(h EventHandler) *HTMLSource {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSource) OnKeyPress(h EventHandler) *HTMLSource {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSource) OnKeyup(h EventHandler) *HTMLSource {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSource) OnMouseDown(h EventHandler) *HTMLSource {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSource) OnMouseMove(h EventHandler) *HTMLSource {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSource) OnMouseOut(h EventHandler) *HTMLSource {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSource) OnMouseOver(h EventHandler) *HTMLSource {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSource) OnMouseUp(h EventHandler) *HTMLSource {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSource) OnPaste(h EventHandler) *HTMLSource {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSource) OnReset(h EventHandler) *HTMLSource {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSource) OnScroll(h EventHandler) *HTMLSource {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSource) OnSearch(h EventHandler) *HTMLSource {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSource) OnSelect(h EventHandler) *HTMLSource {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSource) OnSubmit(h EventHandler) *HTMLSource {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSource) OnWheel(h EventHandler) *HTMLSource {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSource) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSpan represents an HTML element <span>.
type HTMLSpan struct {
	elem
}

// Span returns an HTML element that defines a section in a document.
func Span() *HTMLSpan {
	return &HTMLSpan{
		elem: elem{
			tag:         "span",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSpan) Body(nodes ...Node) *HTMLSpan {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSpan) AccessKey(v string) *HTMLSpan {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSpan) Class(v string) *HTMLSpan {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSpan) ContentEditable(v bool) *HTMLSpan {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSpan) DataSet(k, v string) *HTMLSpan {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSpan) Dir(v string) *HTMLSpan {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSpan) Draggable(v bool) *HTMLSpan {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSpan) Hidden(v bool) *HTMLSpan {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSpan) ID(v string) *HTMLSpan {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSpan) Lang(v string) *HTMLSpan {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSpan) Spellcheck(v bool) *HTMLSpan {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSpan) Style(v string) *HTMLSpan {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSpan) TabIndex(v int) *HTMLSpan {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSpan) Title(v string) *HTMLSpan {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSpan) OnBlur(h EventHandler) *HTMLSpan {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSpan) OnChange(h EventHandler) *HTMLSpan {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSpan) OnClick(h EventHandler) *HTMLSpan {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSpan) OnContextMenu(h EventHandler) *HTMLSpan {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSpan) OnCopy(h EventHandler) *HTMLSpan {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSpan) OnCut(h EventHandler) *HTMLSpan {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSpan) OnDblClick(h EventHandler) *HTMLSpan {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSpan) OnDrag(h EventHandler) *HTMLSpan {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSpan) OnDragEnd(h EventHandler) *HTMLSpan {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSpan) OnDragEnter(h EventHandler) *HTMLSpan {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSpan) OnDragLeave(h EventHandler) *HTMLSpan {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSpan) OnDragOver(h EventHandler) *HTMLSpan {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSpan) OnDragStart(h EventHandler) *HTMLSpan {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSpan) OnDrop(h EventHandler) *HTMLSpan {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSpan) OnFocus(h EventHandler) *HTMLSpan {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSpan) OnInput(h EventHandler) *HTMLSpan {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSpan) OnInvalid(h EventHandler) *HTMLSpan {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSpan) OnKeyDown(h EventHandler) *HTMLSpan {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSpan) OnKeyPress(h EventHandler) *HTMLSpan {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSpan) OnKeyup(h EventHandler) *HTMLSpan {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSpan) OnMouseDown(h EventHandler) *HTMLSpan {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSpan) OnMouseMove(h EventHandler) *HTMLSpan {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSpan) OnMouseOut(h EventHandler) *HTMLSpan {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSpan) OnMouseOver(h EventHandler) *HTMLSpan {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSpan) OnMouseUp(h EventHandler) *HTMLSpan {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSpan) OnPaste(h EventHandler) *HTMLSpan {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSpan) OnReset(h EventHandler) *HTMLSpan {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSpan) OnScroll(h EventHandler) *HTMLSpan {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSpan) OnSearch(h EventHandler) *HTMLSpan {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSpan) OnSelect(h EventHandler) *HTMLSpan {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSpan) OnSubmit(h EventHandler) *HTMLSpan {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSpan) OnWheel(h EventHandler) *HTMLSpan {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSpan) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLStrong represents an HTML element <strong>.
type HTMLStrong struct {
	elem
}

// Strong returns an HTML element that defines important text.
func Strong() *HTMLStrong {
	return &HTMLStrong{
		elem: elem{
			tag:         "strong",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLStrong) Body(nodes ...Node) *HTMLStrong {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLStrong) AccessKey(v string) *HTMLStrong {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLStrong) Class(v string) *HTMLStrong {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLStrong) ContentEditable(v bool) *HTMLStrong {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLStrong) DataSet(k, v string) *HTMLStrong {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLStrong) Dir(v string) *HTMLStrong {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLStrong) Draggable(v bool) *HTMLStrong {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLStrong) Hidden(v bool) *HTMLStrong {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLStrong) ID(v string) *HTMLStrong {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLStrong) Lang(v string) *HTMLStrong {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLStrong) Spellcheck(v bool) *HTMLStrong {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLStrong) Style(v string) *HTMLStrong {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLStrong) TabIndex(v int) *HTMLStrong {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLStrong) Title(v string) *HTMLStrong {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLStrong) OnBlur(h EventHandler) *HTMLStrong {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLStrong) OnChange(h EventHandler) *HTMLStrong {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLStrong) OnClick(h EventHandler) *HTMLStrong {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLStrong) OnContextMenu(h EventHandler) *HTMLStrong {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLStrong) OnCopy(h EventHandler) *HTMLStrong {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLStrong) OnCut(h EventHandler) *HTMLStrong {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLStrong) OnDblClick(h EventHandler) *HTMLStrong {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLStrong) OnDrag(h EventHandler) *HTMLStrong {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLStrong) OnDragEnd(h EventHandler) *HTMLStrong {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLStrong) OnDragEnter(h EventHandler) *HTMLStrong {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLStrong) OnDragLeave(h EventHandler) *HTMLStrong {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLStrong) OnDragOver(h EventHandler) *HTMLStrong {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLStrong) OnDragStart(h EventHandler) *HTMLStrong {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLStrong) OnDrop(h EventHandler) *HTMLStrong {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLStrong) OnFocus(h EventHandler) *HTMLStrong {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLStrong) OnInput(h EventHandler) *HTMLStrong {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLStrong) OnInvalid(h EventHandler) *HTMLStrong {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLStrong) OnKeyDown(h EventHandler) *HTMLStrong {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLStrong) OnKeyPress(h EventHandler) *HTMLStrong {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLStrong) OnKeyup(h EventHandler) *HTMLStrong {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLStrong) OnMouseDown(h EventHandler) *HTMLStrong {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLStrong) OnMouseMove(h EventHandler) *HTMLStrong {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLStrong) OnMouseOut(h EventHandler) *HTMLStrong {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLStrong) OnMouseOver(h EventHandler) *HTMLStrong {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLStrong) OnMouseUp(h EventHandler) *HTMLStrong {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLStrong) OnPaste(h EventHandler) *HTMLStrong {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLStrong) OnReset(h EventHandler) *HTMLStrong {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLStrong) OnScroll(h EventHandler) *HTMLStrong {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLStrong) OnSearch(h EventHandler) *HTMLStrong {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLStrong) OnSelect(h EventHandler) *HTMLStrong {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLStrong) OnSubmit(h EventHandler) *HTMLStrong {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLStrong) OnWheel(h EventHandler) *HTMLStrong {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLStrong) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLStyle represents an HTML element <style>.
type HTMLStyle struct {
	elem
}

// Style returns an HTML element that defines style information for a document.
func Style() *HTMLStyle {
	return &HTMLStyle{
		elem: elem{
			tag:         "style",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLStyle) Body(nodes ...Node) *HTMLStyle {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLStyle) AccessKey(v string) *HTMLStyle {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLStyle) Class(v string) *HTMLStyle {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLStyle) ContentEditable(v bool) *HTMLStyle {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLStyle) DataSet(k, v string) *HTMLStyle {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLStyle) Dir(v string) *HTMLStyle {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLStyle) Draggable(v bool) *HTMLStyle {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLStyle) Hidden(v bool) *HTMLStyle {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLStyle) ID(v string) *HTMLStyle {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLStyle) Lang(v string) *HTMLStyle {
	e.elem.setAttribute("lang", v)
	return e
}

// Media specifies what media/device the linked document is optimized for.
func (e *HTMLStyle) Media(v string) *HTMLStyle {
	e.elem.setAttribute("media", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLStyle) Spellcheck(v bool) *HTMLStyle {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLStyle) Style(v string) *HTMLStyle {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLStyle) TabIndex(v int) *HTMLStyle {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLStyle) Title(v string) *HTMLStyle {
	e.elem.setAttribute("title", v)
	return e
}

// Type specifies the type of element.
func (e *HTMLStyle) Type(v string) *HTMLStyle {
	e.elem.setAttribute("type", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLStyle) OnBlur(h EventHandler) *HTMLStyle {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLStyle) OnChange(h EventHandler) *HTMLStyle {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLStyle) OnClick(h EventHandler) *HTMLStyle {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLStyle) OnContextMenu(h EventHandler) *HTMLStyle {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLStyle) OnCopy(h EventHandler) *HTMLStyle {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLStyle) OnCut(h EventHandler) *HTMLStyle {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLStyle) OnDblClick(h EventHandler) *HTMLStyle {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLStyle) OnDrag(h EventHandler) *HTMLStyle {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLStyle) OnDragEnd(h EventHandler) *HTMLStyle {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLStyle) OnDragEnter(h EventHandler) *HTMLStyle {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLStyle) OnDragLeave(h EventHandler) *HTMLStyle {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLStyle) OnDragOver(h EventHandler) *HTMLStyle {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLStyle) OnDragStart(h EventHandler) *HTMLStyle {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLStyle) OnDrop(h EventHandler) *HTMLStyle {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLStyle) OnFocus(h EventHandler) *HTMLStyle {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLStyle) OnInput(h EventHandler) *HTMLStyle {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLStyle) OnInvalid(h EventHandler) *HTMLStyle {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLStyle) OnKeyDown(h EventHandler) *HTMLStyle {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLStyle) OnKeyPress(h EventHandler) *HTMLStyle {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLStyle) OnKeyup(h EventHandler) *HTMLStyle {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLStyle) OnMouseDown(h EventHandler) *HTMLStyle {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLStyle) OnMouseMove(h EventHandler) *HTMLStyle {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLStyle) OnMouseOut(h EventHandler) *HTMLStyle {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLStyle) OnMouseOver(h EventHandler) *HTMLStyle {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLStyle) OnMouseUp(h EventHandler) *HTMLStyle {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLStyle) OnPaste(h EventHandler) *HTMLStyle {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLStyle) OnReset(h EventHandler) *HTMLStyle {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLStyle) OnScroll(h EventHandler) *HTMLStyle {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLStyle) OnSearch(h EventHandler) *HTMLStyle {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLStyle) OnSelect(h EventHandler) *HTMLStyle {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLStyle) OnSubmit(h EventHandler) *HTMLStyle {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLStyle) OnWheel(h EventHandler) *HTMLStyle {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLStyle) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSub represents an HTML element <sub>.
type HTMLSub struct {
	elem
}

// Sub returns an HTML element that defines subscripted text.
func Sub() *HTMLSub {
	return &HTMLSub{
		elem: elem{
			tag:         "sub",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSub) Body(nodes ...Node) *HTMLSub {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSub) AccessKey(v string) *HTMLSub {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSub) Class(v string) *HTMLSub {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSub) ContentEditable(v bool) *HTMLSub {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSub) DataSet(k, v string) *HTMLSub {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSub) Dir(v string) *HTMLSub {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSub) Draggable(v bool) *HTMLSub {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSub) Hidden(v bool) *HTMLSub {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSub) ID(v string) *HTMLSub {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSub) Lang(v string) *HTMLSub {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSub) Spellcheck(v bool) *HTMLSub {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSub) Style(v string) *HTMLSub {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSub) TabIndex(v int) *HTMLSub {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSub) Title(v string) *HTMLSub {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSub) OnBlur(h EventHandler) *HTMLSub {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSub) OnChange(h EventHandler) *HTMLSub {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSub) OnClick(h EventHandler) *HTMLSub {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSub) OnContextMenu(h EventHandler) *HTMLSub {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSub) OnCopy(h EventHandler) *HTMLSub {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSub) OnCut(h EventHandler) *HTMLSub {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSub) OnDblClick(h EventHandler) *HTMLSub {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSub) OnDrag(h EventHandler) *HTMLSub {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSub) OnDragEnd(h EventHandler) *HTMLSub {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSub) OnDragEnter(h EventHandler) *HTMLSub {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSub) OnDragLeave(h EventHandler) *HTMLSub {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSub) OnDragOver(h EventHandler) *HTMLSub {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSub) OnDragStart(h EventHandler) *HTMLSub {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSub) OnDrop(h EventHandler) *HTMLSub {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSub) OnFocus(h EventHandler) *HTMLSub {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSub) OnInput(h EventHandler) *HTMLSub {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSub) OnInvalid(h EventHandler) *HTMLSub {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSub) OnKeyDown(h EventHandler) *HTMLSub {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSub) OnKeyPress(h EventHandler) *HTMLSub {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSub) OnKeyup(h EventHandler) *HTMLSub {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSub) OnMouseDown(h EventHandler) *HTMLSub {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSub) OnMouseMove(h EventHandler) *HTMLSub {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSub) OnMouseOut(h EventHandler) *HTMLSub {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSub) OnMouseOver(h EventHandler) *HTMLSub {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSub) OnMouseUp(h EventHandler) *HTMLSub {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSub) OnPaste(h EventHandler) *HTMLSub {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSub) OnReset(h EventHandler) *HTMLSub {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSub) OnScroll(h EventHandler) *HTMLSub {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSub) OnSearch(h EventHandler) *HTMLSub {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSub) OnSelect(h EventHandler) *HTMLSub {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSub) OnSubmit(h EventHandler) *HTMLSub {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSub) OnWheel(h EventHandler) *HTMLSub {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSub) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSummary represents an HTML element <summary>.
type HTMLSummary struct {
	elem
}

// Summary returns an HTML element that defines a visible heading for a details element.
func Summary() *HTMLSummary {
	return &HTMLSummary{
		elem: elem{
			tag:         "summary",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSummary) Body(nodes ...Node) *HTMLSummary {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSummary) AccessKey(v string) *HTMLSummary {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSummary) Class(v string) *HTMLSummary {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSummary) ContentEditable(v bool) *HTMLSummary {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSummary) DataSet(k, v string) *HTMLSummary {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSummary) Dir(v string) *HTMLSummary {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSummary) Draggable(v bool) *HTMLSummary {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSummary) Hidden(v bool) *HTMLSummary {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSummary) ID(v string) *HTMLSummary {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSummary) Lang(v string) *HTMLSummary {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSummary) Spellcheck(v bool) *HTMLSummary {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSummary) Style(v string) *HTMLSummary {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSummary) TabIndex(v int) *HTMLSummary {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSummary) Title(v string) *HTMLSummary {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSummary) OnBlur(h EventHandler) *HTMLSummary {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSummary) OnChange(h EventHandler) *HTMLSummary {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSummary) OnClick(h EventHandler) *HTMLSummary {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSummary) OnContextMenu(h EventHandler) *HTMLSummary {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSummary) OnCopy(h EventHandler) *HTMLSummary {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSummary) OnCut(h EventHandler) *HTMLSummary {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSummary) OnDblClick(h EventHandler) *HTMLSummary {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSummary) OnDrag(h EventHandler) *HTMLSummary {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSummary) OnDragEnd(h EventHandler) *HTMLSummary {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSummary) OnDragEnter(h EventHandler) *HTMLSummary {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSummary) OnDragLeave(h EventHandler) *HTMLSummary {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSummary) OnDragOver(h EventHandler) *HTMLSummary {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSummary) OnDragStart(h EventHandler) *HTMLSummary {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSummary) OnDrop(h EventHandler) *HTMLSummary {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSummary) OnFocus(h EventHandler) *HTMLSummary {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSummary) OnInput(h EventHandler) *HTMLSummary {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSummary) OnInvalid(h EventHandler) *HTMLSummary {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSummary) OnKeyDown(h EventHandler) *HTMLSummary {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSummary) OnKeyPress(h EventHandler) *HTMLSummary {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSummary) OnKeyup(h EventHandler) *HTMLSummary {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSummary) OnMouseDown(h EventHandler) *HTMLSummary {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSummary) OnMouseMove(h EventHandler) *HTMLSummary {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSummary) OnMouseOut(h EventHandler) *HTMLSummary {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSummary) OnMouseOver(h EventHandler) *HTMLSummary {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSummary) OnMouseUp(h EventHandler) *HTMLSummary {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSummary) OnPaste(h EventHandler) *HTMLSummary {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSummary) OnReset(h EventHandler) *HTMLSummary {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSummary) OnScroll(h EventHandler) *HTMLSummary {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSummary) OnSearch(h EventHandler) *HTMLSummary {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSummary) OnSelect(h EventHandler) *HTMLSummary {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSummary) OnSubmit(h EventHandler) *HTMLSummary {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSummary) OnWheel(h EventHandler) *HTMLSummary {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSummary) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLSup represents an HTML element <sup>.
type HTMLSup struct {
	elem
}

// Sup returns an HTML element that defines superscripted text.
func Sup() *HTMLSup {
	return &HTMLSup{
		elem: elem{
			tag:         "sup",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLSup) Body(nodes ...Node) *HTMLSup {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLSup) AccessKey(v string) *HTMLSup {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLSup) Class(v string) *HTMLSup {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLSup) ContentEditable(v bool) *HTMLSup {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLSup) DataSet(k, v string) *HTMLSup {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLSup) Dir(v string) *HTMLSup {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLSup) Draggable(v bool) *HTMLSup {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLSup) Hidden(v bool) *HTMLSup {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLSup) ID(v string) *HTMLSup {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLSup) Lang(v string) *HTMLSup {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLSup) Spellcheck(v bool) *HTMLSup {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLSup) Style(v string) *HTMLSup {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLSup) TabIndex(v int) *HTMLSup {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLSup) Title(v string) *HTMLSup {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLSup) OnBlur(h EventHandler) *HTMLSup {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLSup) OnChange(h EventHandler) *HTMLSup {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLSup) OnClick(h EventHandler) *HTMLSup {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLSup) OnContextMenu(h EventHandler) *HTMLSup {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLSup) OnCopy(h EventHandler) *HTMLSup {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLSup) OnCut(h EventHandler) *HTMLSup {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLSup) OnDblClick(h EventHandler) *HTMLSup {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLSup) OnDrag(h EventHandler) *HTMLSup {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLSup) OnDragEnd(h EventHandler) *HTMLSup {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLSup) OnDragEnter(h EventHandler) *HTMLSup {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLSup) OnDragLeave(h EventHandler) *HTMLSup {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLSup) OnDragOver(h EventHandler) *HTMLSup {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLSup) OnDragStart(h EventHandler) *HTMLSup {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLSup) OnDrop(h EventHandler) *HTMLSup {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLSup) OnFocus(h EventHandler) *HTMLSup {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLSup) OnInput(h EventHandler) *HTMLSup {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLSup) OnInvalid(h EventHandler) *HTMLSup {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLSup) OnKeyDown(h EventHandler) *HTMLSup {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLSup) OnKeyPress(h EventHandler) *HTMLSup {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLSup) OnKeyup(h EventHandler) *HTMLSup {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLSup) OnMouseDown(h EventHandler) *HTMLSup {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLSup) OnMouseMove(h EventHandler) *HTMLSup {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLSup) OnMouseOut(h EventHandler) *HTMLSup {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLSup) OnMouseOver(h EventHandler) *HTMLSup {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLSup) OnMouseUp(h EventHandler) *HTMLSup {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLSup) OnPaste(h EventHandler) *HTMLSup {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLSup) OnReset(h EventHandler) *HTMLSup {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLSup) OnScroll(h EventHandler) *HTMLSup {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLSup) OnSearch(h EventHandler) *HTMLSup {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLSup) OnSelect(h EventHandler) *HTMLSup {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLSup) OnSubmit(h EventHandler) *HTMLSup {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLSup) OnWheel(h EventHandler) *HTMLSup {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLSup) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTable represents an HTML element <table>.
type HTMLTable struct {
	elem
}

// Table returns an HTML element that defines a table.
func Table() *HTMLTable {
	return &HTMLTable{
		elem: elem{
			tag:         "table",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTable) Body(nodes ...Node) *HTMLTable {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTable) AccessKey(v string) *HTMLTable {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTable) Class(v string) *HTMLTable {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTable) ContentEditable(v bool) *HTMLTable {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTable) DataSet(k, v string) *HTMLTable {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTable) Dir(v string) *HTMLTable {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTable) Draggable(v bool) *HTMLTable {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTable) Hidden(v bool) *HTMLTable {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTable) ID(v string) *HTMLTable {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTable) Lang(v string) *HTMLTable {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTable) Spellcheck(v bool) *HTMLTable {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTable) Style(v string) *HTMLTable {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTable) TabIndex(v int) *HTMLTable {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTable) Title(v string) *HTMLTable {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLTable) OnBlur(h EventHandler) *HTMLTable {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLTable) OnChange(h EventHandler) *HTMLTable {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLTable) OnClick(h EventHandler) *HTMLTable {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLTable) OnContextMenu(h EventHandler) *HTMLTable {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLTable) OnCopy(h EventHandler) *HTMLTable {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLTable) OnCut(h EventHandler) *HTMLTable {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLTable) OnDblClick(h EventHandler) *HTMLTable {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLTable) OnDrag(h EventHandler) *HTMLTable {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLTable) OnDragEnd(h EventHandler) *HTMLTable {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLTable) OnDragEnter(h EventHandler) *HTMLTable {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLTable) OnDragLeave(h EventHandler) *HTMLTable {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLTable) OnDragOver(h EventHandler) *HTMLTable {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLTable) OnDragStart(h EventHandler) *HTMLTable {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLTable) OnDrop(h EventHandler) *HTMLTable {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLTable) OnFocus(h EventHandler) *HTMLTable {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLTable) OnInput(h EventHandler) *HTMLTable {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLTable) OnInvalid(h EventHandler) *HTMLTable {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLTable) OnKeyDown(h EventHandler) *HTMLTable {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLTable) OnKeyPress(h EventHandler) *HTMLTable {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLTable) OnKeyup(h EventHandler) *HTMLTable {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLTable) OnMouseDown(h EventHandler) *HTMLTable {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLTable) OnMouseMove(h EventHandler) *HTMLTable {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLTable) OnMouseOut(h EventHandler) *HTMLTable {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLTable) OnMouseOver(h EventHandler) *HTMLTable {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLTable) OnMouseUp(h EventHandler) *HTMLTable {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLTable) OnPaste(h EventHandler) *HTMLTable {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLTable) OnReset(h EventHandler) *HTMLTable {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLTable) OnScroll(h EventHandler) *HTMLTable {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLTable) OnSearch(h EventHandler) *HTMLTable {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLTable) OnSelect(h EventHandler) *HTMLTable {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLTable) OnSubmit(h EventHandler) *HTMLTable {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLTable) OnWheel(h EventHandler) *HTMLTable {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLTable) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTBody represents an HTML element <tbody>.
type HTMLTBody struct {
	elem
}

// TBody returns an HTML element that groups the body content in a table.
func TBody() *HTMLTBody {
	return &HTMLTBody{
		elem: elem{
			tag:         "tbody",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTBody) Body(nodes ...Node) *HTMLTBody {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTBody) AccessKey(v string) *HTMLTBody {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTBody) Class(v string) *HTMLTBody {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTBody) ContentEditable(v bool) *HTMLTBody {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTBody) DataSet(k, v string) *HTMLTBody {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTBody) Dir(v string) *HTMLTBody {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTBody) Draggable(v bool) *HTMLTBody {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTBody) Hidden(v bool) *HTMLTBody {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTBody) ID(v string) *HTMLTBody {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTBody) Lang(v string) *HTMLTBody {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTBody) Spellcheck(v bool) *HTMLTBody {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTBody) Style(v string) *HTMLTBody {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTBody) TabIndex(v int) *HTMLTBody {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTBody) Title(v string) *HTMLTBody {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLTBody) OnBlur(h EventHandler) *HTMLTBody {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLTBody) OnChange(h EventHandler) *HTMLTBody {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLTBody) OnClick(h EventHandler) *HTMLTBody {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLTBody) OnContextMenu(h EventHandler) *HTMLTBody {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLTBody) OnCopy(h EventHandler) *HTMLTBody {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLTBody) OnCut(h EventHandler) *HTMLTBody {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLTBody) OnDblClick(h EventHandler) *HTMLTBody {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLTBody) OnDrag(h EventHandler) *HTMLTBody {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLTBody) OnDragEnd(h EventHandler) *HTMLTBody {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLTBody) OnDragEnter(h EventHandler) *HTMLTBody {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLTBody) OnDragLeave(h EventHandler) *HTMLTBody {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLTBody) OnDragOver(h EventHandler) *HTMLTBody {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLTBody) OnDragStart(h EventHandler) *HTMLTBody {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLTBody) OnDrop(h EventHandler) *HTMLTBody {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLTBody) OnFocus(h EventHandler) *HTMLTBody {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLTBody) OnInput(h EventHandler) *HTMLTBody {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLTBody) OnInvalid(h EventHandler) *HTMLTBody {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLTBody) OnKeyDown(h EventHandler) *HTMLTBody {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLTBody) OnKeyPress(h EventHandler) *HTMLTBody {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLTBody) OnKeyup(h EventHandler) *HTMLTBody {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLTBody) OnMouseDown(h EventHandler) *HTMLTBody {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLTBody) OnMouseMove(h EventHandler) *HTMLTBody {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLTBody) OnMouseOut(h EventHandler) *HTMLTBody {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLTBody) OnMouseOver(h EventHandler) *HTMLTBody {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLTBody) OnMouseUp(h EventHandler) *HTMLTBody {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLTBody) OnPaste(h EventHandler) *HTMLTBody {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLTBody) OnReset(h EventHandler) *HTMLTBody {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLTBody) OnScroll(h EventHandler) *HTMLTBody {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLTBody) OnSearch(h EventHandler) *HTMLTBody {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLTBody) OnSelect(h EventHandler) *HTMLTBody {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLTBody) OnSubmit(h EventHandler) *HTMLTBody {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLTBody) OnWheel(h EventHandler) *HTMLTBody {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLTBody) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTd represents an HTML element <td>.
type HTMLTd struct {
	elem
}

// Td returns an HTML element that defines a cell in a table.
func Td() *HTMLTd {
	return &HTMLTd{
		elem: elem{
			tag:         "td",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTd) Body(nodes ...Node) *HTMLTd {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTd) AccessKey(v string) *HTMLTd {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTd) Class(v string) *HTMLTd {
	e.elem.setAttribute("class", v)
	return e
}

// ColSpan specifies the number of columns a table cell should span.
func (e *HTMLTd) ColSpan(v int) *HTMLTd {
	e.elem.setAttribute("colspan", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTd) ContentEditable(v bool) *HTMLTd {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTd) DataSet(k, v string) *HTMLTd {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTd) Dir(v string) *HTMLTd {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTd) Draggable(v bool) *HTMLTd {
	e.elem.setAttribute("draggable", v)
	return e
}

// Headers specifies one or more headers cells a cell is related to.
func (e *HTMLTd) Headers(v string) *HTMLTd {
	e.elem.setAttribute("headers", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTd) Hidden(v bool) *HTMLTd {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTd) ID(v string) *HTMLTd {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTd) Lang(v string) *HTMLTd {
	e.elem.setAttribute("lang", v)
	return e
}

// Rowspan specifies the number of rows a table cell should span.
func (e *HTMLTd) Rowspan(v int) *HTMLTd {
	e.elem.setAttribute("rowspan", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTd) Spellcheck(v bool) *HTMLTd {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTd) Style(v string) *HTMLTd {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTd) TabIndex(v int) *HTMLTd {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTd) Title(v string) *HTMLTd {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLTd) OnBlur(h EventHandler) *HTMLTd {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLTd) OnChange(h EventHandler) *HTMLTd {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLTd) OnClick(h EventHandler) *HTMLTd {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLTd) OnContextMenu(h EventHandler) *HTMLTd {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLTd) OnCopy(h EventHandler) *HTMLTd {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLTd) OnCut(h EventHandler) *HTMLTd {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLTd) OnDblClick(h EventHandler) *HTMLTd {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLTd) OnDrag(h EventHandler) *HTMLTd {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLTd) OnDragEnd(h EventHandler) *HTMLTd {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLTd) OnDragEnter(h EventHandler) *HTMLTd {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLTd) OnDragLeave(h EventHandler) *HTMLTd {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLTd) OnDragOver(h EventHandler) *HTMLTd {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLTd) OnDragStart(h EventHandler) *HTMLTd {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLTd) OnDrop(h EventHandler) *HTMLTd {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLTd) OnFocus(h EventHandler) *HTMLTd {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLTd) OnInput(h EventHandler) *HTMLTd {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLTd) OnInvalid(h EventHandler) *HTMLTd {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLTd) OnKeyDown(h EventHandler) *HTMLTd {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLTd) OnKeyPress(h EventHandler) *HTMLTd {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLTd) OnKeyup(h EventHandler) *HTMLTd {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLTd) OnMouseDown(h EventHandler) *HTMLTd {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLTd) OnMouseMove(h EventHandler) *HTMLTd {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLTd) OnMouseOut(h EventHandler) *HTMLTd {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLTd) OnMouseOver(h EventHandler) *HTMLTd {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLTd) OnMouseUp(h EventHandler) *HTMLTd {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLTd) OnPaste(h EventHandler) *HTMLTd {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLTd) OnReset(h EventHandler) *HTMLTd {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLTd) OnScroll(h EventHandler) *HTMLTd {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLTd) OnSearch(h EventHandler) *HTMLTd {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLTd) OnSelect(h EventHandler) *HTMLTd {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLTd) OnSubmit(h EventHandler) *HTMLTd {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLTd) OnWheel(h EventHandler) *HTMLTd {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLTd) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTemplate represents an HTML element <template>.
type HTMLTemplate struct {
	elem
}

// Template returns an HTML element that defines a template.
func Template() *HTMLTemplate {
	return &HTMLTemplate{
		elem: elem{
			tag:         "template",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTemplate) Body(nodes ...Node) *HTMLTemplate {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTemplate) AccessKey(v string) *HTMLTemplate {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTemplate) Class(v string) *HTMLTemplate {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTemplate) ContentEditable(v bool) *HTMLTemplate {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTemplate) DataSet(k, v string) *HTMLTemplate {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTemplate) Dir(v string) *HTMLTemplate {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTemplate) Draggable(v bool) *HTMLTemplate {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTemplate) Hidden(v bool) *HTMLTemplate {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTemplate) ID(v string) *HTMLTemplate {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTemplate) Lang(v string) *HTMLTemplate {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTemplate) Spellcheck(v bool) *HTMLTemplate {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTemplate) Style(v string) *HTMLTemplate {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTemplate) TabIndex(v int) *HTMLTemplate {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTemplate) Title(v string) *HTMLTemplate {
	e.elem.setAttribute("title", v)
	return e
}

func (e *HTMLTemplate) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTextarea represents an HTML element <textarea>.
type HTMLTextarea struct {
	elem
}

// Textarea returns an HTML element that defines a multiline input control (text area).
func Textarea() *HTMLTextarea {
	return &HTMLTextarea{
		elem: elem{
			tag:         "textarea",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTextarea) Body(nodes ...Node) *HTMLTextarea {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTextarea) AccessKey(v string) *HTMLTextarea {
	e.elem.setAttribute("accesskey", v)
	return e
}

// AutoFocus specifies that the element should automatically get focus when the page loads.
func (e *HTMLTextarea) AutoFocus(v bool) *HTMLTextarea {
	e.elem.setAttribute("autofocus", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTextarea) Class(v string) *HTMLTextarea {
	e.elem.setAttribute("class", v)
	return e
}

// Cols specifies the visible width of a text area.
func (e *HTMLTextarea) Cols(v int) *HTMLTextarea {
	e.elem.setAttribute("cols", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTextarea) ContentEditable(v bool) *HTMLTextarea {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTextarea) DataSet(k, v string) *HTMLTextarea {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTextarea) Dir(v string) *HTMLTextarea {
	e.elem.setAttribute("dir", v)
	return e
}

// DirName specifies that the text direction will be submitted.
func (e *HTMLTextarea) DirName(v string) *HTMLTextarea {
	e.elem.setAttribute("dirname", v)
	return e
}

// Disabled specifies that the specified element/group of elements should be disabled.
func (e *HTMLTextarea) Disabled(v bool) *HTMLTextarea {
	e.elem.setAttribute("disabled", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTextarea) Draggable(v bool) *HTMLTextarea {
	e.elem.setAttribute("draggable", v)
	return e
}

// Form specifies the name of the form the element belongs to.
func (e *HTMLTextarea) Form(v string) *HTMLTextarea {
	e.elem.setAttribute("form", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTextarea) Hidden(v bool) *HTMLTextarea {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTextarea) ID(v string) *HTMLTextarea {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTextarea) Lang(v string) *HTMLTextarea {
	e.elem.setAttribute("lang", v)
	return e
}

// MaxLength specifies the maximum number of characters allowed in an element.
func (e *HTMLTextarea) MaxLength(v int) *HTMLTextarea {
	e.elem.setAttribute("maxlength", v)
	return e
}

// Name specifies the name of the element.
func (e *HTMLTextarea) Name(v string) *HTMLTextarea {
	e.elem.setAttribute("name", v)
	return e
}

// Placeholder specifies a short hint that describes the expected value of the element.
func (e *HTMLTextarea) Placeholder(v string) *HTMLTextarea {
	e.elem.setAttribute("placeholder", v)
	return e
}

// ReadOnly specifies that the element is read-only.
func (e *HTMLTextarea) ReadOnly(v bool) *HTMLTextarea {
	e.elem.setAttribute("readonly", v)
	return e
}

// Required specifies that the element must be filled out before submitting the form.
func (e *HTMLTextarea) Required(v bool) *HTMLTextarea {
	e.elem.setAttribute("required", v)
	return e
}

// Rows specifies the visible number of lines in a text area.
func (e *HTMLTextarea) Rows(v int) *HTMLTextarea {
	e.elem.setAttribute("rows", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTextarea) Spellcheck(v bool) *HTMLTextarea {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTextarea) Style(v string) *HTMLTextarea {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTextarea) TabIndex(v int) *HTMLTextarea {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTextarea) Title(v string) *HTMLTextarea {
	e.elem.setAttribute("title", v)
	return e
}

// Wrap specifies how the text in a text area is to be wrapped when submitted in a form.
func (e *HTMLTextarea) Wrap(v string) *HTMLTextarea {
	e.elem.setAttribute("wrap", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLTextarea) OnBlur(h EventHandler) *HTMLTextarea {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLTextarea) OnChange(h EventHandler) *HTMLTextarea {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLTextarea) OnClick(h EventHandler) *HTMLTextarea {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLTextarea) OnContextMenu(h EventHandler) *HTMLTextarea {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLTextarea) OnCopy(h EventHandler) *HTMLTextarea {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLTextarea) OnCut(h EventHandler) *HTMLTextarea {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLTextarea) OnDblClick(h EventHandler) *HTMLTextarea {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLTextarea) OnDrag(h EventHandler) *HTMLTextarea {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLTextarea) OnDragEnd(h EventHandler) *HTMLTextarea {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLTextarea) OnDragEnter(h EventHandler) *HTMLTextarea {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLTextarea) OnDragLeave(h EventHandler) *HTMLTextarea {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLTextarea) OnDragOver(h EventHandler) *HTMLTextarea {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLTextarea) OnDragStart(h EventHandler) *HTMLTextarea {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLTextarea) OnDrop(h EventHandler) *HTMLTextarea {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLTextarea) OnFocus(h EventHandler) *HTMLTextarea {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLTextarea) OnInput(h EventHandler) *HTMLTextarea {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLTextarea) OnInvalid(h EventHandler) *HTMLTextarea {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLTextarea) OnKeyDown(h EventHandler) *HTMLTextarea {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLTextarea) OnKeyPress(h EventHandler) *HTMLTextarea {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLTextarea) OnKeyup(h EventHandler) *HTMLTextarea {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLTextarea) OnMouseDown(h EventHandler) *HTMLTextarea {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLTextarea) OnMouseMove(h EventHandler) *HTMLTextarea {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLTextarea) OnMouseOut(h EventHandler) *HTMLTextarea {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLTextarea) OnMouseOver(h EventHandler) *HTMLTextarea {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLTextarea) OnMouseUp(h EventHandler) *HTMLTextarea {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLTextarea) OnPaste(h EventHandler) *HTMLTextarea {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLTextarea) OnReset(h EventHandler) *HTMLTextarea {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLTextarea) OnScroll(h EventHandler) *HTMLTextarea {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLTextarea) OnSearch(h EventHandler) *HTMLTextarea {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLTextarea) OnSelect(h EventHandler) *HTMLTextarea {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLTextarea) OnSubmit(h EventHandler) *HTMLTextarea {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLTextarea) OnWheel(h EventHandler) *HTMLTextarea {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLTextarea) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLtfoot represents an HTML element <tfoot>.
type HTMLtfoot struct {
	elem
}

// tfoot returns an HTML element that groups the footer content in a table.
func tfoot() *HTMLtfoot {
	return &HTMLtfoot{
		elem: elem{
			tag:         "tfoot",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLtfoot) Body(nodes ...Node) *HTMLtfoot {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLtfoot) AccessKey(v string) *HTMLtfoot {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLtfoot) Class(v string) *HTMLtfoot {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLtfoot) ContentEditable(v bool) *HTMLtfoot {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLtfoot) DataSet(k, v string) *HTMLtfoot {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLtfoot) Dir(v string) *HTMLtfoot {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLtfoot) Draggable(v bool) *HTMLtfoot {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLtfoot) Hidden(v bool) *HTMLtfoot {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLtfoot) ID(v string) *HTMLtfoot {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLtfoot) Lang(v string) *HTMLtfoot {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLtfoot) Spellcheck(v bool) *HTMLtfoot {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLtfoot) Style(v string) *HTMLtfoot {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLtfoot) TabIndex(v int) *HTMLtfoot {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLtfoot) Title(v string) *HTMLtfoot {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLtfoot) OnBlur(h EventHandler) *HTMLtfoot {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLtfoot) OnChange(h EventHandler) *HTMLtfoot {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLtfoot) OnClick(h EventHandler) *HTMLtfoot {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLtfoot) OnContextMenu(h EventHandler) *HTMLtfoot {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLtfoot) OnCopy(h EventHandler) *HTMLtfoot {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLtfoot) OnCut(h EventHandler) *HTMLtfoot {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLtfoot) OnDblClick(h EventHandler) *HTMLtfoot {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLtfoot) OnDrag(h EventHandler) *HTMLtfoot {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLtfoot) OnDragEnd(h EventHandler) *HTMLtfoot {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLtfoot) OnDragEnter(h EventHandler) *HTMLtfoot {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLtfoot) OnDragLeave(h EventHandler) *HTMLtfoot {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLtfoot) OnDragOver(h EventHandler) *HTMLtfoot {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLtfoot) OnDragStart(h EventHandler) *HTMLtfoot {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLtfoot) OnDrop(h EventHandler) *HTMLtfoot {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLtfoot) OnFocus(h EventHandler) *HTMLtfoot {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLtfoot) OnInput(h EventHandler) *HTMLtfoot {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLtfoot) OnInvalid(h EventHandler) *HTMLtfoot {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLtfoot) OnKeyDown(h EventHandler) *HTMLtfoot {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLtfoot) OnKeyPress(h EventHandler) *HTMLtfoot {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLtfoot) OnKeyup(h EventHandler) *HTMLtfoot {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLtfoot) OnMouseDown(h EventHandler) *HTMLtfoot {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLtfoot) OnMouseMove(h EventHandler) *HTMLtfoot {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLtfoot) OnMouseOut(h EventHandler) *HTMLtfoot {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLtfoot) OnMouseOver(h EventHandler) *HTMLtfoot {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLtfoot) OnMouseUp(h EventHandler) *HTMLtfoot {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLtfoot) OnPaste(h EventHandler) *HTMLtfoot {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLtfoot) OnReset(h EventHandler) *HTMLtfoot {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLtfoot) OnScroll(h EventHandler) *HTMLtfoot {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLtfoot) OnSearch(h EventHandler) *HTMLtfoot {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLtfoot) OnSelect(h EventHandler) *HTMLtfoot {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLtfoot) OnSubmit(h EventHandler) *HTMLtfoot {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLtfoot) OnWheel(h EventHandler) *HTMLtfoot {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLtfoot) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTh represents an HTML element <th>.
type HTMLTh struct {
	elem
}

// Th returns an HTML element that defines a header cell in a table.
func Th() *HTMLTh {
	return &HTMLTh{
		elem: elem{
			tag:         "th",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTh) Body(nodes ...Node) *HTMLTh {
	e.setBody(e, nodes)
	return e
}

// Accept specifies an abbreviated version of the content in a header cell.
func (e *HTMLTh) Accept(v string) *HTMLTh {
	e.elem.setAttribute("accept", v)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTh) AccessKey(v string) *HTMLTh {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTh) Class(v string) *HTMLTh {
	e.elem.setAttribute("class", v)
	return e
}

// ColSpan specifies the number of columns a table cell should span.
func (e *HTMLTh) ColSpan(v int) *HTMLTh {
	e.elem.setAttribute("colspan", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTh) ContentEditable(v bool) *HTMLTh {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTh) DataSet(k, v string) *HTMLTh {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTh) Dir(v string) *HTMLTh {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTh) Draggable(v bool) *HTMLTh {
	e.elem.setAttribute("draggable", v)
	return e
}

// Headers specifies one or more headers cells a cell is related to.
func (e *HTMLTh) Headers(v string) *HTMLTh {
	e.elem.setAttribute("headers", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTh) Hidden(v bool) *HTMLTh {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTh) ID(v string) *HTMLTh {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTh) Lang(v string) *HTMLTh {
	e.elem.setAttribute("lang", v)
	return e
}

// Rowspan specifies the number of rows a table cell should span.
func (e *HTMLTh) Rowspan(v int) *HTMLTh {
	e.elem.setAttribute("rowspan", v)
	return e
}

// Scope specifies whether a header cell is a header for a column, row, or group of columns or rows.
func (e *HTMLTh) Scope(v string) *HTMLTh {
	e.elem.setAttribute("scope", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTh) Spellcheck(v bool) *HTMLTh {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTh) Style(v string) *HTMLTh {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTh) TabIndex(v int) *HTMLTh {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTh) Title(v string) *HTMLTh {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLTh) OnBlur(h EventHandler) *HTMLTh {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLTh) OnChange(h EventHandler) *HTMLTh {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLTh) OnClick(h EventHandler) *HTMLTh {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLTh) OnContextMenu(h EventHandler) *HTMLTh {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLTh) OnCopy(h EventHandler) *HTMLTh {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLTh) OnCut(h EventHandler) *HTMLTh {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLTh) OnDblClick(h EventHandler) *HTMLTh {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLTh) OnDrag(h EventHandler) *HTMLTh {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLTh) OnDragEnd(h EventHandler) *HTMLTh {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLTh) OnDragEnter(h EventHandler) *HTMLTh {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLTh) OnDragLeave(h EventHandler) *HTMLTh {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLTh) OnDragOver(h EventHandler) *HTMLTh {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLTh) OnDragStart(h EventHandler) *HTMLTh {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLTh) OnDrop(h EventHandler) *HTMLTh {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLTh) OnFocus(h EventHandler) *HTMLTh {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLTh) OnInput(h EventHandler) *HTMLTh {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLTh) OnInvalid(h EventHandler) *HTMLTh {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLTh) OnKeyDown(h EventHandler) *HTMLTh {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLTh) OnKeyPress(h EventHandler) *HTMLTh {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLTh) OnKeyup(h EventHandler) *HTMLTh {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLTh) OnMouseDown(h EventHandler) *HTMLTh {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLTh) OnMouseMove(h EventHandler) *HTMLTh {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLTh) OnMouseOut(h EventHandler) *HTMLTh {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLTh) OnMouseOver(h EventHandler) *HTMLTh {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLTh) OnMouseUp(h EventHandler) *HTMLTh {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLTh) OnPaste(h EventHandler) *HTMLTh {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLTh) OnReset(h EventHandler) *HTMLTh {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLTh) OnScroll(h EventHandler) *HTMLTh {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLTh) OnSearch(h EventHandler) *HTMLTh {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLTh) OnSelect(h EventHandler) *HTMLTh {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLTh) OnSubmit(h EventHandler) *HTMLTh {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLTh) OnWheel(h EventHandler) *HTMLTh {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLTh) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTime represents an HTML element <time>.
type HTMLTime struct {
	elem
}

// Time returns an HTML element that defines a date/time.
func Time() *HTMLTime {
	return &HTMLTime{
		elem: elem{
			tag:         "time",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTime) Body(nodes ...Node) *HTMLTime {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTime) AccessKey(v string) *HTMLTime {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTime) Class(v string) *HTMLTime {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTime) ContentEditable(v bool) *HTMLTime {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTime) DataSet(k, v string) *HTMLTime {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// DateTime specifies the date and time.
func (e *HTMLTime) DateTime(v string) *HTMLTime {
	e.elem.setAttribute("datetime", v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTime) Dir(v string) *HTMLTime {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTime) Draggable(v bool) *HTMLTime {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTime) Hidden(v bool) *HTMLTime {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTime) ID(v string) *HTMLTime {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTime) Lang(v string) *HTMLTime {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTime) Spellcheck(v bool) *HTMLTime {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTime) Style(v string) *HTMLTime {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTime) TabIndex(v int) *HTMLTime {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTime) Title(v string) *HTMLTime {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLTime) OnBlur(h EventHandler) *HTMLTime {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLTime) OnChange(h EventHandler) *HTMLTime {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLTime) OnClick(h EventHandler) *HTMLTime {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLTime) OnContextMenu(h EventHandler) *HTMLTime {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLTime) OnCopy(h EventHandler) *HTMLTime {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLTime) OnCut(h EventHandler) *HTMLTime {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLTime) OnDblClick(h EventHandler) *HTMLTime {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLTime) OnDrag(h EventHandler) *HTMLTime {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLTime) OnDragEnd(h EventHandler) *HTMLTime {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLTime) OnDragEnter(h EventHandler) *HTMLTime {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLTime) OnDragLeave(h EventHandler) *HTMLTime {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLTime) OnDragOver(h EventHandler) *HTMLTime {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLTime) OnDragStart(h EventHandler) *HTMLTime {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLTime) OnDrop(h EventHandler) *HTMLTime {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLTime) OnFocus(h EventHandler) *HTMLTime {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLTime) OnInput(h EventHandler) *HTMLTime {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLTime) OnInvalid(h EventHandler) *HTMLTime {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLTime) OnKeyDown(h EventHandler) *HTMLTime {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLTime) OnKeyPress(h EventHandler) *HTMLTime {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLTime) OnKeyup(h EventHandler) *HTMLTime {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLTime) OnMouseDown(h EventHandler) *HTMLTime {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLTime) OnMouseMove(h EventHandler) *HTMLTime {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLTime) OnMouseOut(h EventHandler) *HTMLTime {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLTime) OnMouseOver(h EventHandler) *HTMLTime {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLTime) OnMouseUp(h EventHandler) *HTMLTime {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLTime) OnPaste(h EventHandler) *HTMLTime {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLTime) OnReset(h EventHandler) *HTMLTime {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLTime) OnScroll(h EventHandler) *HTMLTime {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLTime) OnSearch(h EventHandler) *HTMLTime {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLTime) OnSelect(h EventHandler) *HTMLTime {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLTime) OnSubmit(h EventHandler) *HTMLTime {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLTime) OnWheel(h EventHandler) *HTMLTime {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLTime) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTitle represents an HTML element <title>.
type HTMLTitle struct {
	elem
}

// Title returns an HTML element that defines a title for the document.
func Title() *HTMLTitle {
	return &HTMLTitle{
		elem: elem{
			tag:         "title",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTitle) Body(nodes ...Node) *HTMLTitle {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTitle) AccessKey(v string) *HTMLTitle {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTitle) Class(v string) *HTMLTitle {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTitle) ContentEditable(v bool) *HTMLTitle {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTitle) DataSet(k, v string) *HTMLTitle {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTitle) Dir(v string) *HTMLTitle {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTitle) Draggable(v bool) *HTMLTitle {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTitle) Hidden(v bool) *HTMLTitle {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTitle) ID(v string) *HTMLTitle {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTitle) Lang(v string) *HTMLTitle {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTitle) Spellcheck(v bool) *HTMLTitle {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTitle) Style(v string) *HTMLTitle {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTitle) TabIndex(v int) *HTMLTitle {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTitle) Title(v string) *HTMLTitle {
	e.elem.setAttribute("title", v)
	return e
}

func (e *HTMLTitle) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLTr represents an HTML element <tr>.
type HTMLTr struct {
	elem
}

// Tr returns an HTML element that defines a row in a table.
func Tr() *HTMLTr {
	return &HTMLTr{
		elem: elem{
			tag:         "tr",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLTr) Body(nodes ...Node) *HTMLTr {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLTr) AccessKey(v string) *HTMLTr {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLTr) Class(v string) *HTMLTr {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLTr) ContentEditable(v bool) *HTMLTr {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLTr) DataSet(k, v string) *HTMLTr {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLTr) Dir(v string) *HTMLTr {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLTr) Draggable(v bool) *HTMLTr {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLTr) Hidden(v bool) *HTMLTr {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLTr) ID(v string) *HTMLTr {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLTr) Lang(v string) *HTMLTr {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLTr) Spellcheck(v bool) *HTMLTr {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLTr) Style(v string) *HTMLTr {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLTr) TabIndex(v int) *HTMLTr {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLTr) Title(v string) *HTMLTr {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLTr) OnBlur(h EventHandler) *HTMLTr {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLTr) OnChange(h EventHandler) *HTMLTr {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLTr) OnClick(h EventHandler) *HTMLTr {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLTr) OnContextMenu(h EventHandler) *HTMLTr {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLTr) OnCopy(h EventHandler) *HTMLTr {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLTr) OnCut(h EventHandler) *HTMLTr {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLTr) OnDblClick(h EventHandler) *HTMLTr {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLTr) OnDrag(h EventHandler) *HTMLTr {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLTr) OnDragEnd(h EventHandler) *HTMLTr {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLTr) OnDragEnter(h EventHandler) *HTMLTr {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLTr) OnDragLeave(h EventHandler) *HTMLTr {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLTr) OnDragOver(h EventHandler) *HTMLTr {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLTr) OnDragStart(h EventHandler) *HTMLTr {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLTr) OnDrop(h EventHandler) *HTMLTr {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLTr) OnFocus(h EventHandler) *HTMLTr {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLTr) OnInput(h EventHandler) *HTMLTr {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLTr) OnInvalid(h EventHandler) *HTMLTr {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLTr) OnKeyDown(h EventHandler) *HTMLTr {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLTr) OnKeyPress(h EventHandler) *HTMLTr {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLTr) OnKeyup(h EventHandler) *HTMLTr {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLTr) OnMouseDown(h EventHandler) *HTMLTr {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLTr) OnMouseMove(h EventHandler) *HTMLTr {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLTr) OnMouseOut(h EventHandler) *HTMLTr {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLTr) OnMouseOver(h EventHandler) *HTMLTr {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLTr) OnMouseUp(h EventHandler) *HTMLTr {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLTr) OnPaste(h EventHandler) *HTMLTr {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLTr) OnReset(h EventHandler) *HTMLTr {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLTr) OnScroll(h EventHandler) *HTMLTr {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLTr) OnSearch(h EventHandler) *HTMLTr {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLTr) OnSelect(h EventHandler) *HTMLTr {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLTr) OnSubmit(h EventHandler) *HTMLTr {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLTr) OnWheel(h EventHandler) *HTMLTr {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLTr) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLU represents an HTML element <u>.
type HTMLU struct {
	elem
}

// U returns an HTML element that defines text that should be stylistically different from normal text.
func U() *HTMLU {
	return &HTMLU{
		elem: elem{
			tag:         "u",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLU) Body(nodes ...Node) *HTMLU {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLU) AccessKey(v string) *HTMLU {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLU) Class(v string) *HTMLU {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLU) ContentEditable(v bool) *HTMLU {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLU) DataSet(k, v string) *HTMLU {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLU) Dir(v string) *HTMLU {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLU) Draggable(v bool) *HTMLU {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLU) Hidden(v bool) *HTMLU {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLU) ID(v string) *HTMLU {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLU) Lang(v string) *HTMLU {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLU) Spellcheck(v bool) *HTMLU {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLU) Style(v string) *HTMLU {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLU) TabIndex(v int) *HTMLU {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLU) Title(v string) *HTMLU {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLU) OnBlur(h EventHandler) *HTMLU {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLU) OnChange(h EventHandler) *HTMLU {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLU) OnClick(h EventHandler) *HTMLU {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLU) OnContextMenu(h EventHandler) *HTMLU {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLU) OnCopy(h EventHandler) *HTMLU {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLU) OnCut(h EventHandler) *HTMLU {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLU) OnDblClick(h EventHandler) *HTMLU {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLU) OnDrag(h EventHandler) *HTMLU {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLU) OnDragEnd(h EventHandler) *HTMLU {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLU) OnDragEnter(h EventHandler) *HTMLU {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLU) OnDragLeave(h EventHandler) *HTMLU {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLU) OnDragOver(h EventHandler) *HTMLU {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLU) OnDragStart(h EventHandler) *HTMLU {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLU) OnDrop(h EventHandler) *HTMLU {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLU) OnFocus(h EventHandler) *HTMLU {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLU) OnInput(h EventHandler) *HTMLU {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLU) OnInvalid(h EventHandler) *HTMLU {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLU) OnKeyDown(h EventHandler) *HTMLU {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLU) OnKeyPress(h EventHandler) *HTMLU {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLU) OnKeyup(h EventHandler) *HTMLU {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLU) OnMouseDown(h EventHandler) *HTMLU {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLU) OnMouseMove(h EventHandler) *HTMLU {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLU) OnMouseOut(h EventHandler) *HTMLU {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLU) OnMouseOver(h EventHandler) *HTMLU {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLU) OnMouseUp(h EventHandler) *HTMLU {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLU) OnPaste(h EventHandler) *HTMLU {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLU) OnReset(h EventHandler) *HTMLU {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLU) OnScroll(h EventHandler) *HTMLU {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLU) OnSearch(h EventHandler) *HTMLU {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLU) OnSelect(h EventHandler) *HTMLU {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLU) OnSubmit(h EventHandler) *HTMLU {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLU) OnWheel(h EventHandler) *HTMLU {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLU) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLUl represents an HTML element <ul>.
type HTMLUl struct {
	elem
}

// Ul returns an HTML element that defines an unordered list.
func Ul() *HTMLUl {
	return &HTMLUl{
		elem: elem{
			tag:         "ul",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLUl) Body(nodes ...Node) *HTMLUl {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLUl) AccessKey(v string) *HTMLUl {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLUl) Class(v string) *HTMLUl {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLUl) ContentEditable(v bool) *HTMLUl {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLUl) DataSet(k, v string) *HTMLUl {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLUl) Dir(v string) *HTMLUl {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLUl) Draggable(v bool) *HTMLUl {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLUl) Hidden(v bool) *HTMLUl {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLUl) ID(v string) *HTMLUl {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLUl) Lang(v string) *HTMLUl {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLUl) Spellcheck(v bool) *HTMLUl {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLUl) Style(v string) *HTMLUl {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLUl) TabIndex(v int) *HTMLUl {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLUl) Title(v string) *HTMLUl {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLUl) OnBlur(h EventHandler) *HTMLUl {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLUl) OnChange(h EventHandler) *HTMLUl {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLUl) OnClick(h EventHandler) *HTMLUl {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLUl) OnContextMenu(h EventHandler) *HTMLUl {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLUl) OnCopy(h EventHandler) *HTMLUl {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLUl) OnCut(h EventHandler) *HTMLUl {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLUl) OnDblClick(h EventHandler) *HTMLUl {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLUl) OnDrag(h EventHandler) *HTMLUl {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLUl) OnDragEnd(h EventHandler) *HTMLUl {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLUl) OnDragEnter(h EventHandler) *HTMLUl {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLUl) OnDragLeave(h EventHandler) *HTMLUl {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLUl) OnDragOver(h EventHandler) *HTMLUl {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLUl) OnDragStart(h EventHandler) *HTMLUl {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLUl) OnDrop(h EventHandler) *HTMLUl {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLUl) OnFocus(h EventHandler) *HTMLUl {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLUl) OnInput(h EventHandler) *HTMLUl {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLUl) OnInvalid(h EventHandler) *HTMLUl {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLUl) OnKeyDown(h EventHandler) *HTMLUl {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLUl) OnKeyPress(h EventHandler) *HTMLUl {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLUl) OnKeyup(h EventHandler) *HTMLUl {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLUl) OnMouseDown(h EventHandler) *HTMLUl {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLUl) OnMouseMove(h EventHandler) *HTMLUl {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLUl) OnMouseOut(h EventHandler) *HTMLUl {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLUl) OnMouseOver(h EventHandler) *HTMLUl {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLUl) OnMouseUp(h EventHandler) *HTMLUl {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLUl) OnPaste(h EventHandler) *HTMLUl {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLUl) OnReset(h EventHandler) *HTMLUl {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLUl) OnScroll(h EventHandler) *HTMLUl {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLUl) OnSearch(h EventHandler) *HTMLUl {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLUl) OnSelect(h EventHandler) *HTMLUl {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLUl) OnSubmit(h EventHandler) *HTMLUl {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLUl) OnWheel(h EventHandler) *HTMLUl {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLUl) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLVar represents an HTML element <var>.
type HTMLVar struct {
	elem
}

// Var returns an HTML element that defines a variable.
func Var() *HTMLVar {
	return &HTMLVar{
		elem: elem{
			tag:         "var",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLVar) Body(nodes ...Node) *HTMLVar {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLVar) AccessKey(v string) *HTMLVar {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLVar) Class(v string) *HTMLVar {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLVar) ContentEditable(v bool) *HTMLVar {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLVar) DataSet(k, v string) *HTMLVar {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLVar) Dir(v string) *HTMLVar {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLVar) Draggable(v bool) *HTMLVar {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLVar) Hidden(v bool) *HTMLVar {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLVar) ID(v string) *HTMLVar {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLVar) Lang(v string) *HTMLVar {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLVar) Spellcheck(v bool) *HTMLVar {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLVar) Style(v string) *HTMLVar {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLVar) TabIndex(v int) *HTMLVar {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLVar) Title(v string) *HTMLVar {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLVar) OnBlur(h EventHandler) *HTMLVar {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLVar) OnChange(h EventHandler) *HTMLVar {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLVar) OnClick(h EventHandler) *HTMLVar {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLVar) OnContextMenu(h EventHandler) *HTMLVar {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLVar) OnCopy(h EventHandler) *HTMLVar {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLVar) OnCut(h EventHandler) *HTMLVar {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLVar) OnDblClick(h EventHandler) *HTMLVar {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLVar) OnDrag(h EventHandler) *HTMLVar {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLVar) OnDragEnd(h EventHandler) *HTMLVar {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLVar) OnDragEnter(h EventHandler) *HTMLVar {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLVar) OnDragLeave(h EventHandler) *HTMLVar {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLVar) OnDragOver(h EventHandler) *HTMLVar {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLVar) OnDragStart(h EventHandler) *HTMLVar {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLVar) OnDrop(h EventHandler) *HTMLVar {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLVar) OnFocus(h EventHandler) *HTMLVar {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLVar) OnInput(h EventHandler) *HTMLVar {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLVar) OnInvalid(h EventHandler) *HTMLVar {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLVar) OnKeyDown(h EventHandler) *HTMLVar {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLVar) OnKeyPress(h EventHandler) *HTMLVar {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLVar) OnKeyup(h EventHandler) *HTMLVar {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLVar) OnMouseDown(h EventHandler) *HTMLVar {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLVar) OnMouseMove(h EventHandler) *HTMLVar {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLVar) OnMouseOut(h EventHandler) *HTMLVar {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLVar) OnMouseOver(h EventHandler) *HTMLVar {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLVar) OnMouseUp(h EventHandler) *HTMLVar {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLVar) OnPaste(h EventHandler) *HTMLVar {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLVar) OnReset(h EventHandler) *HTMLVar {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLVar) OnScroll(h EventHandler) *HTMLVar {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLVar) OnSearch(h EventHandler) *HTMLVar {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLVar) OnSelect(h EventHandler) *HTMLVar {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLVar) OnSubmit(h EventHandler) *HTMLVar {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLVar) OnWheel(h EventHandler) *HTMLVar {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLVar) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLVideo represents an HTML element <video>.
type HTMLVideo struct {
	elem
}

// Video returns an HTML element that defines a video or movie.
func Video() *HTMLVideo {
	return &HTMLVideo{
		elem: elem{
			tag:         "video",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLVideo) Body(nodes ...Node) *HTMLVideo {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLVideo) AccessKey(v string) *HTMLVideo {
	e.elem.setAttribute("accesskey", v)
	return e
}

// AutoPlay specifies that the audio/video will start playing as soon as it is ready.
func (e *HTMLVideo) AutoPlay(v bool) *HTMLVideo {
	e.elem.setAttribute("autoplay", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLVideo) Class(v string) *HTMLVideo {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLVideo) ContentEditable(v bool) *HTMLVideo {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// Controls specifies that audio/video controls should be displayed (such as a play/pause button etc).
func (e *HTMLVideo) Controls(v bool) *HTMLVideo {
	e.elem.setAttribute("controls", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLVideo) DataSet(k, v string) *HTMLVideo {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLVideo) Dir(v string) *HTMLVideo {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLVideo) Draggable(v bool) *HTMLVideo {
	e.elem.setAttribute("draggable", v)
	return e
}

// Height specifies the height of the element (in pixels).
func (e *HTMLVideo) Height(v int) *HTMLVideo {
	e.elem.setAttribute("height", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLVideo) Hidden(v bool) *HTMLVideo {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLVideo) ID(v string) *HTMLVideo {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLVideo) Lang(v string) *HTMLVideo {
	e.elem.setAttribute("lang", v)
	return e
}

// Loop specifies that the audio/video will start over again, every time it is finished.
func (e *HTMLVideo) Loop(v bool) *HTMLVideo {
	e.elem.setAttribute("loop", v)
	return e
}

// Muted specifies that the audio output of the video should be muted.
func (e *HTMLVideo) Muted(v bool) *HTMLVideo {
	e.elem.setAttribute("muted", v)
	return e
}

// Poster specifies an image to be shown while the video is downloading, or until the user hits the play button.
func (e *HTMLVideo) Poster(v string) *HTMLVideo {
	e.elem.setAttribute("poster", v)
	return e
}

// Preload specifies if and how the author thinks the audio/video should be loaded when the page loads.
func (e *HTMLVideo) Preload(v string) *HTMLVideo {
	e.elem.setAttribute("preload", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLVideo) Spellcheck(v bool) *HTMLVideo {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Src specifies the URL of the media file.
func (e *HTMLVideo) Src(v string) *HTMLVideo {
	e.elem.setAttribute("src", v)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLVideo) Style(v string) *HTMLVideo {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLVideo) TabIndex(v int) *HTMLVideo {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLVideo) Title(v string) *HTMLVideo {
	e.elem.setAttribute("title", v)
	return e
}

// Width specifies the width of the element.
func (e *HTMLVideo) Width(v int) *HTMLVideo {
	e.elem.setAttribute("width", v)
	return e
}

// OnAbort calls the given handler on abort.
func (e *HTMLVideo) OnAbort(h EventHandler) *HTMLVideo {
	e.setEventHandler("abort", h)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLVideo) OnBlur(h EventHandler) *HTMLVideo {
	e.setEventHandler("blur", h)
	return e
}

// OnCanPlay calls the given handler when a file is ready to start playing (when it has buffered enough to begin).
func (e *HTMLVideo) OnCanPlay(h EventHandler) *HTMLVideo {
	e.setEventHandler("canplay", h)
	return e
}

// OnCanPlayThrough calls the given handler when a file can be played all the way to the end without pausing for buffering.
func (e *HTMLVideo) OnCanPlayThrough(h EventHandler) *HTMLVideo {
	e.setEventHandler("canplaythrough", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLVideo) OnChange(h EventHandler) *HTMLVideo {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLVideo) OnClick(h EventHandler) *HTMLVideo {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLVideo) OnContextMenu(h EventHandler) *HTMLVideo {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLVideo) OnCopy(h EventHandler) *HTMLVideo {
	e.setEventHandler("copy", h)
	return e
}

// OnCueChange calls the given handler when the cue changes in a track element.
func (e *HTMLVideo) OnCueChange(h EventHandler) *HTMLVideo {
	e.setEventHandler("cuechange", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLVideo) OnCut(h EventHandler) *HTMLVideo {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLVideo) OnDblClick(h EventHandler) *HTMLVideo {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLVideo) OnDrag(h EventHandler) *HTMLVideo {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLVideo) OnDragEnd(h EventHandler) *HTMLVideo {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLVideo) OnDragEnter(h EventHandler) *HTMLVideo {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLVideo) OnDragLeave(h EventHandler) *HTMLVideo {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLVideo) OnDragOver(h EventHandler) *HTMLVideo {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLVideo) OnDragStart(h EventHandler) *HTMLVideo {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLVideo) OnDrop(h EventHandler) *HTMLVideo {
	e.setEventHandler("drop", h)
	return e
}

// OnDurationChange calls the given handler when the length of the media changes.
func (e *HTMLVideo) OnDurationChange(h EventHandler) *HTMLVideo {
	e.setEventHandler("durationchange", h)
	return e
}

// OnEmptied calls the given handler when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).
func (e *HTMLVideo) OnEmptied(h EventHandler) *HTMLVideo {
	e.setEventHandler("emptied", h)
	return e
}

// OnEnded calls the given handler when the media has reach the end.
func (e *HTMLVideo) OnEnded(h EventHandler) *HTMLVideo {
	e.setEventHandler("ended", h)
	return e
}

// OnError calls the given handler when an error occurs.
func (e *HTMLVideo) OnError(h EventHandler) *HTMLVideo {
	e.setEventHandler("error", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLVideo) OnFocus(h EventHandler) *HTMLVideo {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLVideo) OnInput(h EventHandler) *HTMLVideo {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLVideo) OnInvalid(h EventHandler) *HTMLVideo {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLVideo) OnKeyDown(h EventHandler) *HTMLVideo {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLVideo) OnKeyPress(h EventHandler) *HTMLVideo {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLVideo) OnKeyup(h EventHandler) *HTMLVideo {
	e.setEventHandler("keyup", h)
	return e
}

// OnLoadStart calls the given handler just as the file begins to load before anything is actually loaded.
func (e *HTMLVideo) OnLoadStart(h EventHandler) *HTMLVideo {
	e.setEventHandler("loadstart", h)
	return e
}

// OnLoadedData calls the given handler when media data is loaded.
func (e *HTMLVideo) OnLoadedData(h EventHandler) *HTMLVideo {
	e.setEventHandler("loadeddata", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLVideo) OnMouseDown(h EventHandler) *HTMLVideo {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLVideo) OnMouseMove(h EventHandler) *HTMLVideo {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLVideo) OnMouseOut(h EventHandler) *HTMLVideo {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLVideo) OnMouseOver(h EventHandler) *HTMLVideo {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLVideo) OnMouseUp(h EventHandler) *HTMLVideo {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLVideo) OnPaste(h EventHandler) *HTMLVideo {
	e.setEventHandler("paste", h)
	return e
}

// OnPause calls the given handler when the media is paused either by the user or programmatically.
func (e *HTMLVideo) OnPause(h EventHandler) *HTMLVideo {
	e.setEventHandler("pause", h)
	return e
}

// OnPlay calls the given handler when the media is ready to start playing.
func (e *HTMLVideo) OnPlay(h EventHandler) *HTMLVideo {
	e.setEventHandler("play", h)
	return e
}

// OnPlaying calls the given handler when the media actually has started playing.
func (e *HTMLVideo) OnPlaying(h EventHandler) *HTMLVideo {
	e.setEventHandler("playing", h)
	return e
}

// OnProgress calls the given handler when the browser is in the process of getting the media data.
func (e *HTMLVideo) OnProgress(h EventHandler) *HTMLVideo {
	e.setEventHandler("progress", h)
	return e
}

// OnRateChange calls the given handler each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
func (e *HTMLVideo) OnRateChange(h EventHandler) *HTMLVideo {
	e.setEventHandler("ratechange", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLVideo) OnReset(h EventHandler) *HTMLVideo {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLVideo) OnScroll(h EventHandler) *HTMLVideo {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLVideo) OnSearch(h EventHandler) *HTMLVideo {
	e.setEventHandler("search", h)
	return e
}

// OnSeeked calls the given handler when the seeking attribute is set to false indicating that seeking has ended.
func (e *HTMLVideo) OnSeeked(h EventHandler) *HTMLVideo {
	e.setEventHandler("seeked", h)
	return e
}

// OnSeeking calls the given handler when the seeking attribute is set to true indicating that seeking is active.
func (e *HTMLVideo) OnSeeking(h EventHandler) *HTMLVideo {
	e.setEventHandler("seeking", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLVideo) OnSelect(h EventHandler) *HTMLVideo {
	e.setEventHandler("select", h)
	return e
}

// OnStalled calls the given handler when the browser is unable to fetch the media data for whatever reason.
func (e *HTMLVideo) OnStalled(h EventHandler) *HTMLVideo {
	e.setEventHandler("stalled", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLVideo) OnSubmit(h EventHandler) *HTMLVideo {
	e.setEventHandler("submit", h)
	return e
}

// OnSuspend calls the given handler when fetching the media data is stopped before it is completely loaded for whatever reason.
func (e *HTMLVideo) OnSuspend(h EventHandler) *HTMLVideo {
	e.setEventHandler("suspend", h)
	return e
}

// OnTimeUpdate calls the given handler when the playing position has changed (like when the user fast forwards to a different point in the media).
func (e *HTMLVideo) OnTimeUpdate(h EventHandler) *HTMLVideo {
	e.setEventHandler("timeupdate", h)
	return e
}

// OnVolumeChange calls the given handler each time the volume is changed which (includes setting the volume to "mute").
func (e *HTMLVideo) OnVolumeChange(h EventHandler) *HTMLVideo {
	e.setEventHandler("volumechange", h)
	return e
}

// OnWaiting calls the given handler when the media has paused but is expected to resume (like when the media pauses to buffer more data).
func (e *HTMLVideo) OnWaiting(h EventHandler) *HTMLVideo {
	e.setEventHandler("waiting", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLVideo) OnWheel(h EventHandler) *HTMLVideo {
	e.setEventHandler("wheel", h)
	return e
}

// OnloadedMetaData calls the given handler when meta data (like dimensions and duration) are loaded.
func (e *HTMLVideo) OnloadedMetaData(h EventHandler) *HTMLVideo {
	e.setEventHandler("loadedmetadata", h)
	return e
}

func (e *HTMLVideo) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}

// HTMLWbr represents an HTML element <wbr>.
type HTMLWbr struct {
	elem
}

// Wbr returns an HTML element that defines a possible line-break.
func Wbr() *HTMLWbr {
	return &HTMLWbr{
		elem: elem{
			tag:         "wbr",
			selfClosing: false,
		},
	}
}

// Body set the content of the element.
func (e *HTMLWbr) Body(nodes ...Node) *HTMLWbr {
	e.setBody(e, nodes)
	return e
}

// AccessKey specifies a shortcut key to activate/focus an element.
func (e *HTMLWbr) AccessKey(v string) *HTMLWbr {
	e.elem.setAttribute("accesskey", v)
	return e
}

// Class specifies one or more classnames for an element (refers to a class in a style sheet). Multiple classnames are space separated.
func (e *HTMLWbr) Class(v string) *HTMLWbr {
	e.elem.setAttribute("class", v)
	return e
}

// ContentEditable specifies whether the content of an element is editable or not.
func (e *HTMLWbr) ContentEditable(v bool) *HTMLWbr {
	e.elem.setAttribute("contenteditable", v)
	return e
}

// DataSet stores custom data private to the page or application.
func (e *HTMLWbr) DataSet(k, v string) *HTMLWbr {
	e.elem.setAttribute("dataset-"+k, v)
	return e
}

// Dir specifies the text direction for the content in an element.
func (e *HTMLWbr) Dir(v string) *HTMLWbr {
	e.elem.setAttribute("dir", v)
	return e
}

// Draggable specifies whether an element is draggable or not.
func (e *HTMLWbr) Draggable(v bool) *HTMLWbr {
	e.elem.setAttribute("draggable", v)
	return e
}

// Hidden specifies that an element is not yet, or is no longer relevant.
func (e *HTMLWbr) Hidden(v bool) *HTMLWbr {
	e.elem.setAttribute("hidden", v)
	return e
}

// ID specifies a unique id for an element.
func (e *HTMLWbr) ID(v string) *HTMLWbr {
	e.elem.setAttribute("id", v)
	return e
}

// Lang specifies the language of the element's content.
func (e *HTMLWbr) Lang(v string) *HTMLWbr {
	e.elem.setAttribute("lang", v)
	return e
}

// Spellcheck specifies whether the element is to have its spelling and grammar checked or not.
func (e *HTMLWbr) Spellcheck(v bool) *HTMLWbr {
	s := "false"
	if v {
		s = "true"
	}

	e.elem.setAttribute("spellcheck", s)
	return e
}

// Style specifies an inline CSS style for an element.
func (e *HTMLWbr) Style(v string) *HTMLWbr {
	e.elem.setAttribute("style", v)
	return e
}

// TabIndex specifies the tabbing order of an element.
func (e *HTMLWbr) TabIndex(v int) *HTMLWbr {
	e.elem.setAttribute("tabindex", v)
	return e
}

// Title specifies extra information about an element.
func (e *HTMLWbr) Title(v string) *HTMLWbr {
	e.elem.setAttribute("title", v)
	return e
}

// OnBlur calls the given handler when the element loses focus.
func (e *HTMLWbr) OnBlur(h EventHandler) *HTMLWbr {
	e.setEventHandler("blur", h)
	return e
}

// OnChange calls the given handler when the value of the element is changed.
func (e *HTMLWbr) OnChange(h EventHandler) *HTMLWbr {
	e.setEventHandler("change", h)
	return e
}

// OnClick calls the given handler when there is a mouse click on the element.
func (e *HTMLWbr) OnClick(h EventHandler) *HTMLWbr {
	e.setEventHandler("click", h)
	return e
}

// OnContextMenu calls the given handler when a context menu is triggered.
func (e *HTMLWbr) OnContextMenu(h EventHandler) *HTMLWbr {
	e.setEventHandler("contextmenu", h)
	return e
}

// OnCopy calls the given handler when the user copies the content of an element.
func (e *HTMLWbr) OnCopy(h EventHandler) *HTMLWbr {
	e.setEventHandler("copy", h)
	return e
}

// OnCut calls the given handler when the user cuts the content of an element.
func (e *HTMLWbr) OnCut(h EventHandler) *HTMLWbr {
	e.setEventHandler("cut", h)
	return e
}

// OnDblClick calls the given handler when there is a mouse double-click on the element.
func (e *HTMLWbr) OnDblClick(h EventHandler) *HTMLWbr {
	e.setEventHandler("dblclick", h)
	return e
}

// OnDrag calls the given handler when an element is dragged.
func (e *HTMLWbr) OnDrag(h EventHandler) *HTMLWbr {
	e.setEventHandler("drag", h)
	return e
}

// OnDragEnd calls the given handler at the end of a drag operation.
func (e *HTMLWbr) OnDragEnd(h EventHandler) *HTMLWbr {
	e.setEventHandler("dragend", h)
	return e
}

// OnDragEnter calls the given handler when an element has been dragged to a valid drop target.
func (e *HTMLWbr) OnDragEnter(h EventHandler) *HTMLWbr {
	e.setEventHandler("dragenter", h)
	return e
}

// OnDragLeave calls the given handler when an element leaves a valid drop target.
func (e *HTMLWbr) OnDragLeave(h EventHandler) *HTMLWbr {
	e.setEventHandler("dragleave", h)
	return e
}

// OnDragOver calls the given handler when an element is being dragged over a valid drop target.
func (e *HTMLWbr) OnDragOver(h EventHandler) *HTMLWbr {
	e.setEventHandler("dragover", h)
	return e
}

// OnDragStart calls the given handler at the start of a drag operation.
func (e *HTMLWbr) OnDragStart(h EventHandler) *HTMLWbr {
	e.setEventHandler("dragstart", h)
	return e
}

// OnDrop calls the given handler when dragged element is being dropped.
func (e *HTMLWbr) OnDrop(h EventHandler) *HTMLWbr {
	e.setEventHandler("drop", h)
	return e
}

// OnFocus calls the given handler when the element gets focus.
func (e *HTMLWbr) OnFocus(h EventHandler) *HTMLWbr {
	e.setEventHandler("focus", h)
	return e
}

// OnInput calls the given handler when an element gets user input.
func (e *HTMLWbr) OnInput(h EventHandler) *HTMLWbr {
	e.setEventHandler("input", h)
	return e
}

// OnInvalid calls the given handler when an element is invalid.
func (e *HTMLWbr) OnInvalid(h EventHandler) *HTMLWbr {
	e.setEventHandler("invalid", h)
	return e
}

// OnKeyDown calls the given handler when a user is pressing a key.
func (e *HTMLWbr) OnKeyDown(h EventHandler) *HTMLWbr {
	e.setEventHandler("keydown", h)
	return e
}

// OnKeyPress calls the given handler when a user presses a key.
func (e *HTMLWbr) OnKeyPress(h EventHandler) *HTMLWbr {
	e.setEventHandler("keypress", h)
	return e
}

// OnKeyup calls the given handler when a user releases a key.
func (e *HTMLWbr) OnKeyup(h EventHandler) *HTMLWbr {
	e.setEventHandler("keyup", h)
	return e
}

// OnMouseDown calls the given handler when a mouse button is pressed down on an element.
func (e *HTMLWbr) OnMouseDown(h EventHandler) *HTMLWbr {
	e.setEventHandler("mousedown", h)
	return e
}

// OnMouseMove calls the given handler when the mouse pointer is moving while it is over an element.
func (e *HTMLWbr) OnMouseMove(h EventHandler) *HTMLWbr {
	e.setEventHandler("mousemove", h)
	return e
}

// OnMouseOut calls the given handler when the mouse pointer moves out of an element.
func (e *HTMLWbr) OnMouseOut(h EventHandler) *HTMLWbr {
	e.setEventHandler("mouseout", h)
	return e
}

// OnMouseOver calls the given handler when the mouse pointer moves over an element.
func (e *HTMLWbr) OnMouseOver(h EventHandler) *HTMLWbr {
	e.setEventHandler("mouseover", h)
	return e
}

// OnMouseUp calls the given handler when a mouse button is released over an element.
func (e *HTMLWbr) OnMouseUp(h EventHandler) *HTMLWbr {
	e.setEventHandler("mouseup", h)
	return e
}

// OnPaste calls the given handler when the user pastes some content in an element.
func (e *HTMLWbr) OnPaste(h EventHandler) *HTMLWbr {
	e.setEventHandler("paste", h)
	return e
}

// OnReset calls the given handler when the Reset button in a form is clicked.
func (e *HTMLWbr) OnReset(h EventHandler) *HTMLWbr {
	e.setEventHandler("reset", h)
	return e
}

// OnScroll calls the given handler when an element's scrollbar is being scrolled.
func (e *HTMLWbr) OnScroll(h EventHandler) *HTMLWbr {
	e.setEventHandler("scroll", h)
	return e
}

// OnSearch calls the given handler when the user writes something in a search field.
func (e *HTMLWbr) OnSearch(h EventHandler) *HTMLWbr {
	e.setEventHandler("search", h)
	return e
}

// OnSelect calls the given handler after some text has been selected in an element.
func (e *HTMLWbr) OnSelect(h EventHandler) *HTMLWbr {
	e.setEventHandler("select", h)
	return e
}

// OnSubmit calls the given handler when a form is submitted.
func (e *HTMLWbr) OnSubmit(h EventHandler) *HTMLWbr {
	e.setEventHandler("submit", h)
	return e
}

// OnWheel calls the given handler when the mouse wheel rolls up or down over an element.
func (e *HTMLWbr) OnWheel(h EventHandler) *HTMLWbr {
	e.setEventHandler("wheel", h)
	return e
}

func (e *HTMLWbr) nodeType() reflect.Type {
	return reflect.TypeOf(e)
}
