package main

// Code generated by go generate; DO NOT EDIT.

const goappJS = "const etag = '{{.ETag}}'\n\nself.addEventListener('install', function (e) {\n  console.log('intalling goapp worker', etag)\n  self.skipWaiting()\n\n  e.waitUntil(\n    caches.open('goapp').then(function (cache) {\n      return cache.addAll([\n        {{range .Paths}}'{{.}}',\n        {{end}}'/'\n      ])\n    })\n  )\n})\n\nself.addEventListener('activate', event => {\n  console.log('goapp worker', etag, 'is activated')\n})\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches\n      .match(event.request)\n      .then(response => {\n        return response || fetch(event.request)\n      })\n  )\n})\n"
const mainServer = "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/maxence-charriere/app/pkg/app\"\n\t\"github.com/maxence-charriere/app/pkg/log\"\n)\n\nfunc main() {\n\t// Setup the http handler to serve the web assembly app:\n\thttp.Handle(\"/\", &app.Handler{\n\t\tName: \"APP_NAME\",\n\t})\n\n\t// Building server addr:\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"3000\"\n\t}\n\taddr := fmt.Sprintf(\":%s\", port)\n\n\t// Launching server:\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Error(\"listening and serving http requests failed\").\n\t\t\tT(\"reason\", err).\n\t\t\tT(\"addr\", addr).\n\t\t\tPanic()\n\t}\n}\n"
const mainWasm = "package main\n\nimport \"github.com/maxence-charriere/app/pkg/app\"\n\nfunc main() {\n\t// Import the components that are used to describe the UI:\n\tapp.Import(\n\t\t&hello{},\n\t)\n\n\t// Defines the component to load when an URL without path is loaded:\n\tapp.DefaultPath = \"hello\"\n\n\t// Runs the app in the browser:\n\tapp.Run()\n}\n\ntype hello app.ZeroCompo\n\nfunc (h *hello) Render() string {\n\treturn `\n<h1>Hello World</h1>\n\t`\n}\n"
